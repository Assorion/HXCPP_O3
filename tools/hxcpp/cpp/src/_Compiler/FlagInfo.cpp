// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED__Compiler_FlagInfo
#include <_Compiler/FlagInfo.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0056ef779a76f88c_10_new,"_Compiler.FlagInfo","new",0xc1f3679c,"_Compiler.FlagInfo.new","Compiler.hx",10,0xa12a885f)
HX_LOCAL_STACK_FRAME(_hx_pos_0056ef779a76f88c_15_add,"_Compiler.FlagInfo","add",0xc1e9895d,"_Compiler.FlagInfo.add","Compiler.hx",15,0xa12a885f)
HX_LOCAL_STACK_FRAME(_hx_pos_0056ef779a76f88c_22_toString,"_Compiler.FlagInfo","toString",0x17557ff0,"_Compiler.FlagInfo.toString","Compiler.hx",22,0xa12a885f)
namespace _Compiler{

void FlagInfo_obj::__construct(::String inFlag,::String inTag){
            	HX_STACKFRAME(&_hx_pos_0056ef779a76f88c_10_new)
HXLINE(  11)		this->flag = inFlag;
HXLINE(  12)		this->tag = inTag;
            	}

Dynamic FlagInfo_obj::__CreateEmpty() { return new FlagInfo_obj; }

void *FlagInfo_obj::_hx_vtable = 0;

Dynamic FlagInfo_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlagInfo_obj > _hx_result = new FlagInfo_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlagInfo_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x54b48ef8;
}

void FlagInfo_obj::add(::Array< ::String > args,::Array< ::String > inFilter){
            	HX_STACKFRAME(&_hx_pos_0056ef779a76f88c_15_add)
HXLINE(  16)		bool allowSpace = (inFilter->indexOf(HX_("nvcc",e8,58,0f,49),null()) < 0);
HXLINE(  17)		bool _hx_tmp;
HXDLIN(  17)		bool _hx_tmp1;
HXDLIN(  17)		if ((this->tag == HX_("",00,00,00,00))) {
HXLINE(  17)			_hx_tmp1 = allowSpace;
            		}
            		else {
HXLINE(  17)			_hx_tmp1 = false;
            		}
HXDLIN(  17)		if (!(_hx_tmp1)) {
HXLINE(  17)			_hx_tmp = (inFilter->indexOf(this->tag,null()) >= 0);
            		}
            		else {
HXLINE(  17)			_hx_tmp = true;
            		}
HXDLIN(  17)		if (_hx_tmp) {
HXLINE(  18)			args->push(this->flag);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlagInfo_obj,add,(void))

::String FlagInfo_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_0056ef779a76f88c_22_toString)
HXDLIN(  22)		if ((this->tag == HX_("",00,00,00,00))) {
HXLINE(  23)			return this->flag;
            		}
            		else {
HXLINE(  25)			return ((((HX_("",00,00,00,00) + this->flag) + HX_("(",28,00,00,00)) + this->tag) + HX_(")",29,00,00,00));
            		}
HXLINE(  22)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlagInfo_obj,toString,return )


FlagInfo_obj::FlagInfo_obj()
{
}

void FlagInfo_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlagInfo);
	HX_MARK_MEMBER_NAME(flag,"flag");
	HX_MARK_MEMBER_NAME(tag,"tag");
	HX_MARK_END_CLASS();
}

void FlagInfo_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(flag,"flag");
	HX_VISIT_MEMBER_NAME(tag,"tag");
}

::hx::Val FlagInfo_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"tag") ) { return ::hx::Val( tag ); }
		if (HX_FIELD_EQ(inName,"add") ) { return ::hx::Val( add_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"flag") ) { return ::hx::Val( flag ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FlagInfo_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"tag") ) { tag=inValue.Cast< ::String >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"flag") ) { flag=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlagInfo_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("flag",ac,0b,be,43));
	outFields->push(HX_("tag",5a,5a,58,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlagInfo_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(FlagInfo_obj,flag),HX_("flag",ac,0b,be,43)},
	{::hx::fsString,(int)offsetof(FlagInfo_obj,tag),HX_("tag",5a,5a,58,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FlagInfo_obj_sStaticStorageInfo = 0;
#endif

static ::String FlagInfo_obj_sMemberFields[] = {
	HX_("flag",ac,0b,be,43),
	HX_("tag",5a,5a,58,00),
	HX_("add",21,f2,49,00),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class FlagInfo_obj::__mClass;

void FlagInfo_obj::__register()
{
	FlagInfo_obj _hx_dummy;
	FlagInfo_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("_Compiler.FlagInfo",aa,a9,10,41);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlagInfo_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlagInfo_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlagInfo_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlagInfo_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace _Compiler
