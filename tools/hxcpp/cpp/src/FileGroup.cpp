// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_CompileCache
#include <CompileCache.h>
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_File
#include <File.h>
#endif
#ifndef INCLUDED_FileGroup
#include <FileGroup.h>
#endif
#ifndef INCLUDED_HLSL
#include <HLSL.h>
#endif
#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_Log
#include <Log.h>
#endif
#ifndef INCLUDED_PathManager
#include <PathManager.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_crypto_Md5
#include <haxe/crypto/Md5.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Encoding
#include <haxe/io/Encoding.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_sys_io_FileOutput
#include <sys/io/FileOutput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_362cbdda4c326816_31_new,"FileGroup","new",0xa9f41175,"FileGroup.new","FileGroup.hx",31,0x9971939b)
HX_LOCAL_STACK_FRAME(_hx_pos_362cbdda4c326816_36_toString,"FileGroup","toString",0x42c18377,"FileGroup.toString","FileGroup.hx",36,0x9971939b)
HX_LOCAL_STACK_FRAME(_hx_pos_362cbdda4c326816_39_replace,"FileGroup","replace",0xc7e737c9,"FileGroup.replace","FileGroup.hx",39,0x9971939b)
HX_LOCAL_STACK_FRAME(_hx_pos_362cbdda4c326816_64_find,"FileGroup","find",0x06548184,"FileGroup.find","FileGroup.hx",64,0x9971939b)
HX_LOCAL_STACK_FRAME(_hx_pos_362cbdda4c326816_69_addFile,"FileGroup","addFile",0x9cb800d2,"FileGroup.addFile","FileGroup.hx",69,0x9971939b)
HX_LOCAL_STACK_FRAME(_hx_pos_362cbdda4c326816_73_hasFiles,"FileGroup","hasFiles",0x9743db88,"FileGroup.hasFiles","FileGroup.hx",73,0x9971939b)
HX_LOCAL_STACK_FRAME(_hx_pos_362cbdda4c326816_77_filter,"FileGroup","filter",0xa454f9c3,"FileGroup.filter","FileGroup.hx",77,0x9971939b)
HX_LOCAL_STACK_FRAME(_hx_pos_362cbdda4c326816_87_getTags,"FileGroup","getTags",0x3c385424,"FileGroup.getTags","FileGroup.hx",87,0x9971939b)
HX_LOCAL_STACK_FRAME(_hx_pos_362cbdda4c326816_92_addTag,"FileGroup","addTag",0xbe2944c4,"FileGroup.addTag","FileGroup.hx",92,0x9971939b)
HX_LOCAL_STACK_FRAME(_hx_pos_362cbdda4c326816_103_isPrecompiled,"FileGroup","isPrecompiled",0xbfc6f83f,"FileGroup.isPrecompiled","FileGroup.hx",103,0x9971939b)
HX_LOCAL_STACK_FRAME(_hx_pos_362cbdda4c326816_107_dontPrecompile,"FileGroup","dontPrecompile",0x843a70ac,"FileGroup.dontPrecompile","FileGroup.hx",107,0x9971939b)
HX_LOCAL_STACK_FRAME(_hx_pos_362cbdda4c326816_112_addCompilerFlag,"FileGroup","addCompilerFlag",0x64720b41,"FileGroup.addCompilerFlag","FileGroup.hx",112,0x9971939b)
HX_LOCAL_STACK_FRAME(_hx_pos_362cbdda4c326816_116_getCacheProject,"FileGroup","getCacheProject",0xf982af02,"FileGroup.getCacheProject","FileGroup.hx",116,0x9971939b)
HX_LOCAL_STACK_FRAME(_hx_pos_362cbdda4c326816_124_addDepend,"FileGroup","addDepend",0x23ab8942,"FileGroup.addDepend","FileGroup.hx",124,0x9971939b)
HX_LOCAL_STACK_FRAME(_hx_pos_362cbdda4c326816_145_getNewestFile,"FileGroup","getNewestFile",0x2550430d,"FileGroup.getNewestFile","FileGroup.hx",145,0x9971939b)
HX_LOCAL_STACK_FRAME(_hx_pos_362cbdda4c326816_149_addDependFiles,"FileGroup","addDependFiles",0x8c37f5d5,"FileGroup.addDependFiles","FileGroup.hx",149,0x9971939b)
HX_LOCAL_STACK_FRAME(_hx_pos_362cbdda4c326816_165_addHLSL,"FileGroup","addHLSL",0x9df456d3,"FileGroup.addHLSL","FileGroup.hx",165,0x9971939b)
HX_LOCAL_STACK_FRAME(_hx_pos_362cbdda4c326816_173_addOptions,"FileGroup","addOptions",0x92059ac8,"FileGroup.addOptions","FileGroup.hx",173,0x9971939b)
HX_LOCAL_STACK_FRAME(_hx_pos_362cbdda4c326816_178_checkDependsExist,"FileGroup","checkDependsExist",0xa53eac6d,"FileGroup.checkDependsExist","FileGroup.hx",178,0x9971939b)
HX_LOCAL_STACK_FRAME(_hx_pos_362cbdda4c326816_186_filterOptions,"FileGroup","filterOptions",0x9de86fdb,"FileGroup.filterOptions","FileGroup.hx",186,0x9971939b)
HX_LOCAL_STACK_FRAME(_hx_pos_362cbdda4c326816_213_checkOptions,"FileGroup","checkOptions",0x9e705fc1,"FileGroup.checkOptions","FileGroup.hx",213,0x9971939b)
HX_LOCAL_STACK_FRAME(_hx_pos_362cbdda4c326816_250_getPchDir,"FileGroup","getPchDir",0x87f64543,"FileGroup.getPchDir","FileGroup.hx",250,0x9971939b)
HX_LOCAL_STACK_FRAME(_hx_pos_362cbdda4c326816_258_getPchName,"FileGroup","getPchName",0x761c6195,"FileGroup.getPchName","FileGroup.hx",258,0x9971939b)
HX_LOCAL_STACK_FRAME(_hx_pos_362cbdda4c326816_263_isOutOfDate,"FileGroup","isOutOfDate",0xb25942de,"FileGroup.isOutOfDate","FileGroup.hx",263,0x9971939b)
HX_LOCAL_STACK_FRAME(_hx_pos_362cbdda4c326816_266_isCached,"FileGroup","isCached",0x13aeae37,"FileGroup.isCached","FileGroup.hx",266,0x9971939b)
HX_LOCAL_STACK_FRAME(_hx_pos_362cbdda4c326816_269_preBuild,"FileGroup","preBuild",0x45173ed6,"FileGroup.preBuild","FileGroup.hx",269,0x9971939b)
HX_LOCAL_STACK_FRAME(_hx_pos_362cbdda4c326816_284_getDependString,"FileGroup","getDependString",0x4d606da8,"FileGroup.getDependString","FileGroup.hx",284,0x9971939b)
HX_LOCAL_STACK_FRAME(_hx_pos_362cbdda4c326816_288_setPrecompiled,"FileGroup","setPrecompiled",0xdb2ff33d,"FileGroup.setPrecompiled","FileGroup.hx",288,0x9971939b)

void FileGroup_obj::__construct(::String inDir,::String inId,::hx::Null< bool >  __o_inSetImportDir){
            		bool inSetImportDir = __o_inSetImportDir.Default(false);
            	HX_STACKFRAME(&_hx_pos_362cbdda4c326816_31_new)
HXLINE(  32)		this->mId = inId;
HXLINE(  33)		this->replace(inDir,inSetImportDir);
            	}

Dynamic FileGroup_obj::__CreateEmpty() { return new FileGroup_obj; }

void *FileGroup_obj::_hx_vtable = 0;

Dynamic FileGroup_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FileGroup_obj > _hx_result = new FileGroup_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool FileGroup_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0132a843;
}

::String FileGroup_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_362cbdda4c326816_36_toString)
HXDLIN(  36)		return ((HX_("FileGroup(",c5,6f,5d,f3) + this->mId) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FileGroup_obj,toString,return )

 ::FileGroup FileGroup_obj::replace(::String inDir,bool inSetImportDir){
            	HX_GC_STACKFRAME(&_hx_pos_362cbdda4c326816_39_replace)
HXLINE(  40)		this->mNewest = ( (Float)(0) );
HXLINE(  41)		this->mFiles =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  42)		this->mCompilerFlags = ::Array_obj< ::String >::__new(0);
HXLINE(  43)		this->mPrecompiledHeader = HX_("",00,00,00,00);
HXLINE(  44)		this->mCacheDepends = ::Array_obj< ::String >::__new(0);
HXLINE(  45)		this->mMissingDepends = ::Array_obj< ::String >::__new(0);
HXLINE(  46)		this->mOptions = ::Array_obj< ::String >::__new(0);
HXLINE(  47)		this->mHLSLs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  48)		this->mDir = inDir;
HXLINE(  49)		this->mConfig = HX_("",00,00,00,00);
HXLINE(  50)		this->mAsLibrary = false;
HXLINE(  51)		this->mAddTwice = false;
HXLINE(  52)		this->mSetImportDir = inSetImportDir;
HXLINE(  53)		this->mUseCache = false;
HXLINE(  54)		this->mRespectTimestamp = false;
HXLINE(  55)		this->mCacheProject = HX_("",00,00,00,00);
HXLINE(  56)		this->mNvcc = false;
HXLINE(  57)		this->mTags = HX_("haxe,static",74,82,4f,d4);
HXLINE(  58)		this->mObjPrefix = HX_("",00,00,00,00);
HXLINE(  59)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FileGroup_obj,replace,return )

 ::File FileGroup_obj::find(::String name){
            	HX_STACKFRAME(&_hx_pos_362cbdda4c326816_64_find)
HXDLIN(  64)		return ( ( ::File)(this->mFiles->get(name)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(FileGroup_obj,find,return )

void FileGroup_obj::addFile( ::File file){
            	HX_STACKFRAME(&_hx_pos_362cbdda4c326816_69_addFile)
HXDLIN(  69)		this->mFiles->set(file->mName,file);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FileGroup_obj,addFile,(void))

bool FileGroup_obj::hasFiles(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		bool _hx_run( ::File file){
            			HX_STACKFRAME(&_hx_pos_362cbdda4c326816_73_hasFiles)
HXDLIN(  73)			return true;
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_362cbdda4c326816_73_hasFiles)
HXDLIN(  73)		return ::Lambda_obj::exists(this->mFiles, ::Dynamic(new _hx_Closure_0()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FileGroup_obj,hasFiles,return )

void FileGroup_obj::filter( ::haxe::ds::StringMap defines){
            	HX_GC_STACKFRAME(&_hx_pos_362cbdda4c326816_77_filter)
HXLINE(  78)		 ::haxe::ds::StringMap newFiles =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  79)		{
HXLINE(  79)			 ::Dynamic file = this->mFiles->iterator();
HXDLIN(  79)			while(( (bool)(file->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  79)				 ::File file1 = ( ( ::File)(file->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  80)				if (file1->keep(defines)) {
HXLINE(  81)					newFiles->set(file1->mName,file1);
            				}
            			}
            		}
HXLINE(  82)		this->mFiles = newFiles;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FileGroup_obj,filter,(void))

::String FileGroup_obj::getTags(){
            	HX_STACKFRAME(&_hx_pos_362cbdda4c326816_87_getTags)
HXDLIN(  87)		return this->mTags;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FileGroup_obj,getTags,return )

void FileGroup_obj::addTag(::String inTag){
            	HX_STACKFRAME(&_hx_pos_362cbdda4c326816_92_addTag)
HXDLIN(  92)		bool _hx_tmp;
HXDLIN(  92)		if (::hx::IsNotNull( inTag )) {
HXDLIN(  92)			_hx_tmp = (inTag != HX_("",00,00,00,00));
            		}
            		else {
HXDLIN(  92)			_hx_tmp = false;
            		}
HXDLIN(  92)		if (_hx_tmp) {
HXLINE(  94)			::Array< ::String > have = this->mTags.split(HX_(",",2c,00,00,00));
HXLINE(  95)			if ((have->indexOf(inTag,null()) < 0)) {
HXLINE(  97)				have->push(inTag);
HXLINE(  98)				this->mTags = have->join(HX_(",",2c,00,00,00));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FileGroup_obj,addTag,(void))

bool FileGroup_obj::isPrecompiled(){
            	HX_STACKFRAME(&_hx_pos_362cbdda4c326816_103_isPrecompiled)
HXDLIN( 103)		return (this->mPrecompiledHeader != HX_("",00,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FileGroup_obj,isPrecompiled,return )

void FileGroup_obj::dontPrecompile(){
            	HX_STACKFRAME(&_hx_pos_362cbdda4c326816_107_dontPrecompile)
HXDLIN( 107)		this->mPrecompiledHeader = HX_("",00,00,00,00);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FileGroup_obj,dontPrecompile,(void))

void FileGroup_obj::addCompilerFlag(::String inFlag){
            	HX_STACKFRAME(&_hx_pos_362cbdda4c326816_112_addCompilerFlag)
HXDLIN( 112)		this->mCompilerFlags->push(inFlag);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FileGroup_obj,addCompilerFlag,(void))

::String FileGroup_obj::getCacheProject(){
            	HX_STACKFRAME(&_hx_pos_362cbdda4c326816_116_getCacheProject)
HXLINE( 117)		if ((this->mCacheProject == HX_("",00,00,00,00))) {
HXLINE( 118)			this->mCacheProject = this->mId;
            		}
HXLINE( 119)		return this->mCacheProject;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FileGroup_obj,getCacheProject,return )

void FileGroup_obj::addDepend(::String inFile,bool inDateOnly){
            	HX_STACKFRAME(&_hx_pos_362cbdda4c326816_124_addDepend)
HXLINE( 125)		bool _hx_tmp;
HXDLIN( 125)		if (this->mSetImportDir) {
HXLINE( 125)			_hx_tmp = !(::haxe::io::Path_obj::isAbsolute(inFile));
            		}
            		else {
HXLINE( 125)			_hx_tmp = false;
            		}
HXDLIN( 125)		if (_hx_tmp) {
HXLINE( 126)			inFile = ::PathManager_obj::combine(this->mDir,inFile);
            		}
HXLINE( 127)		if (!(::sys::FileSystem_obj::exists(inFile))) {
HXLINE( 129)			this->mMissingDepends->push(inFile);
HXLINE( 130)			return;
            		}
HXLINE( 132)		Float stamp = ( ( ::Date)(::sys::FileSystem_obj::stat(inFile)->__Field(HX_("mtime",fa,06,aa,0f),::hx::paccDynamic)) )->getTime();
HXLINE( 133)		if ((stamp > this->mNewest)) {
HXLINE( 135)			this->mNewest = stamp;
HXLINE( 136)			this->mNewestFile = inFile;
            		}
HXLINE( 139)		if (!(inDateOnly)) {
HXLINE( 140)			this->mCacheDepends->push(inFile);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FileGroup_obj,addDepend,(void))

::String FileGroup_obj::getNewestFile(){
            	HX_STACKFRAME(&_hx_pos_362cbdda4c326816_145_getNewestFile)
HXDLIN( 145)		return ((((HX_("",00,00,00,00) + this->mId) + HX_("(",28,00,00,00)) + this->mNewestFile) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FileGroup_obj,getNewestFile,return )

void FileGroup_obj::addDependFiles( ::FileGroup inGroup){
            	HX_STACKFRAME(&_hx_pos_362cbdda4c326816_149_addDependFiles)
HXLINE( 150)		if ((inGroup->mNewest > this->mNewest)) {
HXLINE( 152)			this->mNewestFile = inGroup->getNewestFile();
HXLINE( 153)			this->mNewest = inGroup->mNewest;
            		}
HXLINE( 156)		{
HXLINE( 156)			int _g = 0;
HXDLIN( 156)			::Array< ::String > _g1 = inGroup->mCacheDepends;
HXDLIN( 156)			while((_g < _g1->length)){
HXLINE( 156)				::String depend = _g1->__get(_g);
HXDLIN( 156)				_g = (_g + 1);
HXLINE( 157)				this->mCacheDepends->push(depend);
            			}
            		}
HXLINE( 159)		{
HXLINE( 159)			int _g2 = 0;
HXDLIN( 159)			::Array< ::String > _g3 = inGroup->mMissingDepends;
HXDLIN( 159)			while((_g2 < _g3->length)){
HXLINE( 159)				::String missing = _g3->__get(_g2);
HXDLIN( 159)				_g2 = (_g2 + 1);
HXLINE( 160)				this->mMissingDepends->push(missing);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FileGroup_obj,addDependFiles,(void))

void FileGroup_obj::addHLSL(::String inFile,::String inProfile,::String inVariable,::String inTarget){
            	HX_GC_STACKFRAME(&_hx_pos_362cbdda4c326816_165_addHLSL)
HXLINE( 166)		this->addDepend(inFile,true);
HXLINE( 168)		::Array< ::Dynamic> _hx_tmp = this->mHLSLs;
HXDLIN( 168)		_hx_tmp->push( ::HLSL_obj::__alloc( HX_CTX ,inFile,inProfile,inVariable,inTarget));
            	}


HX_DEFINE_DYNAMIC_FUNC4(FileGroup_obj,addHLSL,(void))

void FileGroup_obj::addOptions(::String inFile){
            	HX_STACKFRAME(&_hx_pos_362cbdda4c326816_173_addOptions)
HXDLIN( 173)		this->mOptions->push(inFile);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FileGroup_obj,addOptions,(void))

void FileGroup_obj::checkDependsExist(){
            	HX_STACKFRAME(&_hx_pos_362cbdda4c326816_178_checkDependsExist)
HXDLIN( 178)		if ((this->mMissingDepends->length > 0)) {
HXLINE( 180)			::String _hx_tmp = ((HX_("Could not find dependencies for ",33,bd,e5,a5) + this->mId) + HX_(" : [ ",ab,87,41,93));
HXDLIN( 180)			::Log_obj::error(((_hx_tmp + this->mMissingDepends->join(HX_(", ",74,26,00,00))) + HX_(" ]",3d,1c,00,00)),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FileGroup_obj,checkDependsExist,(void))

::String FileGroup_obj::filterOptions(::String contents){
            	HX_STACKFRAME(&_hx_pos_362cbdda4c326816_186_filterOptions)
HXLINE( 188)		if ((contents.substr(0,1) == HX_(" ",20,00,00,00))) {
HXLINE( 189)			return contents;
            		}
HXLINE( 191)		::Array< ::String > result = ::Array_obj< ::String >::__new();
HXLINE( 192)		{
HXLINE( 192)			int _g = 0;
HXDLIN( 192)			::Array< ::String > _g1 = contents.split(HX_("\n",0a,00,00,00));
HXDLIN( 192)			while((_g < _g1->length)){
HXLINE( 192)				::String def = _g1->__get(_g);
HXDLIN( 192)				_g = (_g + 1);
HXLINE( 194)				::String name = def.split(HX_("=",3d,00,00,00))->__get(0);
HXLINE( 195)				if ((name.indexOf(HX_("hxcpp_link",e6,9e,0c,12),null()) < 0)) {
HXLINE( 199)					bool _hx_tmp;
HXDLIN( 199)					bool _hx_tmp1;
HXDLIN( 199)					bool _hx_tmp2;
HXDLIN( 199)					bool _hx_tmp3;
HXDLIN( 199)					bool _hx_tmp4;
HXDLIN( 199)					if ((name != HX_("hxcpp_verbose",16,6c,96,13))) {
HXLINE( 199)						_hx_tmp4 = (name == HX_("hxcpp_silent",81,90,c7,f0));
            					}
            					else {
HXLINE( 199)						_hx_tmp4 = true;
            					}
HXDLIN( 199)					if (!(_hx_tmp4)) {
HXLINE( 199)						_hx_tmp3 = (name == HX_("hxcpp_quiet",48,10,ea,a1));
            					}
            					else {
HXLINE( 199)						_hx_tmp3 = true;
            					}
HXDLIN( 199)					if (!(_hx_tmp3)) {
HXLINE( 199)						_hx_tmp2 = (name == HX_("hxcpp_times",5a,47,32,54));
            					}
            					else {
HXLINE( 199)						_hx_tmp2 = true;
            					}
HXDLIN( 199)					if (!(_hx_tmp2)) {
HXLINE( 199)						_hx_tmp1 = (name == HX_("hxcpp_neko_buildtool",8e,70,ad,b1));
            					}
            					else {
HXLINE( 199)						_hx_tmp1 = true;
            					}
HXDLIN( 199)					if (!(_hx_tmp1)) {
HXLINE( 199)						_hx_tmp = (name == HX_("hxcpp_link_no_tool_depends",c5,e1,b8,ea));
            					}
            					else {
HXLINE( 199)						_hx_tmp = true;
            					}
HXDLIN( 199)					if (!(_hx_tmp)) {
HXLINE( 203)						bool _hx_tmp5;
HXDLIN( 203)						bool _hx_tmp6;
HXDLIN( 203)						bool _hx_tmp7;
HXDLIN( 203)						bool _hx_tmp8;
HXDLIN( 203)						bool _hx_tmp9;
HXDLIN( 203)						bool _hx_tmp10;
HXDLIN( 203)						bool _hx_tmp11;
HXDLIN( 203)						bool _hx_tmp12;
HXDLIN( 203)						bool _hx_tmp13;
HXDLIN( 203)						if ((name.indexOf(HX_("hxcpp",13,70,49,31),null()) < 0)) {
HXLINE( 203)							_hx_tmp13 = (name == HX_("scriptable",25,1d,70,4e));
            						}
            						else {
HXLINE( 203)							_hx_tmp13 = true;
            						}
HXDLIN( 203)						if (!(_hx_tmp13)) {
HXLINE( 203)							_hx_tmp12 = (name.indexOf(HX_("dll",e4,3f,4c,00),null()) >= 0);
            						}
            						else {
HXLINE( 203)							_hx_tmp12 = true;
            						}
HXDLIN( 203)						if (!(_hx_tmp12)) {
HXLINE( 203)							_hx_tmp11 = (name == HX_("no_console",19,4e,3a,69));
            						}
            						else {
HXLINE( 203)							_hx_tmp11 = true;
            						}
HXDLIN( 203)						if (!(_hx_tmp11)) {
HXLINE( 203)							_hx_tmp10 = (name.substr(0,8) == HX_("android-",1e,2e,63,73));
            						}
            						else {
HXLINE( 203)							_hx_tmp10 = true;
            						}
HXDLIN( 203)						if (!(_hx_tmp10)) {
HXLINE( 203)							_hx_tmp9 = (name.substr(0,4) == HX_("ndkv",61,b7,01,49));
            						}
            						else {
HXLINE( 203)							_hx_tmp9 = true;
            						}
HXDLIN( 203)						if (!(_hx_tmp9)) {
HXLINE( 203)							_hx_tmp8 = (name == HX_("toolchain",a9,1a,50,de));
            						}
            						else {
HXLINE( 203)							_hx_tmp8 = true;
            						}
HXDLIN( 203)						if (!(_hx_tmp8)) {
HXLINE( 203)							_hx_tmp7 = (name == HX_("platform",b3,b2,f9,67));
            						}
            						else {
HXLINE( 203)							_hx_tmp7 = true;
            						}
HXDLIN( 203)						if (!(_hx_tmp7)) {
HXLINE( 203)							_hx_tmp6 = (name == HX_("toolchain_version",42,ac,02,2b));
            						}
            						else {
HXLINE( 203)							_hx_tmp6 = true;
            						}
HXDLIN( 203)						if (!(_hx_tmp6)) {
HXLINE( 203)							_hx_tmp5 = (name == HX_("android_ndk_root",bc,10,b1,f3));
            						}
            						else {
HXLINE( 203)							_hx_tmp5 = true;
            						}
HXDLIN( 203)						if (_hx_tmp5) {
HXLINE( 206)							result->push(def);
            						}
            					}
            				}
            			}
            		}
HXLINE( 209)		return result->join(HX_("\n",0a,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FileGroup_obj,filterOptions,return )

bool FileGroup_obj::checkOptions(::String inObjDir){
            	HX_STACKFRAME(&_hx_pos_362cbdda4c326816_213_checkOptions)
HXLINE( 214)		bool changed = false;
HXLINE( 215)		{
HXLINE( 215)			int _g = 0;
HXDLIN( 215)			::Array< ::String > _g1 = this->mOptions;
HXDLIN( 215)			while((_g < _g1->length)){
HXLINE( 215)				::String option = _g1->__get(_g);
HXDLIN( 215)				_g = (_g + 1);
HXLINE( 217)				if (!(::sys::FileSystem_obj::exists(option))) {
HXLINE( 219)					this->mMissingDepends->push(option);
            				}
            				else {
HXLINE( 223)					::String contents = this->filterOptions(::sys::io::File_obj::getContent(option));
HXLINE( 225)					::String dest = ((inObjDir + HX_("/",2f,00,00,00)) + ::haxe::io::Path_obj::withoutDirectory(option));
HXLINE( 226)					bool skip = false;
HXLINE( 228)					if (::sys::FileSystem_obj::exists(dest)) {
HXLINE( 230)						::String dest_content = this->filterOptions(::sys::io::File_obj::getContent(dest));
HXLINE( 231)						if ((dest_content == contents)) {
HXLINE( 232)							skip = true;
            						}
            					}
HXLINE( 235)					if (!(skip)) {
HXLINE( 237)						::PathManager_obj::mkdir(inObjDir,null());
HXLINE( 238)						 ::sys::io::FileOutput stream = ::sys::io::File_obj::write(dest,true);
HXLINE( 239)						stream->writeString(contents,null());
HXLINE( 240)						stream->close();
HXLINE( 241)						changed = true;
            					}
HXLINE( 243)					this->addDepend(dest,true);
            				}
            			}
            		}
HXLINE( 246)		return changed;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FileGroup_obj,checkOptions,return )

::String FileGroup_obj::getPchDir(::String inObjDir){
            	HX_STACKFRAME(&_hx_pos_362cbdda4c326816_250_getPchDir)
HXLINE( 251)		::String result = ((inObjDir + HX_("/__pch/",09,90,bc,9b)) + this->mId);
HXLINE( 252)		::PathManager_obj::mkdir(result,null());
HXLINE( 253)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FileGroup_obj,getPchDir,return )

::String FileGroup_obj::getPchName(){
            	HX_STACKFRAME(&_hx_pos_362cbdda4c326816_258_getPchName)
HXDLIN( 258)		return ::haxe::io::Path_obj::withoutDirectory(this->mPrecompiledHeader);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FileGroup_obj,getPchName,return )

bool FileGroup_obj::isOutOfDate(Float inStamp){
            	HX_STACKFRAME(&_hx_pos_362cbdda4c326816_263_isOutOfDate)
HXDLIN( 263)		return (inStamp < this->mNewest);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FileGroup_obj,isOutOfDate,return )

bool FileGroup_obj::isCached(){
            	HX_STACKFRAME(&_hx_pos_362cbdda4c326816_266_isCached)
HXDLIN( 266)		if (::CompileCache_obj::hasCache) {
HXDLIN( 266)			return this->mUseCache;
            		}
            		else {
HXDLIN( 266)			return false;
            		}
HXDLIN( 266)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FileGroup_obj,isCached,return )

void FileGroup_obj::preBuild(){
            	HX_STACKFRAME(&_hx_pos_362cbdda4c326816_269_preBuild)
HXLINE( 270)		{
HXLINE( 270)			int _g = 0;
HXDLIN( 270)			::Array< ::Dynamic> _g1 = this->mHLSLs;
HXDLIN( 270)			while((_g < _g1->length)){
HXLINE( 270)				 ::HLSL hlsl = _g1->__get(_g).StaticCast<  ::HLSL >();
HXDLIN( 270)				_g = (_g + 1);
HXLINE( 271)				hlsl->build();
            			}
            		}
HXLINE( 273)		bool _hx_tmp;
HXDLIN( 273)		if (::CompileCache_obj::hasCache) {
HXLINE( 273)			_hx_tmp = this->mUseCache;
            		}
            		else {
HXLINE( 273)			_hx_tmp = false;
            		}
HXDLIN( 273)		if (_hx_tmp) {
HXLINE( 275)			this->mDependHash = HX_("",00,00,00,00);
HXLINE( 276)			{
HXLINE( 276)				int _g2 = 0;
HXDLIN( 276)				::Array< ::String > _g3 = this->mCacheDepends;
HXDLIN( 276)				while((_g2 < _g3->length)){
HXLINE( 276)					::String depend = _g3->__get(_g2);
HXDLIN( 276)					_g2 = (_g2 + 1);
HXLINE( 277)					 ::FileGroup _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 277)					::String _hx_tmp2 = _hx_tmp1->mDependHash;
HXDLIN( 277)					_hx_tmp1->mDependHash = (_hx_tmp2 + ::File_obj::getFileHash(depend,null()));
            				}
            			}
HXLINE( 278)			this->mDependHash = ::haxe::crypto::Md5_obj::encode(this->mDependHash);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FileGroup_obj,preBuild,(void))

::String FileGroup_obj::getDependString(){
            	HX_STACKFRAME(&_hx_pos_362cbdda4c326816_284_getDependString)
HXDLIN( 284)		return ((HX_("Group(",29,98,bc,50) + this->mCacheDepends->join(HX_(",",2c,00,00,00))) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FileGroup_obj,getDependString,return )

void FileGroup_obj::setPrecompiled(::String inFile,::String inDir){
            	HX_STACKFRAME(&_hx_pos_362cbdda4c326816_288_setPrecompiled)
HXLINE( 289)		this->mPrecompiledHeader = inFile;
HXLINE( 290)		this->mPrecompiledHeaderDir = inDir;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FileGroup_obj,setPrecompiled,(void))


::hx::ObjectPtr< FileGroup_obj > FileGroup_obj::__new(::String inDir,::String inId,::hx::Null< bool >  __o_inSetImportDir) {
	::hx::ObjectPtr< FileGroup_obj > __this = new FileGroup_obj();
	__this->__construct(inDir,inId,__o_inSetImportDir);
	return __this;
}

::hx::ObjectPtr< FileGroup_obj > FileGroup_obj::__alloc(::hx::Ctx *_hx_ctx,::String inDir,::String inId,::hx::Null< bool >  __o_inSetImportDir) {
	FileGroup_obj *__this = (FileGroup_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FileGroup_obj), true, "FileGroup"));
	*(void **)__this = FileGroup_obj::_hx_vtable;
	__this->__construct(inDir,inId,__o_inSetImportDir);
	return __this;
}

FileGroup_obj::FileGroup_obj()
{
}

void FileGroup_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FileGroup);
	HX_MARK_MEMBER_NAME(mNewest,"mNewest");
	HX_MARK_MEMBER_NAME(mNewestFile,"mNewestFile");
	HX_MARK_MEMBER_NAME(mCompilerFlags,"mCompilerFlags");
	HX_MARK_MEMBER_NAME(mMissingDepends,"mMissingDepends");
	HX_MARK_MEMBER_NAME(mOptions,"mOptions");
	HX_MARK_MEMBER_NAME(mPrecompiledHeader,"mPrecompiledHeader");
	HX_MARK_MEMBER_NAME(mPrecompiledHeaderDir,"mPrecompiledHeaderDir");
	HX_MARK_MEMBER_NAME(mFiles,"mFiles");
	HX_MARK_MEMBER_NAME(mHLSLs,"mHLSLs");
	HX_MARK_MEMBER_NAME(mDir,"mDir");
	HX_MARK_MEMBER_NAME(mId,"mId");
	HX_MARK_MEMBER_NAME(mConfig,"mConfig");
	HX_MARK_MEMBER_NAME(mCacheDepends,"mCacheDepends");
	HX_MARK_MEMBER_NAME(mDependHash,"mDependHash");
	HX_MARK_MEMBER_NAME(mAsLibrary,"mAsLibrary");
	HX_MARK_MEMBER_NAME(mAddTwice,"mAddTwice");
	HX_MARK_MEMBER_NAME(mSetImportDir,"mSetImportDir");
	HX_MARK_MEMBER_NAME(mUseCache,"mUseCache");
	HX_MARK_MEMBER_NAME(mRespectTimestamp,"mRespectTimestamp");
	HX_MARK_MEMBER_NAME(mCacheProject,"mCacheProject");
	HX_MARK_MEMBER_NAME(mTags,"mTags");
	HX_MARK_MEMBER_NAME(mNvcc,"mNvcc");
	HX_MARK_MEMBER_NAME(mObjPrefix,"mObjPrefix");
	HX_MARK_END_CLASS();
}

void FileGroup_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mNewest,"mNewest");
	HX_VISIT_MEMBER_NAME(mNewestFile,"mNewestFile");
	HX_VISIT_MEMBER_NAME(mCompilerFlags,"mCompilerFlags");
	HX_VISIT_MEMBER_NAME(mMissingDepends,"mMissingDepends");
	HX_VISIT_MEMBER_NAME(mOptions,"mOptions");
	HX_VISIT_MEMBER_NAME(mPrecompiledHeader,"mPrecompiledHeader");
	HX_VISIT_MEMBER_NAME(mPrecompiledHeaderDir,"mPrecompiledHeaderDir");
	HX_VISIT_MEMBER_NAME(mFiles,"mFiles");
	HX_VISIT_MEMBER_NAME(mHLSLs,"mHLSLs");
	HX_VISIT_MEMBER_NAME(mDir,"mDir");
	HX_VISIT_MEMBER_NAME(mId,"mId");
	HX_VISIT_MEMBER_NAME(mConfig,"mConfig");
	HX_VISIT_MEMBER_NAME(mCacheDepends,"mCacheDepends");
	HX_VISIT_MEMBER_NAME(mDependHash,"mDependHash");
	HX_VISIT_MEMBER_NAME(mAsLibrary,"mAsLibrary");
	HX_VISIT_MEMBER_NAME(mAddTwice,"mAddTwice");
	HX_VISIT_MEMBER_NAME(mSetImportDir,"mSetImportDir");
	HX_VISIT_MEMBER_NAME(mUseCache,"mUseCache");
	HX_VISIT_MEMBER_NAME(mRespectTimestamp,"mRespectTimestamp");
	HX_VISIT_MEMBER_NAME(mCacheProject,"mCacheProject");
	HX_VISIT_MEMBER_NAME(mTags,"mTags");
	HX_VISIT_MEMBER_NAME(mNvcc,"mNvcc");
	HX_VISIT_MEMBER_NAME(mObjPrefix,"mObjPrefix");
}

::hx::Val FileGroup_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"mId") ) { return ::hx::Val( mId ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mDir") ) { return ::hx::Val( mDir ); }
		if (HX_FIELD_EQ(inName,"find") ) { return ::hx::Val( find_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mTags") ) { return ::hx::Val( mTags ); }
		if (HX_FIELD_EQ(inName,"mNvcc") ) { return ::hx::Val( mNvcc ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"mFiles") ) { return ::hx::Val( mFiles ); }
		if (HX_FIELD_EQ(inName,"mHLSLs") ) { return ::hx::Val( mHLSLs ); }
		if (HX_FIELD_EQ(inName,"filter") ) { return ::hx::Val( filter_dyn() ); }
		if (HX_FIELD_EQ(inName,"addTag") ) { return ::hx::Val( addTag_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mNewest") ) { return ::hx::Val( mNewest ); }
		if (HX_FIELD_EQ(inName,"mConfig") ) { return ::hx::Val( mConfig ); }
		if (HX_FIELD_EQ(inName,"replace") ) { return ::hx::Val( replace_dyn() ); }
		if (HX_FIELD_EQ(inName,"addFile") ) { return ::hx::Val( addFile_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTags") ) { return ::hx::Val( getTags_dyn() ); }
		if (HX_FIELD_EQ(inName,"addHLSL") ) { return ::hx::Val( addHLSL_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mOptions") ) { return ::hx::Val( mOptions ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		if (HX_FIELD_EQ(inName,"hasFiles") ) { return ::hx::Val( hasFiles_dyn() ); }
		if (HX_FIELD_EQ(inName,"isCached") ) { return ::hx::Val( isCached_dyn() ); }
		if (HX_FIELD_EQ(inName,"preBuild") ) { return ::hx::Val( preBuild_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mAddTwice") ) { return ::hx::Val( mAddTwice ); }
		if (HX_FIELD_EQ(inName,"mUseCache") ) { return ::hx::Val( mUseCache ); }
		if (HX_FIELD_EQ(inName,"addDepend") ) { return ::hx::Val( addDepend_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPchDir") ) { return ::hx::Val( getPchDir_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"mAsLibrary") ) { return ::hx::Val( mAsLibrary ); }
		if (HX_FIELD_EQ(inName,"mObjPrefix") ) { return ::hx::Val( mObjPrefix ); }
		if (HX_FIELD_EQ(inName,"addOptions") ) { return ::hx::Val( addOptions_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPchName") ) { return ::hx::Val( getPchName_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mNewestFile") ) { return ::hx::Val( mNewestFile ); }
		if (HX_FIELD_EQ(inName,"mDependHash") ) { return ::hx::Val( mDependHash ); }
		if (HX_FIELD_EQ(inName,"isOutOfDate") ) { return ::hx::Val( isOutOfDate_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"checkOptions") ) { return ::hx::Val( checkOptions_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mCacheDepends") ) { return ::hx::Val( mCacheDepends ); }
		if (HX_FIELD_EQ(inName,"mSetImportDir") ) { return ::hx::Val( mSetImportDir ); }
		if (HX_FIELD_EQ(inName,"mCacheProject") ) { return ::hx::Val( mCacheProject ); }
		if (HX_FIELD_EQ(inName,"isPrecompiled") ) { return ::hx::Val( isPrecompiled_dyn() ); }
		if (HX_FIELD_EQ(inName,"getNewestFile") ) { return ::hx::Val( getNewestFile_dyn() ); }
		if (HX_FIELD_EQ(inName,"filterOptions") ) { return ::hx::Val( filterOptions_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"mCompilerFlags") ) { return ::hx::Val( mCompilerFlags ); }
		if (HX_FIELD_EQ(inName,"dontPrecompile") ) { return ::hx::Val( dontPrecompile_dyn() ); }
		if (HX_FIELD_EQ(inName,"addDependFiles") ) { return ::hx::Val( addDependFiles_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPrecompiled") ) { return ::hx::Val( setPrecompiled_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"mMissingDepends") ) { return ::hx::Val( mMissingDepends ); }
		if (HX_FIELD_EQ(inName,"addCompilerFlag") ) { return ::hx::Val( addCompilerFlag_dyn() ); }
		if (HX_FIELD_EQ(inName,"getCacheProject") ) { return ::hx::Val( getCacheProject_dyn() ); }
		if (HX_FIELD_EQ(inName,"getDependString") ) { return ::hx::Val( getDependString_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"mRespectTimestamp") ) { return ::hx::Val( mRespectTimestamp ); }
		if (HX_FIELD_EQ(inName,"checkDependsExist") ) { return ::hx::Val( checkDependsExist_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"mPrecompiledHeader") ) { return ::hx::Val( mPrecompiledHeader ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"mPrecompiledHeaderDir") ) { return ::hx::Val( mPrecompiledHeaderDir ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FileGroup_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"mId") ) { mId=inValue.Cast< ::String >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mDir") ) { mDir=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mTags") ) { mTags=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mNvcc") ) { mNvcc=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"mFiles") ) { mFiles=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mHLSLs") ) { mHLSLs=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mNewest") ) { mNewest=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mConfig") ) { mConfig=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mOptions") ) { mOptions=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mAddTwice") ) { mAddTwice=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mUseCache") ) { mUseCache=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"mAsLibrary") ) { mAsLibrary=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mObjPrefix") ) { mObjPrefix=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mNewestFile") ) { mNewestFile=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mDependHash") ) { mDependHash=inValue.Cast< ::String >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mCacheDepends") ) { mCacheDepends=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mSetImportDir") ) { mSetImportDir=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mCacheProject") ) { mCacheProject=inValue.Cast< ::String >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"mCompilerFlags") ) { mCompilerFlags=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"mMissingDepends") ) { mMissingDepends=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"mRespectTimestamp") ) { mRespectTimestamp=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"mPrecompiledHeader") ) { mPrecompiledHeader=inValue.Cast< ::String >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"mPrecompiledHeaderDir") ) { mPrecompiledHeaderDir=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FileGroup_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("mNewest",33,b8,e7,5a));
	outFields->push(HX_("mNewestFile",4f,48,28,a1));
	outFields->push(HX_("mCompilerFlags",7b,ca,22,df));
	outFields->push(HX_("mMissingDepends",0e,84,69,b9));
	outFields->push(HX_("mOptions",71,f2,c9,07));
	outFields->push(HX_("mPrecompiledHeader",34,4c,06,00));
	outFields->push(HX_("mPrecompiledHeaderDir",79,41,84,a6));
	outFields->push(HX_("mFiles",ca,a2,ac,28));
	outFields->push(HX_("mHLSLs",a9,8d,3b,3c));
	outFields->push(HX_("mDir",e0,36,40,48));
	outFields->push(HX_("mId",a8,f5,52,00));
	outFields->push(HX_("mConfig",0f,5b,0a,b1));
	outFields->push(HX_("mCacheDepends",72,1f,d2,89));
	outFields->push(HX_("mDependHash",27,c6,f8,58));
	outFields->push(HX_("mAsLibrary",fc,45,6b,2d));
	outFields->push(HX_("mAddTwice",54,49,4c,3d));
	outFields->push(HX_("mSetImportDir",f3,fc,65,02));
	outFields->push(HX_("mUseCache",08,6e,fb,b2));
	outFields->push(HX_("mRespectTimestamp",3d,b9,80,7e));
	outFields->push(HX_("mCacheProject",c4,08,58,1f));
	outFields->push(HX_("mTags",e6,1b,7d,fa));
	outFields->push(HX_("mNvcc",f5,bf,95,f6));
	outFields->push(HX_("mObjPrefix",bc,9a,b2,f8));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FileGroup_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(FileGroup_obj,mNewest),HX_("mNewest",33,b8,e7,5a)},
	{::hx::fsString,(int)offsetof(FileGroup_obj,mNewestFile),HX_("mNewestFile",4f,48,28,a1)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(FileGroup_obj,mCompilerFlags),HX_("mCompilerFlags",7b,ca,22,df)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(FileGroup_obj,mMissingDepends),HX_("mMissingDepends",0e,84,69,b9)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(FileGroup_obj,mOptions),HX_("mOptions",71,f2,c9,07)},
	{::hx::fsString,(int)offsetof(FileGroup_obj,mPrecompiledHeader),HX_("mPrecompiledHeader",34,4c,06,00)},
	{::hx::fsString,(int)offsetof(FileGroup_obj,mPrecompiledHeaderDir),HX_("mPrecompiledHeaderDir",79,41,84,a6)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(FileGroup_obj,mFiles),HX_("mFiles",ca,a2,ac,28)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FileGroup_obj,mHLSLs),HX_("mHLSLs",a9,8d,3b,3c)},
	{::hx::fsString,(int)offsetof(FileGroup_obj,mDir),HX_("mDir",e0,36,40,48)},
	{::hx::fsString,(int)offsetof(FileGroup_obj,mId),HX_("mId",a8,f5,52,00)},
	{::hx::fsString,(int)offsetof(FileGroup_obj,mConfig),HX_("mConfig",0f,5b,0a,b1)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(FileGroup_obj,mCacheDepends),HX_("mCacheDepends",72,1f,d2,89)},
	{::hx::fsString,(int)offsetof(FileGroup_obj,mDependHash),HX_("mDependHash",27,c6,f8,58)},
	{::hx::fsBool,(int)offsetof(FileGroup_obj,mAsLibrary),HX_("mAsLibrary",fc,45,6b,2d)},
	{::hx::fsBool,(int)offsetof(FileGroup_obj,mAddTwice),HX_("mAddTwice",54,49,4c,3d)},
	{::hx::fsBool,(int)offsetof(FileGroup_obj,mSetImportDir),HX_("mSetImportDir",f3,fc,65,02)},
	{::hx::fsBool,(int)offsetof(FileGroup_obj,mUseCache),HX_("mUseCache",08,6e,fb,b2)},
	{::hx::fsBool,(int)offsetof(FileGroup_obj,mRespectTimestamp),HX_("mRespectTimestamp",3d,b9,80,7e)},
	{::hx::fsString,(int)offsetof(FileGroup_obj,mCacheProject),HX_("mCacheProject",c4,08,58,1f)},
	{::hx::fsString,(int)offsetof(FileGroup_obj,mTags),HX_("mTags",e6,1b,7d,fa)},
	{::hx::fsBool,(int)offsetof(FileGroup_obj,mNvcc),HX_("mNvcc",f5,bf,95,f6)},
	{::hx::fsString,(int)offsetof(FileGroup_obj,mObjPrefix),HX_("mObjPrefix",bc,9a,b2,f8)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FileGroup_obj_sStaticStorageInfo = 0;
#endif

static ::String FileGroup_obj_sMemberFields[] = {
	HX_("mNewest",33,b8,e7,5a),
	HX_("mNewestFile",4f,48,28,a1),
	HX_("mCompilerFlags",7b,ca,22,df),
	HX_("mMissingDepends",0e,84,69,b9),
	HX_("mOptions",71,f2,c9,07),
	HX_("mPrecompiledHeader",34,4c,06,00),
	HX_("mPrecompiledHeaderDir",79,41,84,a6),
	HX_("mFiles",ca,a2,ac,28),
	HX_("mHLSLs",a9,8d,3b,3c),
	HX_("mDir",e0,36,40,48),
	HX_("mId",a8,f5,52,00),
	HX_("mConfig",0f,5b,0a,b1),
	HX_("mCacheDepends",72,1f,d2,89),
	HX_("mDependHash",27,c6,f8,58),
	HX_("mAsLibrary",fc,45,6b,2d),
	HX_("mAddTwice",54,49,4c,3d),
	HX_("mSetImportDir",f3,fc,65,02),
	HX_("mUseCache",08,6e,fb,b2),
	HX_("mRespectTimestamp",3d,b9,80,7e),
	HX_("mCacheProject",c4,08,58,1f),
	HX_("mTags",e6,1b,7d,fa),
	HX_("mNvcc",f5,bf,95,f6),
	HX_("mObjPrefix",bc,9a,b2,f8),
	HX_("toString",ac,d0,6e,38),
	HX_("replace",34,48,28,ab),
	HX_("find",39,d0,bb,43),
	HX_("addFile",3d,11,f9,7f),
	HX_("hasFiles",bd,28,f1,8c),
	HX_("filter",b8,1f,35,85),
	HX_("getTags",8f,64,79,1f),
	HX_("addTag",b9,6a,09,9f),
	HX_("isPrecompiled",ea,aa,ac,c2),
	HX_("dontPrecompile",a1,13,51,0a),
	HX_("addCompilerFlag",ac,fe,29,32),
	HX_("getCacheProject",6d,a2,3a,c7),
	HX_("addDepend",6d,ca,a1,25),
	HX_("getNewestFile",b8,f5,35,28),
	HX_("addDependFiles",ca,98,4e,12),
	HX_("addHLSL",3e,67,35,81),
	HX_("addOptions",3d,5f,88,47),
	HX_("checkDependsExist",98,90,6a,47),
	HX_("filterOptions",86,22,ce,a0),
	HX_("checkOptions",76,eb,84,cd),
	HX_("getPchDir",6e,86,ec,89),
	HX_("getPchName",0a,26,9f,2b),
	HX_("isOutOfDate",c9,64,42,cf),
	HX_("isCached",6c,fb,5b,09),
	HX_("preBuild",0b,8c,c4,3a),
	HX_("getDependString",13,61,18,1b),
	HX_("setPrecompiled",32,96,46,61),
	::String(null()) };

::hx::Class FileGroup_obj::__mClass;

void FileGroup_obj::__register()
{
	FileGroup_obj _hx_dummy;
	FileGroup_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("FileGroup",03,33,ef,3d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FileGroup_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FileGroup_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FileGroup_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FileGroup_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

