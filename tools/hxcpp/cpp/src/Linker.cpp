// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_BuildTool
#include <BuildTool.h>
#endif
#ifndef INCLUDED_Compiler
#include <Compiler.h>
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Linker
#include <Linker.h>
#endif
#ifndef INCLUDED_Log
#include <Log.h>
#endif
#ifndef INCLUDED_PathManager
#include <PathManager.h>
#endif
#ifndef INCLUDED_ProcessManager
#include <ProcessManager.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_Target
#include <Target.h>
#endif
#ifndef INCLUDED_Tools
#include <Tools.h>
#endif
#ifndef INCLUDED_haxe_crypto_Md5
#include <haxe/crypto/Md5.h>
#endif
#ifndef INCLUDED_haxe_io_Encoding
#include <haxe/io/Encoding.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_sys_io_FileOutput
#include <sys/io/FileOutput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_17e9dd0279ecc17d_25_new,"Linker","new",0xb4ba8779,"Linker.new","Linker.hx",25,0x2ebaca17)
HX_LOCAL_STACK_FRAME(_hx_pos_17e9dd0279ecc17d_42_isOutOfDate,"Linker","isOutOfDate",0x854b5ce2,"Linker.isOutOfDate","Linker.hx",42,0x2ebaca17)
HX_LOCAL_STACK_FRAME(_hx_pos_17e9dd0279ecc17d_61_getSimpleFilename,"Linker","getSimpleFilename",0x5284b128,"Linker.getSimpleFilename","Linker.hx",61,0x2ebaca17)
HX_LOCAL_STACK_FRAME(_hx_pos_17e9dd0279ecc17d_71_getUnstrippedFilename,"Linker","getUnstrippedFilename",0xacd4eec6,"Linker.getUnstrippedFilename","Linker.hx",71,0x2ebaca17)
HX_LOCAL_STACK_FRAME(_hx_pos_17e9dd0279ecc17d_81_link,"Linker","link",0x6d2c96c1,"Linker.link","Linker.hx",81,0x2ebaca17)

void Linker_obj::__construct(::String inExe){
            	HX_STACKFRAME(&_hx_pos_17e9dd0279ecc17d_25_new)
HXLINE(  26)		this->mFlags = ::Array_obj< ::String >::__new(0);
HXLINE(  27)		this->mOutFlag = HX_("-o",a2,27,00,00);
HXLINE(  28)		this->mAddLibPath = HX_("-L",7f,27,00,00);
HXLINE(  29)		this->mExe = inExe;
HXLINE(  30)		this->mNamePrefix = HX_("",00,00,00,00);
HXLINE(  31)		this->mLibDir = HX_("",00,00,00,00);
HXLINE(  32)		this->mRanLib = HX_("",00,00,00,00);
HXLINE(  33)		this->mExpandArchives = false;
HXLINE(  35)		this->mFromFile = HX_("@",40,00,00,00);
HXLINE(  36)		this->mFromFileNeedsQuotes = true;
HXLINE(  37)		this->mLibs = ::Array_obj< ::String >::__new(0);
HXLINE(  38)		this->mRecreate = false;
            	}

Dynamic Linker_obj::__CreateEmpty() { return new Linker_obj; }

void *Linker_obj::_hx_vtable = 0;

Dynamic Linker_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Linker_obj > _hx_result = new Linker_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Linker_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4f1e228f;
}

bool Linker_obj::isOutOfDate(::String inName,::Array< ::String > inObjs){
            	HX_STACKFRAME(&_hx_pos_17e9dd0279ecc17d_42_isOutOfDate)
HXLINE(  43)		if (!(::sys::FileSystem_obj::exists(inName))) {
HXLINE(  44)			return true;
            		}
HXLINE(  45)		Float stamp = ( ( ::Date)(::sys::FileSystem_obj::stat(inName)->__Field(HX_("mtime",fa,06,aa,0f),::hx::paccDynamic)) )->getTime();
HXLINE(  46)		{
HXLINE(  46)			int _g = 0;
HXDLIN(  46)			while((_g < inObjs->length)){
HXLINE(  46)				::String obj = inObjs->__get(_g);
HXDLIN(  46)				_g = (_g + 1);
HXLINE(  48)				if (!(::sys::FileSystem_obj::exists(obj))) {
HXLINE(  50)					::Log_obj::error(((((HX_("Could not find \"",c7,12,67,a6) + obj) + HX_("\" required by \"",7c,1f,a2,f2)) + inName) + HX_("\"",22,00,00,00)),null(),null(),null());
            				}
HXLINE(  53)				Float obj_stamp = ( ( ::Date)(::sys::FileSystem_obj::stat(obj)->__Field(HX_("mtime",fa,06,aa,0f),::hx::paccDynamic)) )->getTime();
HXLINE(  54)				if ((obj_stamp > stamp)) {
HXLINE(  55)					return true;
            				}
            			}
            		}
HXLINE(  57)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Linker_obj,isOutOfDate,return )

::String Linker_obj::getSimpleFilename( ::Target inTarget){
            	HX_STACKFRAME(&_hx_pos_17e9dd0279ecc17d_61_getSimpleFilename)
HXLINE(  62)		::String ext = inTarget->getExt(this->mExt);
HXLINE(  64)		int idx = ext.indexOf(HX_(".",2e,00,00,00),null());
HXLINE(  65)		if ((idx > 0)) {
HXLINE(  66)			ext = ext.substr(idx,null());
            		}
HXLINE(  68)		return ((this->mNamePrefix + inTarget->mOutput) + ext);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Linker_obj,getSimpleFilename,return )

::String Linker_obj::getUnstrippedFilename(::String inObjDir, ::Target inTarget){
            	HX_STACKFRAME(&_hx_pos_17e9dd0279ecc17d_71_getUnstrippedFilename)
HXLINE(  72)		if (::hx::IsNotNull( inTarget->mFullUnstrippedName )) {
HXLINE(  74)			::PathManager_obj::mkdir(inTarget->mFullUnstrippedName,true);
HXLINE(  75)			return inTarget->mFullUnstrippedName;
            		}
HXLINE(  77)		return ((inObjDir + HX_("/",2f,00,00,00)) + this->getSimpleFilename(inTarget));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Linker_obj,getUnstrippedFilename,return )

::String Linker_obj::link( ::Target inTarget,::Array< ::String > inObjs, ::Compiler inCompiler,::Array< ::String > extraDeps){
            	HX_GC_STACKFRAME(&_hx_pos_17e9dd0279ecc17d_81_link)
HXLINE(  82)		::String ext = inTarget->getExt(this->mExt);
HXLINE(  83)		::String file_name = ((this->mNamePrefix + inTarget->mOutput) + ext);
HXLINE(  85)		::String tmpDir = inCompiler->mObjDir;
HXLINE(  87)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  89)			::PathManager_obj::mkdir(inTarget->mOutputDir,null());
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(  91)				{
HXLINE(  91)					null();
            				}
HXLINE(  93)				::Log_obj::error(((HX_("Unable to create output directory \"",7c,d3,2b,f1) + inTarget->mOutputDir) + HX_("\"",22,00,00,00)),null(),null(),null());
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(  97)		::String out_name = ::haxe::io::Path_obj::normalize(::PathManager_obj::combine(inTarget->mBuildDir,(inTarget->mOutputDir + file_name)));
HXLINE(  98)		::String hashFile = (out_name + HX_(".hash",fc,de,76,c1));
HXLINE(  99)		if (::hx::IsNotNull( inTarget->mFullOutputName )) {
HXLINE( 101)			::PathManager_obj::mkdir(inTarget->mFullOutputName,true);
HXLINE( 102)			out_name = inTarget->mFullOutputName;
            		}
HXLINE( 105)		this->mLastOutName = out_name;
HXLINE( 108)		::String lastLib = HX_("",00,00,00,00);
HXLINE( 109)		::Array< ::String > libs = ::Array_obj< ::String >::__new();
HXLINE( 110)		{
HXLINE( 110)			int _g1 = 0;
HXDLIN( 110)			::Array< ::String > _g2 = inTarget->mAutoLibs;
HXDLIN( 110)			while((_g1 < _g2->length)){
HXLINE( 110)				::String l = _g2->__get(_g1);
HXDLIN( 110)				_g1 = (_g1 + 1);
HXLINE( 111)				if ((l != lastLib)) {
HXLINE( 113)					libs->push(l);
HXLINE( 114)					lastLib = l;
            				}
            			}
            		}
HXLINE( 117)		{
HXLINE( 117)			int _g3 = 0;
HXDLIN( 117)			::Array< ::String > _g4 = inTarget->mLibs;
HXDLIN( 117)			while((_g3 < _g4->length)){
HXLINE( 117)				::String l1 = _g4->__get(_g3);
HXDLIN( 117)				_g3 = (_g3 + 1);
HXLINE( 118)				if ((l1 != lastLib)) {
HXLINE( 120)					libs->push(l1);
HXLINE( 121)					lastLib = l1;
            				}
            			}
            		}
HXLINE( 124)		{
HXLINE( 124)			int _g5 = 0;
HXDLIN( 124)			::Array< ::String > _g6 = this->mLibs;
HXDLIN( 124)			while((_g5 < _g6->length)){
HXLINE( 124)				::String l2 = _g6->__get(_g5);
HXDLIN( 124)				_g5 = (_g5 + 1);
HXLINE( 125)				if ((l2 != lastLib)) {
HXLINE( 127)					libs->push(l2);
HXLINE( 128)					lastLib = l2;
            				}
            			}
            		}
HXLINE( 131)		bool v18Added = false;
HXLINE( 132)		bool isOutOfDateLibs = false;
HXLINE( 134)		::String md5 = ::haxe::crypto::Md5_obj::encode(inObjs->join(HX_(";",3b,00,00,00)));
HXLINE( 135)		bool _hx_tmp;
HXDLIN( 135)		if (::sys::FileSystem_obj::exists(hashFile)) {
HXLINE( 135)			_hx_tmp = (::sys::io::File_obj::getContent(hashFile) != md5);
            		}
            		else {
HXLINE( 135)			_hx_tmp = true;
            		}
HXDLIN( 135)		if (_hx_tmp) {
HXLINE( 136)			isOutOfDateLibs = true;
            		}
HXLINE( 138)		{
HXLINE( 138)			int _g7 = 0;
HXDLIN( 138)			int _g8 = libs->length;
HXDLIN( 138)			while((_g7 < _g8)){
HXLINE( 138)				_g7 = (_g7 + 1);
HXDLIN( 138)				int i = (_g7 - 1);
HXLINE( 140)				::String lib = libs->__get(i);
HXLINE( 141)				::Array< ::String > parts = lib.split(HX_("{MSVC_VER}",eb,57,fc,0f));
HXLINE( 142)				if ((parts->length == 2)) {
HXLINE( 144)					::String ver = HX_("",00,00,00,00);
HXLINE( 145)					if (::BuildTool_obj::isMsvc()) {
HXLINE( 147)						::String current = (parts->__get(0) + HX_("-",2d,00,00,00));
HXDLIN( 147)						::String current1 = (current + ::BuildTool_obj::getMsvcVer());
HXDLIN( 147)						::String current2 = (current1 + parts->__get(1));
HXLINE( 148)						if (::sys::FileSystem_obj::exists(current2)) {
HXLINE( 150)							::Log_obj::info(HX_("",00,00,00,00),(HX_(" - \x1b""[1mUsing current compiler library:\x1b""[0m ",d5,5b,86,22) + current2));
HXLINE( 151)							libs[i] = current2;
            						}
            						else {
HXLINE( 155)							::String v18 = ((parts->__get(0) + HX_("-18",54,50,22,00)) + parts->__get(1));
HXLINE( 156)							if (::sys::FileSystem_obj::exists(v18)) {
HXLINE( 158)								::Log_obj::info(HX_("",00,00,00,00),(HX_(" - \x1b""[1mUsing MSVC18 compatible library:\x1b""[0m ",33,4a,6a,7a) + v18));
HXLINE( 159)								libs[i] = v18;
HXLINE( 160)								if (!(v18Added)) {
HXLINE( 162)									v18Added = true;
HXLINE( 163)									libs->push((::BuildTool_obj::HXCPP + HX_("/lib/Windows/libmsvccompat-18.lib",b6,40,18,f9)));
            								}
            							}
            							else {
HXLINE( 168)								::Log_obj::error(((((HX_("Could not find compatible library for ",ed,e2,cb,3e) + lib) + HX_(", ",74,26,00,00)) + v18) + HX_(" does not exist",e3,95,38,52)),null(),null(),null());
            							}
            						}
            					}
            					else {
HXLINE( 173)						libs[i] = (parts->__get(0) + parts->__get(1));
            					}
            				}
HXLINE( 176)				if (!(isOutOfDateLibs)) {
HXLINE( 178)					::String lib1 = libs->__get(i);
HXLINE( 179)					if (::sys::FileSystem_obj::exists(lib1)) {
HXLINE( 180)						isOutOfDateLibs = this->isOutOfDate(out_name,::Array_obj< ::String >::__new(1)->init(0,lib1));
            					}
            				}
HXLINE( 183)				if (::BuildTool_obj::isMingw()) {
HXLINE( 185)					 ::EReg libMatch =  ::EReg_obj::__alloc( HX_CTX ,HX_("^([a-zA-Z0-9_]+).lib$",66,eb,5d,83),HX_("",00,00,00,00));
HXLINE( 186)					if (libMatch->match(libs->__get(i))) {
HXLINE( 187)						libs[i] = (HX_("-l",9f,27,00,00) + libMatch->matched(1));
            					}
            				}
            			}
            		}
HXLINE( 192)		bool _hx_tmp1;
HXDLIN( 192)		bool _hx_tmp2;
HXDLIN( 192)		bool _hx_tmp3;
HXDLIN( 192)		if (!(isOutOfDateLibs)) {
HXLINE( 192)			_hx_tmp3 = this->isOutOfDate(out_name,inObjs);
            		}
            		else {
HXLINE( 192)			_hx_tmp3 = true;
            		}
HXDLIN( 192)		if (!(_hx_tmp3)) {
HXLINE( 192)			_hx_tmp2 = this->isOutOfDate(out_name,inTarget->mDepends);
            		}
            		else {
HXLINE( 192)			_hx_tmp2 = true;
            		}
HXDLIN( 192)		if (!(_hx_tmp2)) {
HXLINE( 192)			_hx_tmp1 = this->isOutOfDate(out_name,extraDeps);
            		}
            		else {
HXLINE( 192)			_hx_tmp1 = true;
            		}
HXDLIN( 192)		if (_hx_tmp1) {
HXLINE( 194)			::Array< ::String > args = ::Array_obj< ::String >::__new();
HXLINE( 195)			::String out = this->mOutFlag;
HXLINE( 196)			if ((out.substr(-1,null()) == HX_(" ",20,00,00,00))) {
HXLINE( 198)				args->push(out.substr(0,(out.length - 1)));
HXLINE( 199)				out = HX_("",00,00,00,00);
            			}
HXLINE( 203)			if ((this->mLibDir != HX_("",00,00,00,00))) {
HXLINE( 205)				::PathManager_obj::mkdir(this->mLibDir,null());
HXLINE( 206)				args->push((((out + this->mLibDir) + HX_("/",2f,00,00,00)) + file_name));
            			}
            			else {
HXLINE( 210)				bool _hx_tmp4;
HXDLIN( 210)				if (this->mRecreate) {
HXLINE( 210)					_hx_tmp4 = ::sys::FileSystem_obj::exists(out_name);
            				}
            				else {
HXLINE( 210)					_hx_tmp4 = false;
            				}
HXDLIN( 210)				if (_hx_tmp4) {
HXLINE( 212)					::Log_obj::info((HX_("\x1b""[1mClean: \x1b""[0m",70,fc,58,8f) + out_name),null());
HXLINE( 213)					::sys::FileSystem_obj::deleteFile(out_name);
            				}
HXLINE( 215)				args->push((out + out_name));
            			}
HXLINE( 218)			args = args->concat(this->mFlags)->concat(inTarget->mFlags);
HXLINE( 220)			::Array< ::String > objs = inObjs->copy();
HXLINE( 222)			if (this->mExpandArchives) {
HXLINE( 224)				 ::EReg isArchive =  ::EReg_obj::__alloc( HX_CTX ,HX_("\\.a$",75,dd,f2,3c),HX_("",00,00,00,00));
HXLINE( 225)				::Array< ::String > libArgs = ::Array_obj< ::String >::__new();
HXLINE( 226)				{
HXLINE( 226)					int _g9 = 0;
HXDLIN( 226)					while((_g9 < libs->length)){
HXLINE( 226)						::String lib2 = libs->__get(_g9);
HXDLIN( 226)						_g9 = (_g9 + 1);
HXLINE( 228)						if (isArchive->match(lib2)) {
HXLINE( 230)							::String libName = ::haxe::io::Path_obj::withoutDirectory(lib2);
HXLINE( 231)							::Array< ::String > libObjs = ::ProcessManager_obj::readStdout(this->mExe,::Array_obj< ::String >::__new(2)->init(0,HX_("t",74,00,00,00))->init(1,lib2));
HXLINE( 232)							::String objDir = (((tmpDir + HX_("/",2f,00,00,00)) + libName) + HX_(".unpack",60,34,02,e1));
HXLINE( 233)							::PathManager_obj::mkdir(objDir,null());
HXLINE( 234)							::ProcessManager_obj::runCommand(objDir,this->mExe,::Array_obj< ::String >::__new(2)->init(0,HX_("x",78,00,00,00))->init(1,lib2),true,true,false,(HX_(" - Unpack : ",61,22,aa,c7) + lib2));
HXLINE( 235)							{
HXLINE( 235)								int _g10 = 0;
HXDLIN( 235)								while((_g10 < libObjs->length)){
HXLINE( 235)									::String obj = libObjs->__get(_g10);
HXDLIN( 235)									_g10 = (_g10 + 1);
HXLINE( 236)									objs->push(((objDir + HX_("/",2f,00,00,00)) + obj));
            								}
            							}
            						}
            						else {
HXLINE( 239)							libArgs->push(lib2);
            						}
            					}
            				}
HXLINE( 241)				libs = libArgs;
            			}
HXLINE( 244)			::String here = (::haxe::io::Path_obj::normalize(::Sys_obj::getCwd()) + HX_("/",2f,00,00,00));
HXLINE( 245)			int hereLen = here.length;
HXLINE( 246)			{
HXLINE( 246)				int _g11 = 0;
HXDLIN( 246)				int _g12 = objs->length;
HXDLIN( 246)				while((_g11 < _g12)){
HXLINE( 246)					_g11 = (_g11 + 1);
HXDLIN( 246)					int oid = (_g11 - 1);
HXLINE( 248)					::String obj1 = ::haxe::io::Path_obj::normalize(objs->__get(oid));
HXLINE( 249)					if (::StringTools_obj::startsWith(obj1,here)) {
HXLINE( 250)						objs[oid] = obj1.substr(hereLen,null());
            					}
            				}
            			}
HXLINE( 254)			if ((this->mFromFile != HX_("",00,00,00,00))) {
HXLINE( 256)				::PathManager_obj::mkdir(tmpDir,null());
HXLINE( 257)				::String fname = (tmpDir + HX_("/all_objs",e9,1a,c3,1c));
HXLINE( 259)				::String local = ::haxe::io::Path_obj::normalize(fname);
HXLINE( 260)				if (::StringTools_obj::startsWith(local,here)) {
HXLINE( 261)					fname = local.substr(hereLen,null());
            				}
HXLINE( 263)				 ::sys::io::FileOutput fout = ::sys::io::File_obj::write(fname,false);
HXLINE( 264)				if (this->mFromFileNeedsQuotes) {
HXLINE( 266)					int _g13 = 0;
HXDLIN( 266)					while((_g13 < objs->length)){
HXLINE( 266)						::String obj2 = objs->__get(_g13);
HXDLIN( 266)						_g13 = (_g13 + 1);
HXLINE( 267)						fout->writeString(((HX_("\"",22,00,00,00) + obj2) + HX_("\"\n",a8,1d,00,00)),null());
            					}
            				}
            				else {
HXLINE( 271)					int _g14 = 0;
HXDLIN( 271)					while((_g14 < objs->length)){
HXLINE( 271)						::String obj3 = objs->__get(_g14);
HXDLIN( 271)						_g14 = (_g14 + 1);
HXLINE( 272)						fout->writeString((obj3 + HX_("\n",0a,00,00,00)),null());
            					}
            				}
HXLINE( 274)				fout->close();
HXLINE( 275)				::Array< ::String > parts1 = this->mFromFile.split(HX_(" ",20,00,00,00));
HXLINE( 276)				::String last = ( (::String)(parts1->pop()) );
HXLINE( 277)				args = args->concat(parts1);
HXLINE( 278)				args->push((last + fname));
            			}
            			else {
HXLINE( 281)				args = args->concat(objs);
            			}
HXLINE( 283)			{
HXLINE( 283)				int _g15 = 0;
HXDLIN( 283)				::Array< ::String > _g16 = inTarget->mLibPaths;
HXDLIN( 283)				while((_g15 < _g16->length)){
HXLINE( 283)					::String libpath = _g16->__get(_g15);
HXDLIN( 283)					_g15 = (_g15 + 1);
HXLINE( 285)					::String path = ::haxe::io::Path_obj::normalize(libpath);
HXLINE( 286)					if (::StringTools_obj::startsWith(path,here)) {
HXLINE( 287)						path = path.substr(hereLen,null());
            					}
HXLINE( 288)					args->push((this->mAddLibPath + path));
            				}
            			}
HXLINE( 291)			args = args->concat(libs);
HXLINE( 293)			int result = ::ProcessManager_obj::runCommand(HX_("",00,00,00,00),this->mExe,args,true,true,false,(HX_("\x1b""[1mLink: \x1b""[0m",59,d9,f4,07) + out_name));
HXLINE( 295)			if ((result != 0)) {
HXLINE( 297)				::Tools_obj::exit(result);
            			}
HXLINE( 301)			if ((this->mRanLib != HX_("",00,00,00,00))) {
HXLINE( 303)				args = ::Array_obj< ::String >::__new(1)->init(0,out_name);
HXLINE( 304)				int result1 = ::ProcessManager_obj::runCommand(HX_("",00,00,00,00),this->mRanLib,args,true,true,false,(HX_("\x1b""[1mRanlib:\x1b""[0m ",4b,25,d0,c8) + out_name));
HXLINE( 305)				if ((result1 != 0)) {
HXLINE( 307)					::Tools_obj::exit(result1);
            				}
            			}
HXLINE( 312)			if ((this->mLibDir != HX_("",00,00,00,00))) {
HXLINE( 314)				::sys::io::File_obj::copy(((this->mLibDir + HX_("/",2f,00,00,00)) + file_name),out_name);
HXLINE( 315)				::sys::FileSystem_obj::deleteFile(((this->mLibDir + HX_("/",2f,00,00,00)) + file_name));
            			}
HXLINE( 318)			::sys::io::File_obj::saveContent(hashFile,md5);
HXLINE( 319)			return out_name;
            		}
HXLINE( 322)		return HX_("",00,00,00,00);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Linker_obj,link,return )


::hx::ObjectPtr< Linker_obj > Linker_obj::__new(::String inExe) {
	::hx::ObjectPtr< Linker_obj > __this = new Linker_obj();
	__this->__construct(inExe);
	return __this;
}

::hx::ObjectPtr< Linker_obj > Linker_obj::__alloc(::hx::Ctx *_hx_ctx,::String inExe) {
	Linker_obj *__this = (Linker_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Linker_obj), true, "Linker"));
	*(void **)__this = Linker_obj::_hx_vtable;
	__this->__construct(inExe);
	return __this;
}

Linker_obj::Linker_obj()
{
}

void Linker_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Linker);
	HX_MARK_MEMBER_NAME(mExe,"mExe");
	HX_MARK_MEMBER_NAME(mFlags,"mFlags");
	HX_MARK_MEMBER_NAME(mOutFlag,"mOutFlag");
	HX_MARK_MEMBER_NAME(mExt,"mExt");
	HX_MARK_MEMBER_NAME(mNamePrefix,"mNamePrefix");
	HX_MARK_MEMBER_NAME(mLibDir,"mLibDir");
	HX_MARK_MEMBER_NAME(mRanLib,"mRanLib");
	HX_MARK_MEMBER_NAME(mFromFile,"mFromFile");
	HX_MARK_MEMBER_NAME(mFromFileNeedsQuotes,"mFromFileNeedsQuotes");
	HX_MARK_MEMBER_NAME(mLibs,"mLibs");
	HX_MARK_MEMBER_NAME(mExpandArchives,"mExpandArchives");
	HX_MARK_MEMBER_NAME(mRecreate,"mRecreate");
	HX_MARK_MEMBER_NAME(mLastOutName,"mLastOutName");
	HX_MARK_MEMBER_NAME(mAddLibPath,"mAddLibPath");
	HX_MARK_END_CLASS();
}

void Linker_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mExe,"mExe");
	HX_VISIT_MEMBER_NAME(mFlags,"mFlags");
	HX_VISIT_MEMBER_NAME(mOutFlag,"mOutFlag");
	HX_VISIT_MEMBER_NAME(mExt,"mExt");
	HX_VISIT_MEMBER_NAME(mNamePrefix,"mNamePrefix");
	HX_VISIT_MEMBER_NAME(mLibDir,"mLibDir");
	HX_VISIT_MEMBER_NAME(mRanLib,"mRanLib");
	HX_VISIT_MEMBER_NAME(mFromFile,"mFromFile");
	HX_VISIT_MEMBER_NAME(mFromFileNeedsQuotes,"mFromFileNeedsQuotes");
	HX_VISIT_MEMBER_NAME(mLibs,"mLibs");
	HX_VISIT_MEMBER_NAME(mExpandArchives,"mExpandArchives");
	HX_VISIT_MEMBER_NAME(mRecreate,"mRecreate");
	HX_VISIT_MEMBER_NAME(mLastOutName,"mLastOutName");
	HX_VISIT_MEMBER_NAME(mAddLibPath,"mAddLibPath");
}

::hx::Val Linker_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"mExe") ) { return ::hx::Val( mExe ); }
		if (HX_FIELD_EQ(inName,"mExt") ) { return ::hx::Val( mExt ); }
		if (HX_FIELD_EQ(inName,"link") ) { return ::hx::Val( link_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mLibs") ) { return ::hx::Val( mLibs ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"mFlags") ) { return ::hx::Val( mFlags ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mLibDir") ) { return ::hx::Val( mLibDir ); }
		if (HX_FIELD_EQ(inName,"mRanLib") ) { return ::hx::Val( mRanLib ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mOutFlag") ) { return ::hx::Val( mOutFlag ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mFromFile") ) { return ::hx::Val( mFromFile ); }
		if (HX_FIELD_EQ(inName,"mRecreate") ) { return ::hx::Val( mRecreate ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mNamePrefix") ) { return ::hx::Val( mNamePrefix ); }
		if (HX_FIELD_EQ(inName,"mAddLibPath") ) { return ::hx::Val( mAddLibPath ); }
		if (HX_FIELD_EQ(inName,"isOutOfDate") ) { return ::hx::Val( isOutOfDate_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"mLastOutName") ) { return ::hx::Val( mLastOutName ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"mExpandArchives") ) { return ::hx::Val( mExpandArchives ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getSimpleFilename") ) { return ::hx::Val( getSimpleFilename_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"mFromFileNeedsQuotes") ) { return ::hx::Val( mFromFileNeedsQuotes ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"getUnstrippedFilename") ) { return ::hx::Val( getUnstrippedFilename_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Linker_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"mExe") ) { mExe=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mExt") ) { mExt=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mLibs") ) { mLibs=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"mFlags") ) { mFlags=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mLibDir") ) { mLibDir=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mRanLib") ) { mRanLib=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mOutFlag") ) { mOutFlag=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mFromFile") ) { mFromFile=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mRecreate") ) { mRecreate=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mNamePrefix") ) { mNamePrefix=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mAddLibPath") ) { mAddLibPath=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"mLastOutName") ) { mLastOutName=inValue.Cast< ::String >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"mExpandArchives") ) { mExpandArchives=inValue.Cast< bool >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"mFromFileNeedsQuotes") ) { mFromFileNeedsQuotes=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Linker_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("mExe",25,06,41,48));
	outFields->push(HX_("mFlags",9a,ef,9f,2a));
	outFields->push(HX_("mOutFlag",6d,f6,6d,f0));
	outFields->push(HX_("mExt",34,06,41,48));
	outFields->push(HX_("mNamePrefix",0a,b9,9a,08));
	outFields->push(HX_("mLibDir",55,c3,d0,cd));
	outFields->push(HX_("mRanLib",f3,ea,b4,a0));
	outFields->push(HX_("mFromFile",93,0e,03,4c));
	outFields->push(HX_("mFromFileNeedsQuotes",21,1d,86,20));
	outFields->push(HX_("mLibs",9b,74,39,f5));
	outFields->push(HX_("mExpandArchives",38,a4,88,ff));
	outFields->push(HX_("mRecreate",7c,84,f9,06));
	outFields->push(HX_("mLastOutName",d6,96,43,65));
	outFields->push(HX_("mAddLibPath",36,c2,e5,65));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Linker_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(Linker_obj,mExe),HX_("mExe",25,06,41,48)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Linker_obj,mFlags),HX_("mFlags",9a,ef,9f,2a)},
	{::hx::fsString,(int)offsetof(Linker_obj,mOutFlag),HX_("mOutFlag",6d,f6,6d,f0)},
	{::hx::fsString,(int)offsetof(Linker_obj,mExt),HX_("mExt",34,06,41,48)},
	{::hx::fsString,(int)offsetof(Linker_obj,mNamePrefix),HX_("mNamePrefix",0a,b9,9a,08)},
	{::hx::fsString,(int)offsetof(Linker_obj,mLibDir),HX_("mLibDir",55,c3,d0,cd)},
	{::hx::fsString,(int)offsetof(Linker_obj,mRanLib),HX_("mRanLib",f3,ea,b4,a0)},
	{::hx::fsString,(int)offsetof(Linker_obj,mFromFile),HX_("mFromFile",93,0e,03,4c)},
	{::hx::fsBool,(int)offsetof(Linker_obj,mFromFileNeedsQuotes),HX_("mFromFileNeedsQuotes",21,1d,86,20)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Linker_obj,mLibs),HX_("mLibs",9b,74,39,f5)},
	{::hx::fsBool,(int)offsetof(Linker_obj,mExpandArchives),HX_("mExpandArchives",38,a4,88,ff)},
	{::hx::fsBool,(int)offsetof(Linker_obj,mRecreate),HX_("mRecreate",7c,84,f9,06)},
	{::hx::fsString,(int)offsetof(Linker_obj,mLastOutName),HX_("mLastOutName",d6,96,43,65)},
	{::hx::fsString,(int)offsetof(Linker_obj,mAddLibPath),HX_("mAddLibPath",36,c2,e5,65)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Linker_obj_sStaticStorageInfo = 0;
#endif

static ::String Linker_obj_sMemberFields[] = {
	HX_("mExe",25,06,41,48),
	HX_("mFlags",9a,ef,9f,2a),
	HX_("mOutFlag",6d,f6,6d,f0),
	HX_("mExt",34,06,41,48),
	HX_("mNamePrefix",0a,b9,9a,08),
	HX_("mLibDir",55,c3,d0,cd),
	HX_("mRanLib",f3,ea,b4,a0),
	HX_("mFromFile",93,0e,03,4c),
	HX_("mFromFileNeedsQuotes",21,1d,86,20),
	HX_("mLibs",9b,74,39,f5),
	HX_("mExpandArchives",38,a4,88,ff),
	HX_("mRecreate",7c,84,f9,06),
	HX_("mLastOutName",d6,96,43,65),
	HX_("mAddLibPath",36,c2,e5,65),
	HX_("isOutOfDate",c9,64,42,cf),
	HX_("getSimpleFilename",4f,20,d9,8b),
	HX_("getUnstrippedFilename",6d,7d,2d,0f),
	HX_("link",fa,17,b3,47),
	::String(null()) };

::hx::Class Linker_obj::__mClass;

void Linker_obj::__register()
{
	Linker_obj _hx_dummy;
	Linker_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Linker",07,57,39,21);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Linker_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Linker_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Linker_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Linker_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

