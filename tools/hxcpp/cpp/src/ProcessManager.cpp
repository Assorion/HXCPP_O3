// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_BuildTool
#include <BuildTool.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Log
#include <Log.h>
#endif
#ifndef INCLUDED_PathManager
#include <PathManager.h>
#endif
#ifndef INCLUDED_ProcessManager
#include <ProcessManager.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_ValueException
#include <haxe/ValueException.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesOutput
#include <haxe/io/BytesOutput.h>
#endif
#ifndef INCLUDED_haxe_io_Eof
#include <haxe/io/Eof.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_Process
#include <sys/io/Process.h>
#endif
#ifndef INCLUDED_sys_thread_Deque
#include <sys/thread/Deque.h>
#endif
#ifndef INCLUDED_sys_thread_Tls
#include <sys/thread/Tls.h>
#endif
#ifndef INCLUDED_sys_thread__Thread_HaxeThread
#include <sys/thread/_Thread/HaxeThread.h>
#endif
#ifndef INCLUDED_sys_thread__Thread_Thread_Impl_
#include <sys/thread/_Thread/Thread_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_d380eee1536645e2_17_dup,"ProcessManager","dup",0x865dc72f,"ProcessManager.dup","ProcessManager.hx",17,0x2e8599a0)
HX_LOCAL_STACK_FRAME(_hx_pos_d380eee1536645e2_27_combineCommand,"ProcessManager","combineCommand",0x79c1231c,"ProcessManager.combineCommand","ProcessManager.hx",27,0x2e8599a0)
HX_LOCAL_STACK_FRAME(_hx_pos_d380eee1536645e2_57_formatMessage,"ProcessManager","formatMessage",0xacff5ec0,"ProcessManager.formatMessage","ProcessManager.hx",57,0x2e8599a0)
HX_LOCAL_STACK_FRAME(_hx_pos_d380eee1536645e2_109_runCommand,"ProcessManager","runCommand",0xc6a84fd0,"ProcessManager.runCommand","ProcessManager.hx",109,0x2e8599a0)
HX_LOCAL_STACK_FRAME(_hx_pos_d380eee1536645e2_152_readStderr,"ProcessManager","readStderr",0xdc265928,"ProcessManager.readStderr","ProcessManager.hx",152,0x2e8599a0)
HX_LOCAL_STACK_FRAME(_hx_pos_d380eee1536645e2_171_readStdout,"ProcessManager","readStdout",0xdc2df251,"ProcessManager.readStdout","ProcessManager.hx",171,0x2e8599a0)
HX_LOCAL_STACK_FRAME(_hx_pos_d380eee1536645e2_191_runProcess,"ProcessManager","runProcess",0x368580f4,"ProcessManager.runProcess","ProcessManager.hx",191,0x2e8599a0)
HX_LOCAL_STACK_FRAME(_hx_pos_d380eee1536645e2_230_runProcessLine,"ProcessManager","runProcessLine",0x57974f08,"ProcessManager.runProcessLine","ProcessManager.hx",230,0x2e8599a0)
HX_LOCAL_STACK_FRAME(_hx_pos_d380eee1536645e2_239__runCommand,"ProcessManager","_runCommand",0x4a3a3dcf,"ProcessManager._runCommand","ProcessManager.hx",239,0x2e8599a0)
HX_LOCAL_STACK_FRAME(_hx_pos_d380eee1536645e2_285__runProcess,"ProcessManager","_runProcess",0xba176ef3,"ProcessManager._runProcess","ProcessManager.hx",285,0x2e8599a0)
HX_LOCAL_STACK_FRAME(_hx_pos_d380eee1536645e2_378_runProcessThreaded,"ProcessManager","runProcessThreaded",0x2bf4eabd,"ProcessManager.runProcessThreaded","ProcessManager.hx",378,0x2e8599a0)
HX_LOCAL_STACK_FRAME(_hx_pos_d380eee1536645e2_427_runProcessThreaded,"ProcessManager","runProcessThreaded",0x2bf4eabd,"ProcessManager.runProcessThreaded","ProcessManager.hx",427,0x2e8599a0)

void ProcessManager_obj::__construct() { }

Dynamic ProcessManager_obj::__CreateEmpty() { return new ProcessManager_obj; }

void *ProcessManager_obj::_hx_vtable = 0;

Dynamic ProcessManager_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ProcessManager_obj > _hx_result = new ProcessManager_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ProcessManager_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5260ea9e;
}

::Array< ::String > ProcessManager_obj::dup(::Array< ::String > inArgs){
            	HX_STACKFRAME(&_hx_pos_d380eee1536645e2_17_dup)
HXLINE(  18)		if (::hx::IsNull( inArgs )) {
HXLINE(  19)			return ::Array_obj< ::String >::__new(0);
            		}
HXLINE(  20)		return inArgs->copy();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ProcessManager_obj,dup,return )

::String ProcessManager_obj::combineCommand(::String command,::Array< ::String > args){
            	HX_GC_STACKFRAME(&_hx_pos_d380eee1536645e2_27_combineCommand)
HXLINE(  28)		::Array< ::String > parts = ::Array_obj< ::String >::__new();
HXLINE(  29)		::String c = command;
HXLINE(  30)		 ::EReg quoted =  ::EReg_obj::__alloc( HX_CTX ,HX_("^\\s*\"([^\"]+)\"(.*)",30,b8,83,56),HX_("",00,00,00,00));
HXLINE(  31)		 ::EReg word =  ::EReg_obj::__alloc( HX_CTX ,HX_("^\\s*(\\S+)(.*)",0d,21,44,94),HX_("",00,00,00,00));
HXLINE(  32)		while((c.length > 0)){
HXLINE(  34)			if (quoted->match(c)) {
HXLINE(  36)				parts->push(quoted->matched(1));
HXLINE(  37)				c = quoted->matched(2);
            			}
            			else {
HXLINE(  39)				if (word->match(c)) {
HXLINE(  41)					parts->push(word->matched(1));
HXLINE(  42)					c = word->matched(2);
            				}
            				else {
HXLINE(  45)					goto _hx_goto_1;
            				}
            			}
            		}
            		_hx_goto_1:;
HXLINE(  47)		if ((parts->length > 1)) {
HXLINE(  49)			command = ( (::String)(parts->shift()) );
HXLINE(  50)			while((parts->length > 0)){
HXLINE(  51)				args->unshift(parts->pop());
            			}
            		}
HXLINE(  53)		return ::PathManager_obj::escape(command);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ProcessManager_obj,combineCommand,return )

::String ProcessManager_obj::formatMessage(::String command,::Array< ::String > args,::hx::Null< bool >  __o_colorize){
            		bool colorize = __o_colorize.Default(true);
            	HX_STACKFRAME(&_hx_pos_d380eee1536645e2_57_formatMessage)
HXLINE(  58)		::String message = HX_("",00,00,00,00);
HXLINE(  60)		if (colorize) {
HXLINE(  62)			message = ((HX_("\x1b""[33;1m",97,c3,8f,44) + command) + HX_("\x1b""[0m",1d,fa,1d,12));
            		}
            		else {
HXLINE(  66)			message = command;
            		}
HXLINE(  69)		{
HXLINE(  69)			int _g = 0;
HXDLIN(  69)			while((_g < args->length)){
HXLINE(  69)				::String arg = args->__get(_g);
HXDLIN(  69)				_g = (_g + 1);
HXLINE(  71)				if (colorize) {
HXLINE(  73)					::String ext = ::haxe::io::Path_obj::extension(arg);
HXLINE(  74)					bool _hx_tmp;
HXDLIN(  74)					bool _hx_tmp1;
HXDLIN(  74)					bool _hx_tmp2;
HXDLIN(  74)					bool _hx_tmp3;
HXDLIN(  74)					bool _hx_tmp4;
HXDLIN(  74)					if ((ext != HX_("cpp",23,81,4b,00))) {
HXLINE(  74)						_hx_tmp4 = (ext == HX_("c",63,00,00,00));
            					}
            					else {
HXLINE(  74)						_hx_tmp4 = true;
            					}
HXDLIN(  74)					if (!(_hx_tmp4)) {
HXLINE(  74)						_hx_tmp3 = (ext == HX_("h",68,00,00,00));
            					}
            					else {
HXLINE(  74)						_hx_tmp3 = true;
            					}
HXDLIN(  74)					if (!(_hx_tmp3)) {
HXLINE(  74)						_hx_tmp2 = (ext == HX_("hpp",68,4c,4f,00));
            					}
            					else {
HXLINE(  74)						_hx_tmp2 = true;
            					}
HXDLIN(  74)					if (!(_hx_tmp2)) {
HXLINE(  74)						_hx_tmp1 = (ext == HX_("m",6d,00,00,00));
            					}
            					else {
HXLINE(  74)						_hx_tmp1 = true;
            					}
HXDLIN(  74)					if (!(_hx_tmp1)) {
HXLINE(  74)						_hx_tmp = (ext == HX_("mm",60,5f,00,00));
            					}
            					else {
HXLINE(  74)						_hx_tmp = true;
            					}
HXDLIN(  74)					if (_hx_tmp) {
HXLINE(  76)						::Array< ::String > split = arg.split(HX_("/",2f,00,00,00));
HXLINE(  77)						if ((split->length > 1)) {
HXLINE(  79)							::String arg1 = ((HX_("\x1b""[33m",ed,f3,1e,c8) + split->slice(0,(split->length - 1))->join(HX_("/",2f,00,00,00))) + HX_("/\x1b""[33;1m",48,b7,d2,c4));
HXDLIN(  79)							arg = ((arg1 + split->__get((split->length - 1))) + HX_("\x1b""[0m",1d,fa,1d,12));
            						}
            						else {
HXLINE(  83)							arg = ((HX_("\x1b""[1m",fc,fa,1d,12) + arg) + HX_("\x1b""[0m",1d,fa,1d,12));
            						}
            					}
            					else {
HXLINE(  86)						if (::StringTools_obj::startsWith(arg,HX_("-D",77,27,00,00))) {
HXLINE(  88)							arg = ((HX_("\x1b""[1m",fc,fa,1d,12) + arg) + HX_("\x1b""[0m",1d,fa,1d,12));
            						}
            						else {
HXLINE(  92)							arg = ((HX_("\x1b""[0m",1d,fa,1d,12) + arg) + HX_("\x1b""[0m",1d,fa,1d,12));
            						}
            					}
            				}
HXLINE(  96)				if ((arg.indexOf(HX_(" ",20,00,00,00),null()) > -1)) {
HXLINE(  98)					message = (message + ((HX_(" \"",02,1c,00,00) + arg) + HX_("\"",22,00,00,00)));
            				}
            				else {
HXLINE( 102)					message = (message + (HX_(" ",20,00,00,00) + arg));
            				}
            			}
            		}
HXLINE( 105)		return message;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ProcessManager_obj,formatMessage,return )

int ProcessManager_obj::runCommand(::String path,::String command,::Array< ::String > args,::hx::Null< bool >  __o_print,::hx::Null< bool >  __o_safeExecute,::hx::Null< bool >  __o_ignoreErrors,::String inText){
            		bool print = __o_print.Default(true);
            		bool safeExecute = __o_safeExecute.Default(true);
            		bool ignoreErrors = __o_ignoreErrors.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_d380eee1536645e2_109_runCommand)
HXLINE( 110)		args = ::ProcessManager_obj::dup(args);
HXLINE( 111)		command = ::ProcessManager_obj::combineCommand(command,args);
HXLINE( 114)		bool _hx_tmp;
HXDLIN( 114)		bool _hx_tmp1;
HXDLIN( 114)		if (print) {
HXLINE( 114)			_hx_tmp1 = !(::Log_obj::verbose);
            		}
            		else {
HXLINE( 114)			_hx_tmp1 = false;
            		}
HXDLIN( 114)		if (_hx_tmp1) {
HXLINE( 114)			_hx_tmp = !(::Log_obj::quiet);
            		}
            		else {
HXLINE( 114)			_hx_tmp = false;
            		}
HXDLIN( 114)		if (_hx_tmp) {
HXLINE( 116)			::String _hx_tmp2;
HXDLIN( 116)			if (::hx::IsNull( inText )) {
HXLINE( 116)				_hx_tmp2 = HX_("",00,00,00,00);
            			}
            			else {
HXLINE( 116)				_hx_tmp2 = inText;
            			}
HXDLIN( 116)			::Log_obj::info(_hx_tmp2,::ProcessManager_obj::formatMessage(command,args,null()));
            		}
HXLINE( 119)		if (safeExecute) {
HXLINE( 121)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 123)				bool _hx_tmp3;
HXDLIN( 123)				bool _hx_tmp4;
HXDLIN( 123)				bool _hx_tmp5;
HXDLIN( 123)				if (::hx::IsNotNull( path )) {
HXLINE( 123)					_hx_tmp5 = (path != HX_("",00,00,00,00));
            				}
            				else {
HXLINE( 123)					_hx_tmp5 = false;
            				}
HXDLIN( 123)				if (_hx_tmp5) {
HXLINE( 123)					_hx_tmp4 = !(::sys::FileSystem_obj::exists(::sys::FileSystem_obj::fullPath(path)));
            				}
            				else {
HXLINE( 123)					_hx_tmp4 = false;
            				}
HXDLIN( 123)				if (_hx_tmp4) {
HXLINE( 123)					_hx_tmp3 = !(::sys::FileSystem_obj::exists(::sys::FileSystem_obj::fullPath( ::haxe::io::Path_obj::__alloc( HX_CTX ,path)->dir)));
            				}
            				else {
HXLINE( 123)					_hx_tmp3 = false;
            				}
HXDLIN( 123)				if (_hx_tmp3) {
HXLINE( 125)					::Log_obj::error(((HX_("The specified target path \"",17,1a,cd,40) + path) + HX_("\" does not exist",01,0c,9e,c6)),null(),null(),null());
HXLINE( 126)					return 1;
            				}
HXLINE( 128)				return ::ProcessManager_obj::_runCommand(path,command,args,inText);
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE( 130)					{
HXLINE( 130)						null();
            					}
HXDLIN( 130)					 ::Dynamic e = _g;
HXLINE( 132)					if (!(ignoreErrors)) {
HXLINE( 136)						if (::Log_obj::verbose) {
HXLINE( 138)							::Log_obj::error(HX_("",00,00,00,00),( (::String)(e) ),null(),null());
            						}
HXLINE( 140)						return 1;
            					}
HXLINE( 142)					return 0;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            		else {
HXLINE( 147)			return ::ProcessManager_obj::_runCommand(path,command,args,inText);
            		}
HXLINE( 119)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(ProcessManager_obj,runCommand,return )

::Array< ::String > ProcessManager_obj::readStderr(::String inCommand,::Array< ::String > inArgs){
            	HX_GC_STACKFRAME(&_hx_pos_d380eee1536645e2_152_readStderr)
HXLINE( 153)		inArgs = ::ProcessManager_obj::dup(inArgs);
HXLINE( 154)		inCommand = ::ProcessManager_obj::combineCommand(inCommand,inArgs);
HXLINE( 156)		::Array< ::String > result = ::Array_obj< ::String >::__new();
HXLINE( 157)		 ::sys::io::Process proc =  ::sys::io::Process_obj::__alloc( HX_CTX ,inCommand,inArgs,null());
HXLINE( 158)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 160)			while(true){
HXLINE( 162)				::String out = proc->_hx_stderr->readLine();
HXLINE( 163)				result->push(out);
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 165)				{
HXLINE( 165)					null();
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 166)		proc->close();
HXLINE( 167)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ProcessManager_obj,readStderr,return )

::Array< ::String > ProcessManager_obj::readStdout(::String command,::Array< ::String > args){
            	HX_GC_STACKFRAME(&_hx_pos_d380eee1536645e2_171_readStdout)
HXLINE( 172)		args = ::ProcessManager_obj::dup(args);
HXLINE( 173)		command = ::ProcessManager_obj::combineCommand(command,args);
HXLINE( 176)		::Array< ::String > result = ::Array_obj< ::String >::__new();
HXLINE( 177)		 ::sys::io::Process proc =  ::sys::io::Process_obj::__alloc( HX_CTX ,command,args,null());
HXLINE( 178)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 180)			while(true){
HXLINE( 182)				::String out = proc->_hx_stdout->readLine();
HXLINE( 183)				result->push(out);
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 185)				{
HXLINE( 185)					null();
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 186)		proc->close();
HXLINE( 187)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ProcessManager_obj,readStdout,return )

::String ProcessManager_obj::runProcess(::String path,::String command,::Array< ::String > args,::hx::Null< bool >  __o_waitForOutput,::hx::Null< bool >  __o_print,::hx::Null< bool >  __o_safeExecute,::hx::Null< bool >  __o_ignoreErrors,::String text){
            		bool waitForOutput = __o_waitForOutput.Default(true);
            		bool print = __o_print.Default(true);
            		bool safeExecute = __o_safeExecute.Default(true);
            		bool ignoreErrors = __o_ignoreErrors.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_d380eee1536645e2_191_runProcess)
HXLINE( 192)		args = ::ProcessManager_obj::dup(args);
HXLINE( 193)		command = ::ProcessManager_obj::combineCommand(command,args);
HXLINE( 195)		bool _hx_tmp;
HXDLIN( 195)		if (print) {
HXLINE( 195)			_hx_tmp = !(::Log_obj::verbose);
            		}
            		else {
HXLINE( 195)			_hx_tmp = false;
            		}
HXDLIN( 195)		if (_hx_tmp) {
HXLINE( 197)			::Log_obj::info(::ProcessManager_obj::formatMessage(command,args,null()),null());
            		}
HXLINE( 201)		if (safeExecute) {
HXLINE( 203)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 205)				bool _hx_tmp1;
HXDLIN( 205)				bool _hx_tmp2;
HXDLIN( 205)				bool _hx_tmp3;
HXDLIN( 205)				if (::hx::IsNotNull( path )) {
HXLINE( 205)					_hx_tmp3 = (path != HX_("",00,00,00,00));
            				}
            				else {
HXLINE( 205)					_hx_tmp3 = false;
            				}
HXDLIN( 205)				if (_hx_tmp3) {
HXLINE( 205)					_hx_tmp2 = !(::sys::FileSystem_obj::exists(::sys::FileSystem_obj::fullPath(path)));
            				}
            				else {
HXLINE( 205)					_hx_tmp2 = false;
            				}
HXDLIN( 205)				if (_hx_tmp2) {
HXLINE( 205)					_hx_tmp1 = !(::sys::FileSystem_obj::exists(::sys::FileSystem_obj::fullPath( ::haxe::io::Path_obj::__alloc( HX_CTX ,path)->dir)));
            				}
            				else {
HXLINE( 205)					_hx_tmp1 = false;
            				}
HXDLIN( 205)				if (_hx_tmp1) {
HXLINE( 207)					::Log_obj::error(((HX_("The specified target path \"",17,1a,cd,40) + path) + HX_("\" does not exist",01,0c,9e,c6)),null(),null(),null());
            				}
HXLINE( 209)				return ::ProcessManager_obj::_runProcess(path,command,args,waitForOutput,ignoreErrors,text);
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE( 211)					{
HXLINE( 211)						null();
            					}
HXDLIN( 211)					 ::Dynamic e = _g;
HXLINE( 213)					if (!(ignoreErrors)) {
HXLINE( 216)						if (::Log_obj::verbose) {
HXLINE( 218)							::Log_obj::error(HX_("",00,00,00,00),( (::String)(e) ),null(),null());
            						}
            					}
HXLINE( 221)					return null();
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            		else {
HXLINE( 226)			return ::ProcessManager_obj::_runProcess(path,command,args,waitForOutput,ignoreErrors,text);
            		}
HXLINE( 201)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(ProcessManager_obj,runProcess,return )

::String ProcessManager_obj::runProcessLine(::String path,::String command,::Array< ::String > args,::hx::Null< bool >  __o_waitForOutput,::hx::Null< bool >  __o_print,::hx::Null< bool >  __o_safeExecute,::hx::Null< bool >  __o_ignoreErrors){
            		bool waitForOutput = __o_waitForOutput.Default(true);
            		bool print = __o_print.Default(true);
            		bool safeExecute = __o_safeExecute.Default(true);
            		bool ignoreErrors = __o_ignoreErrors.Default(false);
            	HX_STACKFRAME(&_hx_pos_d380eee1536645e2_230_runProcessLine)
HXLINE( 231)		::String result = ::ProcessManager_obj::runProcess(path,command,args,waitForOutput,print,safeExecute,ignoreErrors,null());
HXLINE( 232)		if (::hx::IsNotNull( result )) {
HXLINE( 233)			return result.split(HX_("\n",0a,00,00,00))->__get(0);
            		}
HXLINE( 234)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(ProcessManager_obj,runProcessLine,return )

int ProcessManager_obj::_runCommand(::String path,::String command,::Array< ::String > args,::String inText){
            	HX_STACKFRAME(&_hx_pos_d380eee1536645e2_239__runCommand)
HXLINE( 240)		::String oldPath = HX_("",00,00,00,00);
HXLINE( 242)		bool _hx_tmp;
HXDLIN( 242)		if (::hx::IsNotNull( path )) {
HXLINE( 242)			_hx_tmp = (path != HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 242)			_hx_tmp = false;
            		}
HXDLIN( 242)		if (_hx_tmp) {
HXLINE( 244)			::Log_obj::info(HX_("",00,00,00,00),((HX_(" - \x1b""[1mChanging directory:\x1b""[0m ",b2,c4,d8,6b) + path) + HX_("",00,00,00,00)));
HXLINE( 246)			oldPath = ::Sys_obj::getCwd();
HXLINE( 247)			::Sys_obj::setCwd(path);
            		}
HXLINE( 250)		bool _hx_tmp1;
HXDLIN( 250)		if (::Log_obj::quiet) {
HXLINE( 250)			_hx_tmp1 = ::hx::IsNotNull( inText );
            		}
            		else {
HXLINE( 250)			_hx_tmp1 = false;
            		}
HXDLIN( 250)		if (_hx_tmp1) {
HXLINE( 252)			::Log_obj::info(inText,null());
            		}
            		else {
HXLINE( 256)			::String text;
HXDLIN( 256)			if (::hx::IsNull( inText )) {
HXLINE( 256)				text = HX_("Running command",0a,c2,dd,ec);
            			}
            			else {
HXLINE( 256)				text = inText;
            			}
HXLINE( 257)			::Log_obj::info(HX_("",00,00,00,00),(((HX_(" - \x1b""[1m",ef,9f,ae,af) + text) + HX_(":\x1b""[0m ",e9,cc,cf,f8)) + ::ProcessManager_obj::formatMessage(command,args,null())));
            		}
HXLINE( 260)		int result = 0;
HXLINE( 262)		bool _hx_tmp2;
HXDLIN( 262)		if (::hx::IsNotNull( args )) {
HXLINE( 262)			_hx_tmp2 = (args->length > 0);
            		}
            		else {
HXLINE( 262)			_hx_tmp2 = false;
            		}
HXDLIN( 262)		if (_hx_tmp2) {
HXLINE( 264)			result = ::Sys_obj::command(command,args);
            		}
            		else {
HXLINE( 268)			result = ::Sys_obj::command(command,null());
            		}
HXLINE( 271)		if ((oldPath != HX_("",00,00,00,00))) {
HXLINE( 273)			::Sys_obj::setCwd(oldPath);
            		}
HXLINE( 276)		if ((result != 0)) {
HXLINE( 278)			::String _hx_tmp3 = (HX_("Error while running command\n",67,41,67,e4) + ::ProcessManager_obj::formatMessage(command,args,null()));
HXDLIN( 278)			::String _hx_tmp4;
HXDLIN( 278)			if ((path != HX_("",00,00,00,00))) {
HXLINE( 278)				_hx_tmp4 = ((HX_(" [",3b,1c,00,00) + path) + HX_("]",5d,00,00,00));
            			}
            			else {
HXLINE( 278)				_hx_tmp4 = HX_("",00,00,00,00);
            			}
HXDLIN( 278)			HX_STACK_DO_THROW((_hx_tmp3 + _hx_tmp4));
            		}
HXLINE( 281)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ProcessManager_obj,_runCommand,return )

::String ProcessManager_obj::_runProcess(::String path,::String command,::Array< ::String > args,bool waitForOutput,bool ignoreErrors,::String inText){
            	HX_GC_STACKFRAME(&_hx_pos_d380eee1536645e2_285__runProcess)
HXLINE( 286)		::String oldPath = HX_("",00,00,00,00);
HXLINE( 288)		bool _hx_tmp;
HXDLIN( 288)		if (::hx::IsNotNull( path )) {
HXLINE( 288)			_hx_tmp = (path != HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 288)			_hx_tmp = false;
            		}
HXDLIN( 288)		if (_hx_tmp) {
HXLINE( 290)			::Log_obj::info(HX_("",00,00,00,00),((HX_(" - \x1b""[1m - Changing directory:\x1b""[0m ",a7,ca,e0,80) + path) + HX_("",00,00,00,00)));
HXLINE( 292)			oldPath = ::Sys_obj::getCwd();
HXLINE( 293)			::Sys_obj::setCwd(path);
            		}
HXLINE( 296)		if (!(::Log_obj::quiet)) {
HXLINE( 298)			::String text;
HXDLIN( 298)			if (::hx::IsNull( inText )) {
HXLINE( 298)				text = HX_("Running process",2e,f3,ba,5c);
            			}
            			else {
HXLINE( 298)				text = inText;
            			}
HXLINE( 299)			::Log_obj::info(HX_("",00,00,00,00),(((HX_(" - \x1b""[1m",ef,9f,ae,af) + text) + HX_(":\x1b""[0m ",e9,cc,cf,f8)) + ::ProcessManager_obj::formatMessage(command,args,null())));
            		}
            		else {
HXLINE( 303)			::Log_obj::info(HX_("",00,00,00,00),inText);
            		}
HXLINE( 306)		::String output = HX_("",00,00,00,00);
HXLINE( 307)		int result = 0;
HXLINE( 309)		 ::sys::io::Process process = null();
HXLINE( 310)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 312)			process =  ::sys::io::Process_obj::__alloc( HX_CTX ,command,args,null());
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 314)				{
HXLINE( 314)					null();
            				}
HXDLIN( 314)				 ::Dynamic e = _g;
HXLINE( 315)				{
HXLINE( 316)					if (ignoreErrors) {
HXLINE( 317)						return null();
            					}
HXLINE( 318)					::Log_obj::error((::Std_obj::string(e) + HX_("",00,00,00,00)),null(),null(),null());
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 321)		 ::haxe::io::BytesOutput buffer =  ::haxe::io::BytesOutput_obj::__alloc( HX_CTX );
HXLINE( 323)		if (waitForOutput) {
HXLINE( 325)			bool waiting = true;
HXLINE( 326)			while(waiting){
HXLINE( 328)				try {
            					HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
            					HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE( 330)					 ::haxe::io::Bytes current = process->_hx_stdout->readAll(1024);
HXLINE( 331)					buffer->write(current);
HXLINE( 332)					if ((current->length == 0)) {
HXLINE( 334)						waiting = false;
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::haxe::io::Eof e1 = _hx_e;
HXLINE( 339)						waiting = false;
            					}
            					else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::haxe::ValueException _g1 = _hx_e;
HXLINE( 337)						{
HXLINE( 337)							null();
            						}
HXLINE( 328)						if (::Std_obj::isOfType(_g1->value,::hx::ClassOf< ::haxe::io::Eof >())) {
HXLINE( 339)							waiting = false;
            						}
            						else {
HXLINE( 328)							HX_STACK_DO_THROW(_g1);
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
HXLINE( 343)			result = ( (int)(process->exitCode(null())) );
HXLINE( 344)			process->close();
HXLINE( 348)			output = buffer->getBytes()->toString();
HXLINE( 349)			if ((output == HX_("",00,00,00,00))) {
HXLINE( 351)				::String error = process->_hx_stderr->readAll(null())->toString();
HXLINE( 352)				if (ignoreErrors) {
HXLINE( 354)					output = error;
            				}
            				else {
HXLINE( 358)					bool _hx_tmp1;
HXDLIN( 358)					if (::hx::IsNotNull( error )) {
HXLINE( 358)						_hx_tmp1 = (error == HX_("",00,00,00,00));
            					}
            					else {
HXLINE( 358)						_hx_tmp1 = true;
            					}
HXDLIN( 358)					if (_hx_tmp1) {
HXLINE( 359)						error = (HX_("Error while running command\n",67,41,67,e4) + ::ProcessManager_obj::formatMessage(command,args,null()));
            					}
HXLINE( 360)					::Log_obj::error(error,null(),null(),null());
            				}
HXLINE( 363)				return null();
            			}
            		}
HXLINE( 368)		if ((oldPath != HX_("",00,00,00,00))) {
HXLINE( 370)			::Sys_obj::setCwd(oldPath);
            		}
HXLINE( 373)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ProcessManager_obj,_runProcess,return )

int ProcessManager_obj::runProcessThreaded(::String command,::Array< ::String > args,::String inText){
            	HX_GC_STACKFRAME(&_hx_pos_d380eee1536645e2_378_runProcessThreaded)
HXLINE( 379)		args = ::ProcessManager_obj::dup(args);
HXLINE( 380)		command = ::ProcessManager_obj::combineCommand(command,args);
HXLINE( 382)		::Log_obj::lock();
HXLINE( 385)		if ((::BuildTool_obj::threadExitCode != 0)) {
HXLINE( 387)			::Log_obj::unlock();
HXLINE( 388)			return ::BuildTool_obj::threadExitCode;
            		}
HXLINE( 391)		if (::hx::IsNotNull( inText )) {
HXLINE( 392)			::Log_obj::info(inText,HX_("",00,00,00,00));
            		}
HXLINE( 394)		if (!(::Log_obj::quiet)) {
HXLINE( 395)			::Log_obj::info(HX_("",00,00,00,00),(HX_(" - \x1b""[1mRunning command:\x1b""[0m ",24,22,1c,30) + ::ProcessManager_obj::formatMessage(command,args,null())));
            		}
HXLINE( 396)		::Log_obj::unlock();
HXLINE( 398)		::Array< ::String > output = ::Array_obj< ::String >::__new();
HXLINE( 399)		 ::sys::io::Process process = null();
HXLINE( 400)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 402)			process =  ::sys::io::Process_obj::__alloc( HX_CTX ,command,args,null());
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 404)				{
HXLINE( 404)					null();
            				}
HXDLIN( 404)				 ::Dynamic e = _g;
HXLINE( 406)				::Log_obj::lock();
HXLINE( 407)				if ((::BuildTool_obj::threadExitCode == 0)) {
HXLINE( 409)					::Log_obj::info(((((HX_("\x1b""[31m",2f,f2,1e,c8) + HX_("\x1b""[1m",fc,fa,1d,12)) + ::Std_obj::string(e)) + HX_("\x1b""[0m",1d,fa,1d,12)) + HX_("\n",0a,00,00,00)),null());
HXLINE( 410)					::BuildTool_obj::setThreadError(-1);
            				}
HXLINE( 412)				::Log_obj::unlock();
HXLINE( 413)				return -1;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 417)		 ::haxe::io::Input err = process->_hx_stderr;
HXLINE( 418)		 ::haxe::io::Input out = process->_hx_stdout;
HXLINE( 419)		 ::sys::thread::_Thread::HaxeThread reader = ::BuildTool_obj::helperThread->get_value().StaticCast<  ::sys::thread::_Thread::HaxeThread >();
HXLINE( 422)		if (::hx::IsNull( reader )) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::sys::thread::_Thread::HaxeThread,controller) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_d380eee1536645e2_427_runProcessThreaded)
HXLINE( 427)				while(true){
HXLINE( 429)					 ::Dynamic stream = ::sys::thread::_Thread::Thread_Impl__obj::readMessage(true);
HXLINE( 430)					::Array< ::String > output = null();
HXLINE( 431)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 433)						while(true){
HXLINE( 435)							::String line = ( (::String)(stream->__Field(HX_("readLine",6a,f2,aa,6f),::hx::paccDynamic)()) );
HXLINE( 436)							if (::hx::IsNull( output )) {
HXLINE( 437)								output = ::Array_obj< ::String >::__new(1)->init(0,line);
            							}
            							else {
HXLINE( 439)								output->push(line);
            							}
            						}
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic _g = _hx_e;
HXLINE( 442)							{
HXLINE( 442)								null();
            							}
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
HXLINE( 443)					controller->messages->add(output);
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 424)			 ::sys::thread::_Thread::HaxeThread controller = ::sys::thread::_Thread::HaxeThread_obj::current();
HXLINE( 425)			 ::sys::thread::Tls _hx_tmp = ::BuildTool_obj::helperThread;
HXDLIN( 425)			reader = ::sys::thread::_Thread::HaxeThread_obj::create( ::Dynamic(new _hx_Closure_0(controller)),false);
HXDLIN( 425)			_hx_tmp->set_value(reader).StaticCast<  ::sys::thread::_Thread::HaxeThread >();
            		}
HXLINE( 449)		reader->messages->add(err);
HXLINE( 451)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 453)			while(true){
HXLINE( 455)				::String line = out->readLine();
HXLINE( 456)				output->push(line);
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g1 = _hx_e;
HXLINE( 459)				{
HXLINE( 459)					null();
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 461)		bool _hx_tmp1;
HXDLIN( 461)		if ((output->length == 1)) {
HXLINE( 461)			 ::EReg _hx_tmp2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("^\\S+\\.(cpp|c|cc)$",8d,07,7d,bd),HX_("",00,00,00,00));
HXDLIN( 461)			_hx_tmp1 = _hx_tmp2->match(output->__get(0));
            		}
            		else {
HXLINE( 461)			_hx_tmp1 = false;
            		}
HXDLIN( 461)		if (_hx_tmp1) {
HXLINE( 464)			output = ::Array_obj< ::String >::__new(0);
            		}
HXLINE( 467)		::Array< ::String > errOut = ( (::Array< ::String >)(::sys::thread::_Thread::Thread_Impl__obj::readMessage(true)) );
HXLINE( 469)		 ::Dynamic code = process->exitCode(null());
HXLINE( 470)		process->close();
HXLINE( 472)		if (::hx::IsNotEq( code,0 )) {
HXLINE( 474)			if ((::BuildTool_obj::threadExitCode == 0)) {
HXLINE( 476)				::Log_obj::lock();
HXLINE( 477)				::String message = HX_("",00,00,00,00);
HXLINE( 478)				if (::Log_obj::verbose) {
HXLINE( 480)					::Log_obj::println(HX_("",00,00,00,00));
HXLINE( 481)					message = (message + HX_("Error while running command\n",67,41,67,e4));
HXLINE( 482)					message = (message + (::ProcessManager_obj::formatMessage(command,args,null()) + HX_("\n\n",c0,08,00,00)));
            				}
HXLINE( 484)				if ((output->length > 0)) {
HXLINE( 486)					message = (message + (output->join(HX_("\n",0a,00,00,00)) + HX_("\n",0a,00,00,00)));
            				}
HXLINE( 488)				if (::hx::IsNotNull( errOut )) {
HXLINE( 490)					message = (message + (errOut->join(HX_("\n",0a,00,00,00)) + HX_("\x1b""[0m",1d,fa,1d,12)));
            				}
HXLINE( 492)				::Log_obj::error(message,HX_("",00,00,00,00),null(),false);
HXLINE( 493)				::Log_obj::unlock();
            			}
HXLINE( 496)			return ( (int)(code) );
            		}
HXLINE( 499)		bool _hx_tmp3;
HXDLIN( 499)		if (::hx::IsNotNull( errOut )) {
HXLINE( 499)			_hx_tmp3 = (errOut->length > 0);
            		}
            		else {
HXLINE( 499)			_hx_tmp3 = false;
            		}
HXDLIN( 499)		if (_hx_tmp3) {
HXLINE( 500)			output = output->concat(errOut);
            		}
HXLINE( 502)		if ((output->length > 0)) {
HXLINE( 504)			::Log_obj::info(output->join(HX_("\n",0a,00,00,00)),null());
            		}
HXLINE( 507)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ProcessManager_obj,runProcessThreaded,return )


ProcessManager_obj::ProcessManager_obj()
{
}

bool ProcessManager_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"dup") ) { outValue = dup_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"runCommand") ) { outValue = runCommand_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"readStderr") ) { outValue = readStderr_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"readStdout") ) { outValue = readStdout_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"runProcess") ) { outValue = runProcess_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_runCommand") ) { outValue = _runCommand_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_runProcess") ) { outValue = _runProcess_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"formatMessage") ) { outValue = formatMessage_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"combineCommand") ) { outValue = combineCommand_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"runProcessLine") ) { outValue = runProcessLine_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"runProcessThreaded") ) { outValue = runProcessThreaded_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ProcessManager_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *ProcessManager_obj_sStaticStorageInfo = 0;
#endif

::hx::Class ProcessManager_obj::__mClass;

static ::String ProcessManager_obj_sStaticFields[] = {
	HX_("dup",bf,47,4c,00),
	HX_("combineCommand",8c,4c,10,3d),
	HX_("formatMessage",50,33,2a,cf),
	HX_("runCommand",40,01,ea,eb),
	HX_("readStderr",98,0a,68,01),
	HX_("readStdout",c1,a3,6f,01),
	HX_("runProcess",64,32,c7,5b),
	HX_("runProcessLine",78,78,e6,1a),
	HX_("_runCommand",5f,ce,73,be),
	HX_("_runProcess",83,ff,50,2e),
	HX_("runProcessThreaded",2d,8c,6d,2d),
	::String(null())
};

void ProcessManager_obj::__register()
{
	ProcessManager_obj _hx_dummy;
	ProcessManager_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ProcessManager",de,67,75,70);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ProcessManager_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ProcessManager_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ProcessManager_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ProcessManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ProcessManager_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

