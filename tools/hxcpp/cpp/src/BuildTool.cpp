// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_BuildTool
#include <BuildTool.h>
#endif
#ifndef INCLUDED_CompileCache
#include <CompileCache.h>
#endif
#ifndef INCLUDED_Compiler
#include <Compiler.h>
#endif
#ifndef INCLUDED_CopyFile
#include <CopyFile.h>
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_File
#include <File.h>
#endif
#ifndef INCLUDED_FileGroup
#include <FileGroup.h>
#endif
#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_Linker
#include <Linker.h>
#endif
#ifndef INCLUDED_Log
#include <Log.h>
#endif
#ifndef INCLUDED_Manifester
#include <Manifester.h>
#endif
#ifndef INCLUDED_PathManager
#include <PathManager.h>
#endif
#ifndef INCLUDED_Prelinker
#include <Prelinker.h>
#endif
#ifndef INCLUDED_ProcessManager
#include <ProcessManager.h>
#endif
#ifndef INCLUDED_Profile
#include <Profile.h>
#endif
#ifndef INCLUDED_Setup
#include <Setup.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Stripper
#include <Stripper.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_Target
#include <Target.h>
#endif
#ifndef INCLUDED_ThreadPool
#include <ThreadPool.h>
#endif
#ifndef INCLUDED_Tools
#include <Tools.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_haxe__CallStack_CallStack_Impl_
#include <haxe/_CallStack/CallStack_Impl_.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_AttribAccess_Impl_
#include <haxe/xml/_Access/AttribAccess_Impl_.h>
#endif
#ifndef INCLUDED_haxe_xml__Access_HasAttribAccess_Impl_
#include <haxe/xml/_Access/HasAttribAccess_Impl_.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_sys_io_Process
#include <sys/io/Process.h>
#endif
#ifndef INCLUDED_sys_thread_Mutex
#include <sys/thread/Mutex.h>
#endif
#ifndef INCLUDED_sys_thread_Tls
#include <sys/thread/Tls.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_101_new,"BuildTool","new",0xe50a4d78,"BuildTool.new","BuildTool.hx",101,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_314_pushFile,"BuildTool","pushFile",0x8ee20d5e,"BuildTool.pushFile","BuildTool.hx",314,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_321_popFile,"BuildTool","popFile",0x9e4dddc5,"BuildTool.popFile","BuildTool.hx",321,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_367_buildTarget,"BuildTool","buildTarget",0x08fb2e37,"BuildTool.buildTarget","BuildTool.hx",367,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_445_buildTarget,"BuildTool","buildTarget",0x08fb2e37,"BuildTool.buildTarget","BuildTool.hx",445,0x44c208f8)
static const ::String _hx_array_data_8f107186_22[] = {
	HX_("#ifndef HXCPP_CONFIG_INCLUDED",04,a4,07,b2),HX_("#define HXCPP_CONFIG_INCLUDED",0b,ad,30,51),
};
static const bool _hx_array_data_8f107186_23[] = {
	1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_559_buildTarget,"BuildTool","buildTarget",0x08fb2e37,"BuildTool.buildTarget","BuildTool.hx",559,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_615_buildTarget,"BuildTool","buildTarget",0x08fb2e37,"BuildTool.buildTarget","BuildTool.hx",615,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_778_linkNvccFiles,"BuildTool","linkNvccFiles",0xd790702d,"BuildTool.linkNvccFiles","BuildTool.hx",778,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_825_cleanTarget,"BuildTool","cleanTarget",0xa6217ad2,"BuildTool.cleanTarget","BuildTool.hx",825,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_863_createCompiler,"BuildTool","createCompiler",0xfd8f08a3,"BuildTool.createCompiler","BuildTool.hx",863,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_927_loadNvccXml,"BuildTool","loadNvccXml",0x50ef6161,"BuildTool.loadNvccXml","BuildTool.hx",927,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_951_createFileGroup,"BuildTool","createFileGroup",0xe21acd9f,"BuildTool.createFileGroup","BuildTool.hx",951,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_1068_createLinker,"BuildTool","createLinker",0x470742eb,"BuildTool.createLinker","BuildTool.hx",1068,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_1109_createPrelinker,"BuildTool","createPrelinker",0x5caff9c6,"BuildTool.createPrelinker","BuildTool.hx",1109,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_1130_createManifester,"BuildTool","createManifester",0xa4108fe0,"BuildTool.createManifester","BuildTool.hx",1130,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_1150_createStripper,"BuildTool","createStripper",0x5d3fc209,"BuildTool.createStripper","BuildTool.hx",1150,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_1167_createTarget,"BuildTool","createTarget",0xe14f5355,"BuildTool.createTarget","BuildTool.hx",1167,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_1252_defined,"BuildTool","defined",0x00df20e1,"BuildTool.defined","BuildTool.hx",1252,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_1260_parseBool,"BuildTool","parseBool",0xfaf73515,"BuildTool.parseBool","BuildTool.hx",1260,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_1264_findLocalIncludeFile,"BuildTool","findLocalIncludeFile",0x766d235a,"BuildTool.findLocalIncludeFile","BuildTool.hx",1264,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_1297_findIncludeFile,"BuildTool","findIncludeFile",0xe8fc1e23,"BuildTool.findIncludeFile","BuildTool.hx",1297,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_1843_setDefaultToolchain,"BuildTool","setDefaultToolchain",0x1d280a82,"BuildTool.setDefaultToolchain","BuildTool.hx",1843,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_2077_setupAppleDirectories,"BuildTool","setupAppleDirectories",0x688bd086,"BuildTool.setupAppleDirectories","BuildTool.hx",2077,0x44c208f8)
static const ::String _hx_array_data_8f107186_67[] = {
	HX_("--print-path",65,04,7e,2e),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_2193_parseXML,"BuildTool","parseXML",0x52b2674c,"BuildTool.parseXML","BuildTool.hx",2193,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_2320_checkToolVersion,"BuildTool","checkToolVersion",0x1faa26a0,"BuildTool.checkToolVersion","BuildTool.hx",2320,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_2328_resolvePath,"BuildTool","resolvePath",0x172a5fc9,"BuildTool.resolvePath","BuildTool.hx",2328,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_2333_include,"BuildTool","include",0xb1cde740,"BuildTool.include","BuildTool.hx",2333,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_2387_dospath,"BuildTool","dospath",0x813cf545,"BuildTool.dospath","BuildTool.hx",2387,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_2419_substitute,"BuildTool","substitute",0x3d396642,"BuildTool.substitute","BuildTool.hx",2419,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_2463_subBool,"BuildTool","subBool",0x6ef602e2,"BuildTool.subBool","BuildTool.hx",2463,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_2469_valid,"BuildTool","valid",0x8eda6814,"BuildTool.valid","BuildTool.hx",2469,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_310_isDefault64,"BuildTool","isDefault64",0x071a860d,"BuildTool.isDefault64","BuildTool.hx",310,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_326_addOutput,"BuildTool","addOutput",0xf6daa31a,"BuildTool.addOutput","BuildTool.hx",326,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_330_getThreadCount,"BuildTool","getThreadCount",0x53751a97,"BuildTool.getThreadCount","BuildTool.hx",330,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_360_setThreadError,"BuildTool","setThreadError",0x9c5b8a04,"BuildTool.setThreadError","BuildTool.hx",360,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_946_setupNvcc,"BuildTool","setupNvcc",0xd5d3151d,"BuildTool.setupNvcc","BuildTool.hx",946,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_1306_getArch,"BuildTool","getArch",0x72ce22a4,"BuildTool.getArch","BuildTool.hx",1306,0x44c208f8)
static const ::String _hx_array_data_8f107186_89[] = {
	HX_("-m",a0,27,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_1346_getMsvcVer,"BuildTool","getMsvcVer",0xee879802,"BuildTool.getMsvcVer","BuildTool.hx",1346,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_1351_keepTemp,"BuildTool","keepTemp",0xe301f221,"BuildTool.keepTemp","BuildTool.hx",1351,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_1357_getNumberOfProcesses,"BuildTool","getNumberOfProcesses",0x01a23aaf,"BuildTool.getNumberOfProcesses","BuildTool.hx",1357,0x44c208f8)
static const ::String _hx_array_data_8f107186_93[] = {
	HX_("/proc/cpuinfo",8c,b9,6d,e9),
};
static const ::String _hx_array_data_8f107186_94[] = {
	HX_("-detailLevel",26,7a,d3,46),HX_("full",8f,e9,c4,43),HX_("SPHardwareDataType",89,47,b4,f0),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_1407_getVersion,"BuildTool","getVersion",0x88d1430a,"BuildTool.getVersion","BuildTool.hx",1407,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_1420_isMsvc,"BuildTool","isMsvc",0x865d7305,"BuildTool.isMsvc","BuildTool.hx",1420,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_1425_isMingw,"BuildTool","isMingw",0x04c50110,"BuildTool.isMingw","BuildTool.hx",1425,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_1430_getNvcc,"BuildTool","getNvcc",0x7b68f1b6,"BuildTool.getNvcc","BuildTool.hx",1430,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_1435_getNvccLinkFlags,"BuildTool","getNvccLinkFlags",0xf8e06057,"BuildTool.getNvccLinkFlags","BuildTool.hx",1435,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_1440_getNvccFlags,"BuildTool","getNvccFlags",0x883ab5b1,"BuildTool.getNvccFlags","BuildTool.hx",1440,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_1444_copy,"BuildTool","copy",0x7cbbb39d,"BuildTool.copy","BuildTool.hx",1444,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_1460_main,"BuildTool","main",0x834d3021,"BuildTool.main","BuildTool.hx",1460,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_1473_runMain,"BuildTool","runMain",0x356a363c,"BuildTool.runMain","BuildTool.hx",1473,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_1804_printUsage,"BuildTool","printUsage",0xbf3f879c,"BuildTool.printUsage","BuildTool.hx",1804,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_1827_printBanner,"BuildTool","printBanner",0xaaf5eb11,"BuildTool.printBanner","BuildTool.hx",1827,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_2366_set64,"BuildTool","set64",0xd7516a78,"BuildTool.set64","BuildTool.hx",2366,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_48_boot,"BuildTool","boot",0x7c127c1a,"BuildTool.boot","BuildTool.hx",48,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_72_boot,"BuildTool","boot",0x7c127c1a,"BuildTool.boot","BuildTool.hx",72,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_73_boot,"BuildTool","boot",0x7c127c1a,"BuildTool.boot","BuildTool.hx",73,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_74_boot,"BuildTool","boot",0x7c127c1a,"BuildTool.boot","BuildTool.hx",74,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_76_boot,"BuildTool","boot",0x7c127c1a,"BuildTool.boot","BuildTool.hx",76,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_77_boot,"BuildTool","boot",0x7c127c1a,"BuildTool.boot","BuildTool.hx",77,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_78_boot,"BuildTool","boot",0x7c127c1a,"BuildTool.boot","BuildTool.hx",78,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_79_boot,"BuildTool","boot",0x7c127c1a,"BuildTool.boot","BuildTool.hx",79,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_80_boot,"BuildTool","boot",0x7c127c1a,"BuildTool.boot","BuildTool.hx",80,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_81_boot,"BuildTool","boot",0x7c127c1a,"BuildTool.boot","BuildTool.hx",81,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_82_boot,"BuildTool","boot",0x7c127c1a,"BuildTool.boot","BuildTool.hx",82,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_83_boot,"BuildTool","boot",0x7c127c1a,"BuildTool.boot","BuildTool.hx",83,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_86_boot,"BuildTool","boot",0x7c127c1a,"BuildTool.boot","BuildTool.hx",86,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_88_boot,"BuildTool","boot",0x7c127c1a,"BuildTool.boot","BuildTool.hx",88,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_89_boot,"BuildTool","boot",0x7c127c1a,"BuildTool.boot","BuildTool.hx",89,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_90_boot,"BuildTool","boot",0x7c127c1a,"BuildTool.boot","BuildTool.hx",90,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_91_boot,"BuildTool","boot",0x7c127c1a,"BuildTool.boot","BuildTool.hx",91,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_93_boot,"BuildTool","boot",0x7c127c1a,"BuildTool.boot","BuildTool.hx",93,0x44c208f8)
HX_LOCAL_STACK_FRAME(_hx_pos_af91bcc8ec9a333f_94_boot,"BuildTool","boot",0x7c127c1a,"BuildTool.boot","BuildTool.hx",94,0x44c208f8)

void BuildTool_obj::__construct(::String inJob, ::haxe::ds::StringMap inDefines,::Array< ::String > inTargets,::Array< ::String > inIncludePath,::Array< ::String > inDirtyList){
            	HX_GC_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_101_new)
HXLINE( 102)		this->mDefines = inDefines;
HXLINE( 103)		this->mFileGroups =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 104)		this->mCompiler = null();
HXLINE( 105)		this->mStripper = null();
HXLINE( 106)		this->mTargets =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 107)		this->mPrelinkers =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 108)		this->mLinkers =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 109)		this->mCurrentIncludeFile = HX_("",00,00,00,00);
HXLINE( 110)		this->mFileStack = ::Array_obj< ::String >::__new(0);
HXLINE( 111)		this->mCopyFiles = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 112)		this->mIncludePath = inIncludePath;
HXLINE( 113)		this->mPragmaOnce =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 114)		this->mMagicLibs = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 115)		this->mNvccFlags = ::Array_obj< ::String >::__new(0);
HXLINE( 116)		this->mNvccLinkFlags = ::Array_obj< ::String >::__new(0);
HXLINE( 117)		this->mMakefile = HX_("",00,00,00,00);
HXLINE( 118)		this->mDirtyList = inDirtyList;
HXLINE( 120)		if ((inJob != HX_("cache",42,9a,14,41))) {
HXLINE( 125)			this->mMakefile = inJob;
HXLINE( 126)			bool _hx_tmp;
HXDLIN( 126)			if (!(::PathManager_obj::isAbsolute(this->mMakefile))) {
HXLINE( 126)				_hx_tmp = ::sys::FileSystem_obj::exists(this->mMakefile);
            			}
            			else {
HXLINE( 126)				_hx_tmp = false;
            			}
HXDLIN( 126)			if (_hx_tmp) {
HXLINE( 127)				this->mMakefile = ::sys::FileSystem_obj::fullPath(this->mMakefile);
            			}
HXLINE( 128)			 ::haxe::ds::StringMap _hx_tmp1 = this->mDefines;
HXDLIN( 128)			_hx_tmp1->set(HX_("HXCPP_BUILD_DIR",b0,81,aa,45),::haxe::io::Path_obj::addTrailingSlash(::haxe::io::Path_obj::directory(this->mMakefile)));
            		}
HXLINE( 132)		::BuildTool_obj::instance = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 134)		this->m64 = this->mDefines->exists(HX_("HXCPP_M64",3f,ff,fb,2a));
HXLINE( 135)		this->m32 = this->mDefines->exists(HX_("HXCPP_M32",a0,fc,fb,2a));
HXLINE( 136)		this->arm64 = this->mDefines->exists(HX_("HXCPP_ARM64",ee,b7,2f,0b));
HXLINE( 137)		bool _hx_tmp2;
HXDLIN( 137)		if ((this->m64 == this->m32)) {
HXLINE( 137)			_hx_tmp2 = !(this->arm64);
            		}
            		else {
HXLINE( 137)			_hx_tmp2 = false;
            		}
HXDLIN( 137)		if (_hx_tmp2) {
HXLINE( 139)			::String arch = ::BuildTool_obj::getArch();
HXLINE( 142)			this->m64 = (arch == HX_("m64",eb,e4,52,00));
HXLINE( 143)			this->m32 = (arch == HX_("m32",4c,e2,52,00));
HXLINE( 144)			this->arm64 = (arch == HX_("arm64",9a,7c,8b,25));
HXLINE( 145)			::String _hx_tmp3;
HXDLIN( 145)			if (this->m32) {
HXLINE( 145)				_hx_tmp3 = HX_("HXCPP_M64",3f,ff,fb,2a);
            			}
            			else {
HXLINE( 145)				_hx_tmp3 = HX_("HXCPP_M32",a0,fc,fb,2a);
            			}
HXDLIN( 145)			this->mDefines->remove(_hx_tmp3);
HXLINE( 146)			::BuildTool_obj::set64(this->mDefines,this->m64,this->arm64);
            		}
HXLINE( 149)		::Profile_obj::setEntry(HX_("parse xml",6a,67,4f,b2));
HXLINE( 151)		this->include(HX_("toolchain/setup.xml",40,d9,2d,68),null(),null(),null());
HXLINE( 155)		if (this->mDefines->exists(HX_("toolchain",a9,1a,50,de))) {
HXLINE( 157)			if (!(this->mDefines->exists(HX_("BINDIR",e6,a6,90,9f)))) {
HXLINE( 159)				 ::haxe::ds::StringMap _hx_tmp4 = this->mDefines;
HXDLIN( 159)				_hx_tmp4->set(HX_("BINDIR",e6,a6,90,9f),::haxe::io::Path_obj::withoutDirectory(::haxe::io::Path_obj::withoutExtension(this->mDefines->get_string(HX_("toolchain",a9,1a,50,de)))));
            			}
HXLINE( 161)			if ( ::EReg_obj::__alloc( HX_CTX ,HX_("window",f0,93,8c,52),HX_("i",69,00,00,00))->match(::BuildTool_obj::os)) {
HXLINE( 162)				this->mDefines->set(HX_("windows_host",e4,91,0a,86),HX_("1",31,00,00,00));
            			}
            		}
            		else {
HXLINE( 165)			this->setDefaultToolchain(this->mDefines);
            		}
HXLINE( 168)		if (this->mDefines->exists(HX_("dll_import",a0,f7,30,b3))) {
HXLINE( 170)			 ::haxe::io::Path path =  ::haxe::io::Path_obj::__alloc( HX_CTX ,this->mDefines->get_string(HX_("dll_import",a0,f7,30,b3)));
HXLINE( 171)			if (!(this->mDefines->exists(HX_("dll_import_include",49,ef,10,b2)))) {
HXLINE( 172)				this->mDefines->set(HX_("dll_import_include",49,ef,10,b2),(path->dir + HX_("/include",d9,f1,39,d2)));
            			}
HXLINE( 173)			if (!(this->mDefines->exists(HX_("dll_import_link",39,98,cd,d8)))) {
HXLINE( 174)				 ::haxe::ds::StringMap _hx_tmp5 = this->mDefines;
HXDLIN( 174)				_hx_tmp5->set(HX_("dll_import_link",39,98,cd,d8),this->mDefines->get(HX_("dll_import",a0,f7,30,b3)));
            			}
            		}
HXLINE( 177)		this->setupAppleDirectories(this->mDefines);
HXLINE( 179)		if (::BuildTool_obj::isMsvc()) {
HXLINE( 181)			this->mDefines->set(HX_("isMsvc",1d,b1,ca,65),HX_("1",31,00,00,00));
HXLINE( 182)			if (::hx::IsGreaterEq( ::Std_obj::parseInt(this->mDefines->get_string(HX_("MSVC_VER",d7,7c,38,e5))),18 )) {
HXLINE( 183)				this->mDefines->set(HX_("MSVC18+",31,39,78,62),HX_("1",31,00,00,00));
            			}
            		}
HXLINE( 186)		this->include(HX_("toolchain/finish-setup.xml",12,6d,6a,56),null(),false,null());
HXLINE( 189)		if ((this->mMakefile != HX_("",00,00,00,00))) {
HXLINE( 191)			this->pushFile(this->mMakefile,HX_("makefile",6a,97,80,4f),null());
HXLINE( 192)			::String make_contents = HX_("",00,00,00,00);
HXLINE( 193)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 194)				make_contents = ::sys::io::File_obj::getContent(this->mMakefile);
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE( 195)					{
HXLINE( 195)						null();
            					}
HXLINE( 196)					::Log_obj::error(((HX_("Could not open build file \"",7a,5b,bf,72) + this->mMakefile) + HX_("\"",22,00,00,00)),null(),null(),null());
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 202)			 ::Xml xml_slow = ::Xml_obj::parse(make_contents);
HXLINE( 203)			 ::Xml x = xml_slow->firstElement();
HXDLIN( 203)			bool _hx_tmp6;
HXDLIN( 203)			if ((x->nodeType != ::Xml_obj::Document)) {
HXLINE( 203)				_hx_tmp6 = (x->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE( 203)				_hx_tmp6 = false;
            			}
HXDLIN( 203)			if (_hx_tmp6) {
HXLINE( 203)				HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(x->nodeType)));
            			}
HXDLIN( 203)			 ::Xml xml = x;
HXLINE( 205)			this->parseXML(xml,HX_("",00,00,00,00),false);
HXLINE( 206)			this->popFile();
HXLINE( 208)			this->include(((HX_("toolchain/",66,39,c7,a7) + this->mDefines->get(HX_("toolchain",a9,1a,50,de))) + HX_("-toolchain.xml",45,09,58,57)),null(),false,null());
HXLINE( 211)			if (this->mDefines->exists(HX_("HXCPP_CONFIG",ce,a0,c9,d1))) {
HXLINE( 212)				this->include(this->mDefines->get_string(HX_("HXCPP_CONFIG",ce,a0,c9,d1)),HX_("exes",a1,f3,1d,43),true,null());
            			}
            		}
HXLINE( 215)		{
HXLINE( 215)			 ::Dynamic group = this->mFileGroups->iterator();
HXDLIN( 215)			while(( (bool)(group->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 215)				 ::FileGroup group1 = ( ( ::FileGroup)(group->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 216)				group1->filter(this->mDefines);
            			}
            		}
HXLINE( 218)		if (::Log_obj::verbose) {
HXLINE( 218)			::Log_obj::println(HX_("",00,00,00,00));
            		}
HXLINE( 222)		::BuildTool_obj::getThreadCount();
HXLINE( 224)		bool cached = ::CompileCache_obj::init(this->mDefines);
HXLINE( 226)		::Profile_obj::setEntry(HX_("setup cache",5f,50,a1,b8));
HXLINE( 228)		if ((inJob == HX_("cache",42,9a,14,41))) {
HXLINE( 230)			if (!(cached)) {
HXLINE( 232)				::Log_obj::error(HX_("HXCPP_COMPILE_CACHE is not set",d5,25,c7,ca),null(),null(),null());
            			}
HXLINE( 234)			::String _hx_switch_0 = inTargets->__get(0);
            			if (  (_hx_switch_0==HX_("clear",8d,71,5b,48)) ){
HXLINE( 253)				::CompileCache_obj::clear(0,0,true,inTargets->__get(1));
HXDLIN( 253)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("days",97,5a,63,42)) ){
HXLINE( 237)				 ::Dynamic days;
HXDLIN( 237)				if (::hx::IsNull( inTargets->__get(1) )) {
HXLINE( 237)					days = null();
            				}
            				else {
HXLINE( 237)					days = ::Std_obj::parseInt(inTargets->__get(1));
            				}
HXLINE( 238)				if (::hx::IsNull( days )) {
HXLINE( 240)					::Log_obj::error(HX_("cache days - expected day count",41,51,78,08),null(),null(),null());
HXLINE( 241)					::Tools_obj::exit(1);
            				}
HXLINE( 243)				::CompileCache_obj::clear(( (int)(days) ),0,true,null());
HXLINE( 236)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("details",c2,dc,56,ab)) ){
HXLINE( 255)				::CompileCache_obj::list(true,inTargets->__get(1));
HXDLIN( 255)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("list",5e,1c,b3,47)) ){
HXLINE( 254)				::CompileCache_obj::list(false,inTargets->__get(1));
HXDLIN( 254)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("resize",f4,59,7b,08)) ){
HXLINE( 245)				 ::Dynamic mb;
HXDLIN( 245)				if (::hx::IsNull( inTargets->__get(1) )) {
HXLINE( 245)					mb = null();
            				}
            				else {
HXLINE( 245)					mb = ::Std_obj::parseInt(inTargets->__get(1));
            				}
HXLINE( 246)				if (::hx::IsNull( mb )) {
HXLINE( 248)					::Log_obj::error(HX_("cache resize - expected megabyte count",d0,29,da,84),null(),null(),null());
HXLINE( 249)					::Tools_obj::exit(1);
            				}
HXLINE( 251)				::CompileCache_obj::clear(0,( (int)(mb) ),true,inTargets->__get(2));
HXLINE( 244)				goto _hx_goto_1;
            			}
            			/* default */{
HXLINE( 257)				::BuildTool_obj::printUsage();
HXLINE( 258)				::Tools_obj::exit(1);
            			}
            			_hx_goto_1:;
HXLINE( 260)			return;
            		}
HXLINE( 263)		if (cached) {
HXLINE( 265)			 ::Dynamic cacheSize;
HXDLIN( 265)			if (this->mDefines->exists(HX_("HXCPP_CACHE_MB",9e,41,2f,88))) {
HXLINE( 265)				cacheSize = ::Std_obj::parseInt(this->mDefines->get_string(HX_("HXCPP_CACHE_MB",9e,41,2f,88)));
            			}
            			else {
HXLINE( 265)				cacheSize = 1000;
            			}
HXLINE( 266)			bool _hx_tmp7;
HXDLIN( 266)			if (::hx::IsNotNull( cacheSize )) {
HXLINE( 266)				_hx_tmp7 = ::hx::IsGreater( cacheSize,0 );
            			}
            			else {
HXLINE( 266)				_hx_tmp7 = false;
            			}
HXDLIN( 266)			if (_hx_tmp7) {
HXLINE( 267)				::CompileCache_obj::clear(0,( (int)(cacheSize) ),false,null());
            			}
            		}
HXLINE( 270)		if (::Log_obj::verbose) {
HXLINE( 270)			::Log_obj::println(HX_("",00,00,00,00));
            		}
HXLINE( 272)		if (inTargets->remove(HX_("clear",8d,71,5b,48))) {
HXLINE( 274)			::Profile_obj::setEntry(HX_("clear",8d,71,5b,48));
HXLINE( 275)			{
HXLINE( 275)				 ::Dynamic target = this->mTargets->keys();
HXDLIN( 275)				while(( (bool)(target->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 275)					::String target1 = ( (::String)(target->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 276)					this->cleanTarget(target1,false);
            				}
            			}
            		}
HXLINE( 279)		if (inTargets->remove(HX_("clean",89,71,5b,48))) {
HXLINE( 281)			::Profile_obj::setEntry(HX_("clean",89,71,5b,48));
HXLINE( 282)			{
HXLINE( 282)				 ::Dynamic target2 = this->mTargets->keys();
HXDLIN( 282)				while(( (bool)(target2->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 282)					::String target3 = ( (::String)(target2->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 283)					this->cleanTarget(target3,true);
            				}
            			}
            		}
HXLINE( 286)		bool _hx_tmp8;
HXDLIN( 286)		if (::hx::IsNotNull( ::BuildTool_obj::destination )) {
HXLINE( 286)			_hx_tmp8 = (inTargets->length != 1);
            		}
            		else {
HXLINE( 286)			_hx_tmp8 = false;
            		}
HXDLIN( 286)		if (_hx_tmp8) {
HXLINE( 288)			::Log_obj::warn((HX_("Exactly one target must be specified with 'destination'.  Specified:",bb,7c,80,3e) + ::Std_obj::string(inTargets)),null(),null());
HXLINE( 289)			::BuildTool_obj::destination = null();
            		}
HXLINE( 292)		::Profile_obj::setEntry(HX_("build",2e,db,ea,ba));
HXLINE( 293)		{
HXLINE( 293)			int _g1 = 0;
HXDLIN( 293)			while((_g1 < inTargets->length)){
HXLINE( 293)				::String target4 = inTargets->__get(_g1);
HXDLIN( 293)				_g1 = (_g1 + 1);
HXLINE( 294)				this->buildTarget(target4,::BuildTool_obj::destination);
            			}
            		}
HXLINE( 296)		::String linkOutputs = this->mDefines->get_string(HX_("HXCPP_LINK_OUTPUTS",b9,58,64,de));
HXLINE( 297)		if (::hx::IsNotNull( linkOutputs )) {
HXLINE( 298)			::sys::io::File_obj::saveContent(linkOutputs,(::BuildTool_obj::outputs->join(HX_("\n",0a,00,00,00)) + HX_("\n",0a,00,00,00)));
            		}
HXLINE( 299)		if (::Log_obj::verbose) {
HXLINE( 301)			int _g2 = 0;
HXDLIN( 301)			::Array< ::String > _g3 = ::BuildTool_obj::outputs;
HXDLIN( 301)			while((_g2 < _g3->length)){
HXLINE( 301)				::String out = _g3->__get(_g2);
HXDLIN( 301)				_g2 = (_g2 + 1);
HXLINE( 302)				::Log_obj::info(HX_("",00,00,00,00),(HX_(" generated ",d1,15,2e,6a) + out));
            			}
            		}
HXLINE( 305)		if ((::BuildTool_obj::threadExitCode != 0)) {
HXLINE( 306)			::Tools_obj::exit(::BuildTool_obj::threadExitCode);
            		}
            	}

Dynamic BuildTool_obj::__CreateEmpty() { return new BuildTool_obj; }

void *BuildTool_obj::_hx_vtable = 0;

Dynamic BuildTool_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BuildTool_obj > _hx_result = new BuildTool_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool BuildTool_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5253e6c6;
}

void BuildTool_obj::pushFile(::String inFilename,::String inWhy,::String __o_inSection){
            		::String inSection = __o_inSection;
            		if (::hx::IsNull(__o_inSection)) inSection = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_314_pushFile)
HXLINE( 315)		::String _hx_tmp;
HXDLIN( 315)		if ((inSection == HX_("",00,00,00,00))) {
HXLINE( 315)			_hx_tmp = HX_("",00,00,00,00);
            		}
            		else {
HXLINE( 315)			_hx_tmp = ((HX_(" \x1b""[3m(section \"",59,c1,f2,7e) + inSection) + HX_("\")\x1b""[0m",64,07,ae,45));
            		}
HXDLIN( 315)		::Log_obj::info(HX_("",00,00,00,00),((((HX_(" - \x1b""[1mParsing ",ff,60,2b,a0) + inWhy) + HX_(":\x1b""[0m ",e9,cc,cf,f8)) + inFilename) + _hx_tmp));
HXLINE( 316)		this->mFileStack->push(inFilename);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BuildTool_obj,pushFile,(void))

void BuildTool_obj::popFile(){
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_321_popFile)
HXDLIN( 321)		this->mFileStack->pop();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BuildTool_obj,popFile,(void))

void BuildTool_obj::buildTarget(::String inTarget,::String inDestination){
            	HX_GC_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_367_buildTarget)
HXDLIN( 367)		 ::BuildTool _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 369)		 ::Dynamic dependDebug = null();
HXLINE( 372)		if (!(this->mTargets->exists(inTarget))) {
HXLINE( 374)			::Log_obj::error(((HX_("Could not find build target \"",00,1f,4a,d9) + inTarget) + HX_("\"",22,00,00,00)),null(),null(),null());
            		}
HXLINE( 377)		if (::hx::IsNull( this->mCompiler )) {
HXLINE( 379)			::Log_obj::error(HX_("No compiler defined for the current build target",29,25,e1,27),null(),null(),null());
            		}
HXLINE( 383)		 ::Target target = ( ( ::Target)(this->mTargets->get(inTarget)) );
HXLINE( 384)		target->checkError();
HXLINE( 386)		{
HXLINE( 386)			int _g = 0;
HXDLIN( 386)			::Array< ::String > _g1 = target->mSubTargets;
HXDLIN( 386)			while((_g < _g1->length)){
HXLINE( 386)				::String sub = _g1->__get(_g);
HXDLIN( 386)				_g = (_g + 1);
HXLINE( 387)				this->buildTarget(sub,null());
            			}
            		}
HXLINE( 389)		 ::ThreadPool threadPool = ::BuildTool_obj::sThreadPool;
HXLINE( 392)		::PathManager_obj::resetDirectoryCache();
HXLINE( 393)		::String restoreDir = HX_("",00,00,00,00);
HXLINE( 394)		if ((target->mBuildDir != HX_("",00,00,00,00))) {
HXLINE( 396)			restoreDir = ::Sys_obj::getCwd();
HXLINE( 397)			::Log_obj::info(HX_("",00,00,00,00),(HX_(" - \x1b""[1mChanging directory:\x1b""[0m ",b2,c4,d8,6b) + target->mBuildDir));
HXLINE( 398)			::Sys_obj::setCwd(target->mBuildDir);
            		}
HXLINE( 401)		::BuildTool_obj::targetKey = (inTarget + target->getKey());
HXLINE( 403)		::Array< ::String > objs = ::Array_obj< ::String >::__new();
HXLINE( 405)		this->mCompiler->objToAbsolute();
HXLINE( 407)		if ((target->mFileGroups->length > 0)) {
HXLINE( 408)			::PathManager_obj::mkdir(this->mCompiler->mObjDir,null());
            		}
HXLINE( 410)		::String baseDir = ::Sys_obj::getCwd();
HXLINE( 411)		{
HXLINE( 411)			int _g2 = 0;
HXDLIN( 411)			::Array< ::Dynamic> _g3 = target->mFileGroups;
HXDLIN( 411)			while((_g2 < _g3->length)){
HXLINE( 411)				 ::FileGroup group = _g3->__get(_g2).StaticCast<  ::FileGroup >();
HXDLIN( 411)				_g2 = (_g2 + 1);
HXLINE( 413)				bool useCache;
HXDLIN( 413)				if (::CompileCache_obj::hasCache) {
HXLINE( 413)					useCache = group->mUseCache;
            				}
            				else {
HXLINE( 413)					useCache = false;
            				}
HXLINE( 414)				bool _hx_tmp;
HXDLIN( 414)				if (!(useCache)) {
HXLINE( 414)					_hx_tmp = group->mUseCache;
            				}
            				else {
HXLINE( 414)					_hx_tmp = false;
            				}
HXDLIN( 414)				if (_hx_tmp) {
HXLINE( 415)					::Log_obj::info(HX_("",00,00,00,00),HX_("Ignoring compiler cache because HXCPP_COMPILE_CACHE is not valid.",f7,0f,0c,17));
            				}
HXLINE( 417)				::Array< ::String > groupObjs = ::Array_obj< ::String >::__new();
HXLINE( 419)				bool _hx_tmp1;
HXDLIN( 419)				if ((group->mDir != HX_(".",2e,00,00,00))) {
HXLINE( 419)					_hx_tmp1 = group->mSetImportDir;
            				}
            				else {
HXLINE( 419)					_hx_tmp1 = false;
            				}
HXDLIN( 419)				if (_hx_tmp1) {
HXLINE( 420)					::Sys_obj::setCwd(::PathManager_obj::combine(baseDir,group->mDir));
            				}
HXLINE( 421)				group->checkOptions(this->mCompiler->mObjDir);
HXLINE( 423)				group->checkDependsExist();
HXLINE( 425)				 ::Compiler _hx_tmp2 = this->mCompiler;
HXDLIN( 425)				if (!(_hx_tmp2->initPrecompile(this->mDefines->get_string(HX_("USE_PRECOMPILED_HEADERS",e3,16,8a,4c))))) {
HXLINE( 426)					group->dontPrecompile();
            				}
HXLINE( 428)				group->preBuild();
HXLINE( 430)				::Array< ::Dynamic> to_be_compiled = ::Array_obj< ::Dynamic>::__new();
HXLINE( 432)				bool cached;
HXDLIN( 432)				if (useCache) {
HXLINE( 432)					cached = this->mCompiler->createCompilerVersion(group);
            				}
            				else {
HXLINE( 432)					cached = false;
            				}
HXLINE( 434)				::Array< bool > inList = ::Array_obj< bool >::__new();
HXLINE( 435)				bool groupIsOutOfDate;
HXDLIN( 435)				if ((this->mDirtyList->indexOf(group->mId,null()) < 0)) {
HXLINE( 435)					groupIsOutOfDate = (this->mDirtyList->indexOf(HX_("all",21,f9,49,00),null()) >= 0);
            				}
            				else {
HXLINE( 435)					groupIsOutOfDate = true;
            				}
HXLINE( 437)				if (useCache) {
HXLINE( 439)					::Profile_obj::push(HX_("compute hash",17,09,79,86));
HXLINE( 440)					bool _hx_tmp3;
HXDLIN( 440)					bool _hx_tmp4;
HXDLIN( 440)					if (useCache) {
HXLINE( 440)						_hx_tmp4 = group->hasFiles();
            					}
            					else {
HXLINE( 440)						_hx_tmp4 = false;
            					}
HXDLIN( 440)					if (_hx_tmp4) {
HXLINE( 440)						_hx_tmp3 = ::hx::IsNotNull( threadPool );
            					}
            					else {
HXLINE( 440)						_hx_tmp3 = false;
            					}
HXDLIN( 440)					if (_hx_tmp3) {
            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,::Array< ::String >,names, ::FileGroup,group) HXARGC(1)
            						void _hx_run(int tid){
            							HX_GC_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_445_buildTarget)
HXLINE( 446)							 ::haxe::ds::StringMap localCache =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 448)							while((::BuildTool_obj::threadExitCode == 0)){
HXLINE( 450)								int id = ::BuildTool_obj::sThreadPool->getNextIndex();
HXLINE( 451)								if ((id < 0)) {
HXLINE( 452)									goto _hx_goto_12;
            								}
HXLINE( 454)								( ( ::File)(group->mFiles->get(names->__get(id))) )->computeDependHash(localCache);
            							}
            							_hx_goto_12:;
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE( 442)						::Log_obj::initMultiThreaded();
HXLINE( 443)						::Array< ::String > _g4 = ::Array_obj< ::String >::__new(0);
HXDLIN( 443)						{
HXLINE( 443)							 ::Dynamic x = group->mFiles->__Field(HX_("iterator",ee,49,9a,93),::hx::paccDynamic)();
HXDLIN( 443)							while(( (bool)(x->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 443)								 ::File x1 = ( ( ::File)(x->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN( 443)								_g4->push(x1->mName);
            							}
            						}
HXDLIN( 443)						::Array< ::String > names = ::Lambda_obj::array(_g4);
HXLINE( 444)						threadPool->setArrayCount(names->length);
HXLINE( 445)						threadPool->runJob( ::Dynamic(new _hx_Closure_0(names,group)));
            					}
            					else {
HXLINE( 460)						 ::Dynamic file = group->mFiles->iterator();
HXDLIN( 460)						while(( (bool)(file->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 460)							 ::File file1 = ( ( ::File)(file->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 461)							file1->computeDependHash(null());
            						}
            					}
HXLINE( 463)					::Profile_obj::pop();
            				}
HXLINE( 467)				{
HXLINE( 467)					 ::Dynamic file2 = group->mFiles->iterator();
HXDLIN( 467)					while(( (bool)(file2->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 467)						 ::File file3 = ( ( ::File)(file2->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 469)						::String obj_name = this->mCompiler->getCachedObjName(file3);
HXLINE( 470)						groupObjs->push(obj_name);
HXLINE( 471)						bool outOfDate;
HXDLIN( 471)						if (!(groupIsOutOfDate)) {
HXLINE( 471)							outOfDate = file3->isOutOfDate(obj_name,dependDebug);
            						}
            						else {
HXLINE( 471)							outOfDate = true;
            						}
HXLINE( 472)						if (outOfDate) {
HXLINE( 474)							if (::hx::IsNotNull( dependDebug )) {
HXLINE( 475)								dependDebug(this->mCompiler->getCacheString(file3));
            							}
HXLINE( 476)							to_be_compiled->push(file3);
            						}
HXLINE( 478)						inList->push(outOfDate);
            					}
            				}
HXLINE( 480)				bool someCompiled = (to_be_compiled->length > 0);
HXLINE( 482)				::Array< ::Dynamic> pchStamp = ::Array_obj< ::Dynamic>::__new(1)->init(0,null());
HXLINE( 483)				if ((group->mPrecompiledHeader != HX_("",00,00,00,00))) {
HXLINE( 485)					::Profile_obj::push(HX_("pch",15,53,55,00));
HXLINE( 487)					bool obj;
HXDLIN( 487)					if (!(cached)) {
HXLINE( 487)						obj = (to_be_compiled->length == 0);
            					}
            					else {
HXLINE( 487)						obj = true;
            					}
HXDLIN( 487)					::String obj1 = this->mCompiler->precompile(group,obj);
HXLINE( 488)					if (::hx::IsNotNull( obj1 )) {
HXLINE( 490)						pchStamp[0] = ( ( ::Date)(::sys::FileSystem_obj::stat(obj1)->__Field(HX_("mtime",fa,06,aa,0f),::hx::paccDynamic)) )->getTime();
HXLINE( 491)						groupObjs->push(obj1);
            					}
HXLINE( 514)					::Profile_obj::pop();
            				}
HXLINE( 517)				if ((group->mConfig != HX_("",00,00,00,00))) {
HXLINE( 519)					::Array< ::String > lines = ::Array_obj< ::String >::fromData( _hx_array_data_8f107186_22,2);
HXLINE( 521)					::Array< ::String > group1 = group->mCompilerFlags;
HXDLIN( 521)					::Array< ::String > flags = group1->concat(this->mCompiler->getCompilerDefines(HX_("haxe",26,34,08,45)));
HXLINE( 522)					 ::EReg define =  ::EReg_obj::__alloc( HX_CTX ,HX_("^-D([^=]*)=?(.*)",3c,e0,fe,e3),HX_("",00,00,00,00));
HXLINE( 523)					{
HXLINE( 523)						int _g5 = 0;
HXDLIN( 523)						while((_g5 < flags->length)){
HXLINE( 523)							::String flag = flags->__get(_g5);
HXDLIN( 523)							_g5 = (_g5 + 1);
HXLINE( 525)							if (define->match(flag)) {
HXLINE( 527)								::String name = define->matched(1);
HXLINE( 528)								::String val = define->matched(2);
HXLINE( 529)								lines->push(HX_("",00,00,00,00));
HXLINE( 530)								lines->push(((((HX_("#if !defined(",00,f8,09,5a) + name) + HX_(") && !defined(NO_",87,fc,08,b9)) + name) + HX_(")",29,00,00,00)));
HXLINE( 531)								lines->push((((HX_("#define ",c2,d1,ed,72) + name) + HX_(" ",20,00,00,00)) + val));
HXLINE( 532)								lines->push(HX_("#endif",75,ed,f7,6e));
            							}
            						}
            					}
HXLINE( 536)					lines->push(HX_("",00,00,00,00));
HXLINE( 537)					lines->push(HX_("#include <hxcpp.h>",12,61,1d,87));
HXLINE( 538)					lines->push(HX_("",00,00,00,00));
HXLINE( 539)					lines->push(HX_("#endif",75,ed,f7,6e));
HXLINE( 540)					lines->push(HX_("",00,00,00,00));
HXLINE( 542)					::String filename;
HXDLIN( 542)					if (this->mDefines->exists(HX_("HXCPP_OUTPUT_CONFIG_NAME",b6,fa,3a,e7))) {
HXLINE( 542)						filename = this->mDefines->get_string(HX_("HXCPP_OUTPUT_CONFIG_NAME",b6,fa,3a,e7));
            					}
            					else {
HXLINE( 542)						filename = ::PathManager_obj::combine(target->mOutputDir,group->mConfig);
            					}
HXLINE( 545)					if (!(::PathManager_obj::isAbsolute(filename))) {
HXLINE( 546)						filename = ::PathManager_obj::combine(::Sys_obj::getCwd(),filename);
            					}
HXLINE( 548)					::String content = lines->join(HX_("\n",0a,00,00,00));
HXLINE( 549)					bool _hx_tmp5;
HXDLIN( 549)					if (::sys::FileSystem_obj::exists(filename)) {
HXLINE( 549)						_hx_tmp5 = (::sys::io::File_obj::getContent(filename) != content);
            					}
            					else {
HXLINE( 549)						_hx_tmp5 = true;
            					}
HXDLIN( 549)					if (_hx_tmp5) {
HXLINE( 550)						::sys::io::File_obj::saveContent(filename,content);
            					}
HXLINE( 551)					::BuildTool_obj::addOutput(HX_("config",c2,56,d2,c7),filename);
            				}
HXLINE( 555)				bool nvcc = group->mNvcc;
HXLINE( 556)				::Array< bool > first = ::Array_obj< bool >::fromData( _hx_array_data_8f107186_23,1);
HXLINE( 557)				 ::Dynamic groupHeader;
HXDLIN( 557)				bool groupHeader1;
HXDLIN( 557)				if (!(::Log_obj::quiet)) {
HXLINE( 557)					groupHeader1 = !(::Log_obj::verbose);
            				}
            				else {
HXLINE( 557)					groupHeader1 = false;
            				}
HXDLIN( 557)				if (groupHeader1) {
            					HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_1, ::BuildTool,_gthis,bool,nvcc, ::FileGroup,group,::Array< bool >,first) HXARGC(0)
            					void _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_559_buildTarget)
HXLINE( 559)						if (first->__get(0)) {
HXLINE( 561)							::BuildTool_obj::groupMutex->acquire();
HXLINE( 562)							if (first->__get(0)) {
HXLINE( 564)								first[0] = false;
HXLINE( 565)								::Log_obj::lock();
HXLINE( 566)								::Log_obj::println(HX_("",00,00,00,00));
HXLINE( 567)								::Log_obj::info(((HX_("\x1b""[33;1mCompiling group: ",5e,3b,76,41) + group->mId) + HX_("\x1b""[0m",1d,fa,1d,12)),null());
HXLINE( 568)								::String message;
HXDLIN( 568)								if (nvcc) {
HXLINE( 568)									message = ::BuildTool_obj::getNvcc();
            								}
            								else {
HXLINE( 568)									message = _gthis->mCompiler->mExe;
            								}
HXDLIN( 568)								::String message1 = ((HX_("\x1b""[1m",fc,fa,1d,12) + message) + HX_("\x1b""[0m",1d,fa,1d,12));
HXLINE( 569)								::Array< ::String > flags = group->mCompilerFlags;
HXLINE( 570)								if (!(nvcc)) {
HXLINE( 571)									flags = flags->concat(_gthis->mCompiler->getFlagStrings());
            								}
            								else {
HXLINE( 573)									flags = flags->concat(::BuildTool_obj::getNvccFlags());
            								}
HXLINE( 575)								{
HXLINE( 575)									int _g = 0;
HXDLIN( 575)									while((_g < flags->length)){
HXLINE( 575)										::String compilerFlag = flags->__get(_g);
HXDLIN( 575)										_g = (_g + 1);
HXLINE( 577)										if (::StringTools_obj::startsWith(compilerFlag,HX_("-D",77,27,00,00))) {
HXLINE( 579)											int index = compilerFlag.indexOf(HX_("(",28,00,00,00),null());
HXLINE( 580)											if ((index > -1)) {
HXLINE( 582)												::String message2 = ((HX_(" \x1b""[1m",1c,8b,f0,7e) + compilerFlag.substr(0,index)) + HX_("\x1b""[0m\x1b""[2m",78,c8,5f,d6));
HXDLIN( 582)												message1 = (message1 + ((message2 + compilerFlag.substr(index,null())) + HX_("\x1b""[0m",1d,fa,1d,12)));
            											}
            											else {
HXLINE( 586)												message1 = (message1 + ((HX_(" \x1b""[1m",1c,8b,f0,7e) + compilerFlag) + HX_("\x1b""[0m",1d,fa,1d,12)));
            											}
            										}
            										else {
HXLINE( 591)											message1 = (message1 + ((HX_(" \x1b""[0m",3d,8a,f0,7e) + compilerFlag) + HX_("\x1b""[0m",1d,fa,1d,12)));
            										}
            									}
            								}
HXLINE( 594)								message1 = (message1 + ((HX_(" \x1b""[2m...\x1b""[0m \x1b""[2mtags=",d9,6d,6b,f8) + ::Std_obj::string(group->mTags.split(HX_(",",2c,00,00,00)))) + HX_("\x1b""[0m",1d,fa,1d,12)));
HXLINE( 595)								::Log_obj::info(message1,null());
HXLINE( 596)								::Log_obj::unlock();
            							}
HXLINE( 598)							::BuildTool_obj::groupMutex->release();
            						}
            					}
            					HX_END_LOCAL_FUNC0((void))

HXLINE( 557)					groupHeader =  ::Dynamic(new _hx_Closure_1(_gthis,nvcc,group,first));
            				}
            				else {
HXLINE( 557)					groupHeader = null();
            				}
HXLINE( 602)				::Profile_obj::push(HX_("compile",73,25,6f,83));
HXLINE( 603)				if (::hx::IsNull( threadPool )) {
HXLINE( 605)					int _g6 = 0;
HXDLIN( 605)					while((_g6 < to_be_compiled->length)){
HXLINE( 605)						 ::File file4 = to_be_compiled->__get(_g6).StaticCast<  ::File >();
HXDLIN( 605)						_g6 = (_g6 + 1);
HXLINE( 606)						this->mCompiler->compile(file4,-1,groupHeader,pchStamp->__get(0));
            					}
            				}
            				else {
            					HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_2, ::Dynamic,groupHeader,::Array< ::Dynamic>,pchStamp, ::ThreadPool,threadPool, ::Compiler,compiler,::Array< ::Dynamic>,to_be_compiled) HXARGC(1)
            					void _hx_run(int threadId){
            						HX_GC_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_615_buildTarget)
HXLINE( 615)						while((::BuildTool_obj::threadExitCode == 0)){
HXLINE( 617)							int index = threadPool->getNextIndex();
HXLINE( 618)							if ((index < 0)) {
HXLINE( 619)								goto _hx_goto_18;
            							}
HXLINE( 620)							 ::File file = to_be_compiled->__get(index).StaticCast<  ::File >();
HXLINE( 622)							compiler->compile(file,threadId,groupHeader,pchStamp->__get(0));
            						}
            						_hx_goto_18:;
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 610)					::Log_obj::initMultiThreaded();
HXLINE( 611)					 ::sys::thread::Mutex mutex = threadPool->mutex;
HXLINE( 612)					 ::Compiler compiler = this->mCompiler;
HXLINE( 613)					threadPool->setArrayCount(to_be_compiled->length);
HXLINE( 614)					threadPool->runJob( ::Dynamic(new _hx_Closure_2(groupHeader,pchStamp,threadPool,compiler,to_be_compiled)));
            				}
HXLINE( 626)				::Profile_obj::pop();
HXLINE( 628)				bool _hx_tmp6;
HXDLIN( 628)				bool _hx_tmp7;
HXDLIN( 628)				if (::CompileCache_obj::hasCache) {
HXLINE( 628)					_hx_tmp7 = group->mAsLibrary;
            				}
            				else {
HXLINE( 628)					_hx_tmp7 = false;
            				}
HXDLIN( 628)				if (_hx_tmp7) {
HXLINE( 628)					_hx_tmp6 = this->mLinkers->exists(HX_("static_link",6b,a0,63,7c));
            				}
            				else {
HXLINE( 628)					_hx_tmp6 = false;
            				}
HXDLIN( 628)				if (_hx_tmp6) {
HXLINE( 630)					::Profile_obj::push(HX_("link libs",74,5b,77,ce));
HXLINE( 631)					 ::Linker linker = ( ( ::Linker)(this->mLinkers->get(HX_("static_link",6b,a0,63,7c))) );
HXLINE( 632)					::String targetDir = this->mCompiler->mObjDir;
HXLINE( 633)					if (useCache) {
HXLINE( 635)						::String targetDir1 = (::CompileCache_obj::compileCache + HX_("/",2f,00,00,00));
HXDLIN( 635)						targetDir = ((targetDir1 + group->getCacheProject()) + HX_("/lib",76,56,63,1f));
HXLINE( 636)						::PathManager_obj::mkdir(targetDir,null());
            					}
HXLINE( 638)					::String libName = (((targetDir + HX_("/",2f,00,00,00)) + this->mCompiler->getTargetPrefix()) + HX_("_",5f,00,00,00));
HXDLIN( 638)					::String libName1 = (libName + group->getCacheProject());
HXLINE( 640)					 ::Target libTarget =  ::Target_obj::__alloc( HX_CTX ,libName1,HX_("linker",e7,e2,a4,ec),HX_("static_link",6b,a0,63,7c));
HXLINE( 641)					linker->link(libTarget,groupObjs,this->mCompiler,::Array_obj< ::String >::__new(0));
HXLINE( 642)					target->mAutoLibs->push(linker->mLastOutName);
HXLINE( 644)					if (group->mAddTwice) {
HXLINE( 645)						target->mLibs->push(linker->mLastOutName);
            					}
HXLINE( 646)					::Profile_obj::pop();
            				}
            				else {
HXLINE( 648)					if (nvcc) {
HXLINE( 650)						::String objDir = this->mCompiler->mObjDir;
HXLINE( 651)						if (group->isCached()) {
HXLINE( 652)							objDir = ::CompileCache_obj::compileCache;
            						}
HXLINE( 653)						::String extraObj = this->linkNvccFiles(objDir,someCompiled,groupObjs,group->mId,this->mCompiler->mExt);
HXLINE( 654)						groupObjs->push(extraObj);
HXLINE( 655)						objs = objs->concat(groupObjs);
            					}
            					else {
HXLINE( 659)						objs = objs->concat(groupObjs);
            					}
            				}
HXLINE( 662)				bool _hx_tmp8;
HXDLIN( 662)				if ((group->mDir != HX_(".",2e,00,00,00))) {
HXLINE( 662)					_hx_tmp8 = group->mSetImportDir;
            				}
            				else {
HXLINE( 662)					_hx_tmp8 = false;
            				}
HXDLIN( 662)				if (_hx_tmp8) {
HXLINE( 663)					::Sys_obj::setCwd(baseDir);
            				}
            			}
            		}
HXLINE( 666)		if ((target->mTool == HX_("linker",e7,e2,a4,ec))) {
HXLINE( 669)			::Profile_obj::push(HX_("linker",e7,e2,a4,ec));
HXLINE( 670)			if (this->mPrelinkers->exists(target->mToolID)) {
HXLINE( 672)				::String result = ( ( ::Prelinker)(this->mPrelinkers->get(target->mToolID)) )->prelink(target,objs,this->mCompiler);
HXLINE( 673)				if ((result != HX_("",00,00,00,00))) {
HXLINE( 674)					objs->push(result);
            				}
            			}
HXLINE( 678)			if (!(this->mLinkers->exists(target->mToolID))) {
HXLINE( 680)				::Log_obj::error(((HX_("Could not find linker for \"",cd,62,68,53) + target->mToolID) + HX_("\"",22,00,00,00)),null(),null(),null());
            			}
HXLINE( 683)			::Array< ::String > extraDeps = ::Array_obj< ::String >::__new(0);
HXLINE( 684)			::String manifest = this->mDefines->get_string(HX_("manifestFile",cb,f9,f7,1d));
HXLINE( 685)			if (::hx::IsNotNull( manifest )) {
HXLINE( 686)				extraDeps->push(manifest);
            			}
HXLINE( 688)			 ::Linker linker1 = ( ( ::Linker)(this->mLinkers->get(target->mToolID)) );
HXLINE( 689)			::String output = linker1->link(target,objs,this->mCompiler,extraDeps);
HXLINE( 691)			if ((output != HX_("",00,00,00,00))) {
HXLINE( 693)				if (::hx::IsNotNull( this->mStripper )) {
HXLINE( 695)					bool _hx_tmp9;
HXDLIN( 695)					if ((target->mToolID != HX_("exe",92,0c,4d,00))) {
HXLINE( 695)						_hx_tmp9 = (target->mToolID == HX_("dll",e4,3f,4c,00));
            					}
            					else {
HXLINE( 695)						_hx_tmp9 = true;
            					}
HXDLIN( 695)					if (_hx_tmp9) {
HXLINE( 697)						if (this->mDefines->exists(HX_("HXCPP_DEBUG_LINK_AND_STRIP",03,6f,52,6d))) {
HXLINE( 699)							::String unstripped = linker1->getUnstrippedFilename(this->mCompiler->mObjDir,target);
HXLINE( 701)							::Log_obj::info(HX_("",00,00,00,00),(HX_("Save unstripped to ",d8,f3,e5,75) + unstripped));
HXLINE( 703)							bool chmod;
HXDLIN( 703)							if (::BuildTool_obj::isWindows) {
HXLINE( 703)								chmod = false;
            							}
            							else {
HXLINE( 703)								chmod = (target->mToolID == HX_("exe",92,0c,4d,00));
            							}
HXLINE( 704)							::CopyFile_obj::copyFile(output,unstripped,false,HX_("always",cf,0e,d7,46),chmod);
            						}
HXLINE( 707)						this->mStripper->strip(output);
            					}
            				}
HXLINE( 711)				bool _hx_tmp10;
HXDLIN( 711)				if (::hx::IsNotNull( manifest )) {
HXLINE( 711)					if ((target->mToolID != HX_("exe",92,0c,4d,00))) {
HXLINE( 711)						_hx_tmp10 = (target->mToolID == HX_("dll",e4,3f,4c,00));
            					}
            					else {
HXLINE( 711)						_hx_tmp10 = true;
            					}
            				}
            				else {
HXLINE( 711)					_hx_tmp10 = false;
            				}
HXDLIN( 711)				if (_hx_tmp10) {
HXLINE( 713)					if (::hx::IsNull( this->mManifester )) {
HXLINE( 715)						::Log_obj::info(HX_("",00,00,00,00),((HX_("Could not find manifest tool for \"",39,4d,f5,b5) + manifest) + HX_("\" - ignoring",60,34,b8,63)));
            					}
            					else {
HXLINE( 721)						::Log_obj::info(HX_("",00,00,00,00),((HX_("Adding manifest \"",b0,0d,06,4e) + manifest) + HX_("\"",22,00,00,00)));
HXLINE( 722)						this->mManifester->add(output,manifest,(target->mToolID == HX_("exe",92,0c,4d,00)));
            					}
            				}
            			}
HXLINE( 728)			::String outFile = linker1->mLastOutName;
HXLINE( 729)			bool _hx_tmp11;
HXDLIN( 729)			bool _hx_tmp12;
HXDLIN( 729)			if ((outFile != HX_("",00,00,00,00))) {
HXLINE( 729)				_hx_tmp12 = !(::PathManager_obj::isAbsolute(outFile));
            			}
            			else {
HXLINE( 729)				_hx_tmp12 = false;
            			}
HXDLIN( 729)			if (_hx_tmp12) {
HXLINE( 729)				_hx_tmp11 = ::sys::FileSystem_obj::exists(this->mMakefile);
            			}
            			else {
HXLINE( 729)				_hx_tmp11 = false;
            			}
HXDLIN( 729)			if (_hx_tmp11) {
HXLINE( 731)				::String baseFile = ::PathManager_obj::standardize(this->mMakefile,null());
HXLINE( 732)				::Array< ::String > parts = baseFile.split(HX_("/",2f,00,00,00));
HXLINE( 733)				parts[(parts->length - 1)] = outFile;
HXLINE( 734)				outFile = parts->join(HX_("/",2f,00,00,00));
            			}
HXLINE( 736)			if ((outFile != HX_("",00,00,00,00))) {
HXLINE( 737)				::BuildTool_obj::addOutput(target->mToolID,outFile);
            			}
HXLINE( 739)			bool _hx_tmp13;
HXDLIN( 739)			if ((output != HX_("",00,00,00,00))) {
HXLINE( 739)				_hx_tmp13 = ::hx::IsNotNull( inDestination );
            			}
            			else {
HXLINE( 739)				_hx_tmp13 = false;
            			}
HXDLIN( 739)			if (_hx_tmp13) {
HXLINE( 741)				inDestination = this->substitute(inDestination,false);
HXLINE( 742)				if ((inDestination != HX_("",00,00,00,00))) {
HXLINE( 744)					bool _hx_tmp14;
HXDLIN( 744)					if (!(::PathManager_obj::isAbsolute(inDestination))) {
HXLINE( 744)						_hx_tmp14 = ::sys::FileSystem_obj::exists(this->mMakefile);
            					}
            					else {
HXLINE( 744)						_hx_tmp14 = false;
            					}
HXDLIN( 744)					if (_hx_tmp14) {
HXLINE( 746)						::String baseFile1 = ::PathManager_obj::standardize(this->mMakefile,null());
HXLINE( 747)						::Array< ::String > parts1 = baseFile1.split(HX_("/",2f,00,00,00));
HXLINE( 748)						parts1[(parts1->length - 1)] = inDestination;
HXLINE( 749)						inDestination = parts1->join(HX_("/",2f,00,00,00));
            					}
HXLINE( 752)					inDestination = ::PathManager_obj::clean(inDestination);
HXLINE( 753)					::Array< ::String > fileParts = inDestination.split(HX_("/",2f,00,00,00));
HXLINE( 754)					fileParts->pop();
HXLINE( 755)					::PathManager_obj::mkdir(fileParts->join(HX_("/",2f,00,00,00)),null());
HXLINE( 757)					bool chmod1;
HXDLIN( 757)					if (::BuildTool_obj::isWindows) {
HXLINE( 757)						chmod1 = false;
            					}
            					else {
HXLINE( 757)						chmod1 = (target->mToolID == HX_("exe",92,0c,4d,00));
            					}
HXLINE( 758)					::CopyFile_obj::copyFile(output,inDestination,false,HX_("always",cf,0e,d7,46),chmod1);
            				}
            			}
HXLINE( 761)			::Profile_obj::pop();
            		}
HXLINE( 764)		if ((this->mCopyFiles->length > 0)) {
HXLINE( 766)			::Profile_obj::push(HX_("copy files",cc,5b,34,4d));
HXLINE( 767)			{
HXLINE( 767)				int _g7 = 0;
HXDLIN( 767)				::Array< ::Dynamic> _g8 = this->mCopyFiles;
HXDLIN( 767)				while((_g7 < _g8->length)){
HXLINE( 767)					 ::CopyFile copyFile = _g8->__get(_g7).StaticCast<  ::CopyFile >();
HXDLIN( 767)					_g7 = (_g7 + 1);
HXLINE( 768)					bool _hx_tmp15;
HXDLIN( 768)					if (::hx::IsNotNull( copyFile->toolId )) {
HXLINE( 768)						_hx_tmp15 = (copyFile->toolId == target->mToolID);
            					}
            					else {
HXLINE( 768)						_hx_tmp15 = true;
            					}
HXDLIN( 768)					if (_hx_tmp15) {
HXLINE( 769)						copyFile->copy(target->mOutputDir);
            					}
            				}
            			}
HXLINE( 770)			::Profile_obj::pop();
            		}
HXLINE( 773)		if ((restoreDir != HX_("",00,00,00,00))) {
HXLINE( 774)			::Sys_obj::setCwd(restoreDir);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(BuildTool_obj,buildTarget,(void))

::String BuildTool_obj::linkNvccFiles(::String objDir,bool hasChanged,::Array< ::String > nvObjs,::String inGroupName,::String objExt){
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_778_linkNvccFiles)
HXLINE( 781)		int objDirLen = objDir.length;
HXLINE( 782)		::String last = objDir.substr((objDirLen - 1),null());
HXLINE( 783)		bool _hx_tmp;
HXDLIN( 783)		if ((last != HX_("/",2f,00,00,00))) {
HXLINE( 783)			_hx_tmp = (last != HX_("\\",5c,00,00,00));
            		}
            		else {
HXLINE( 783)			_hx_tmp = false;
            		}
HXDLIN( 783)		if (_hx_tmp) {
HXLINE( 784)			objDirLen = (objDirLen + 1);
            		}
HXLINE( 785)		::String outFile = ((HX_("nvcc_",77,72,5e,a4) + inGroupName) + this->mCompiler->mExt);
HXLINE( 786)		::String fullFile = ((objDir + HX_("/",2f,00,00,00)) + outFile);
HXLINE( 788)		bool _hx_tmp1;
HXDLIN( 788)		if (!(hasChanged)) {
HXLINE( 788)			_hx_tmp1 = !(::sys::FileSystem_obj::exists(fullFile));
            		}
            		else {
HXLINE( 788)			_hx_tmp1 = true;
            		}
HXDLIN( 788)		if (_hx_tmp1) {
HXLINE( 790)			int maxObjs = 25;
HXLINE( 791)			::Array< ::String > result = ::Array_obj< ::String >::__new(nvObjs->length);
HXDLIN( 791)			{
HXLINE( 791)				int _g = 0;
HXDLIN( 791)				int _g1 = nvObjs->length;
HXDLIN( 791)				while((_g < _g1)){
HXLINE( 791)					_g = (_g + 1);
HXDLIN( 791)					int i = (_g - 1);
HXDLIN( 791)					{
HXLINE( 791)						::String inValue = ( (::String)(_hx_array_unsafe_get(nvObjs,i)) ).substr(objDirLen,null());
HXDLIN( 791)						result->__unsafe_set(i,inValue);
            					}
            				}
            			}
HXDLIN( 791)			::Array< ::String > shortObjs = result;
HXLINE( 792)			if ((shortObjs->length > maxObjs)) {
HXLINE( 794)				::Array< ::String > partObjs = ::Array_obj< ::String >::__new();
HXLINE( 795)				int p0 = 0;
HXLINE( 796)				int n = shortObjs->length;
HXLINE( 797)				int groupIdx = 0;
HXLINE( 798)				while((p0 < n)){
HXLINE( 800)					groupIdx = (groupIdx + 1);
HXDLIN( 800)					::String subName = ((((HX_("nvcc_",77,72,5e,a4) + inGroupName) + HX_("_",5f,00,00,00)) + (groupIdx - 1)) + this->mCompiler->mExt);
HXLINE( 801)					int remain = (n - p0);
HXLINE( 802)					int use;
HXDLIN( 802)					if ((remain < maxObjs)) {
HXLINE( 802)						use = remain;
            					}
            					else {
HXLINE( 802)						if ((remain < (maxObjs * 2))) {
HXLINE( 802)							use = (remain >> 1);
            						}
            						else {
HXLINE( 802)							use = maxObjs;
            						}
            					}
HXLINE( 803)					::Array< ::String > files = shortObjs->slice(p0,(p0 + use));
HXLINE( 805)					::Array< ::String > flags = ::BuildTool_obj::getNvccLinkFlags()->concat(files)->concat(::Array_obj< ::String >::__new(2)->init(0,HX_("-o",a2,27,00,00))->init(1,subName));
HXLINE( 806)					::String dbgFlags = (HX_("x",78,00,00,00) + subName.length);
HXDLIN( 806)					::Array< ::String > dbgFlags1 = ::BuildTool_obj::getNvccLinkFlags()->concat(::Array_obj< ::String >::__new(3)->init(0,HX_("[.",73,4f,00,00))->init(1,dbgFlags)->init(2,HX_(".]",6f,28,00,00)))->concat(::Array_obj< ::String >::__new(2)->init(0,HX_("-o",a2,27,00,00))->init(1,subName));
HXLINE( 807)					{
HXLINE( 807)						::String verboseMessage = (((HX_("Linking nvcc in ",7b,37,b1,88) + objDir) + HX_(":",3a,00,00,00)) + ::BuildTool_obj::getNvcc());
HXDLIN( 807)						::Log_obj::info(HX_("",00,00,00,00),(verboseMessage + dbgFlags1->join(HX_(" ",20,00,00,00))));
            					}
HXLINE( 808)					::ProcessManager_obj::runCommand(objDir,::BuildTool_obj::getNvcc(),flags,null(),null(),null(),null());
HXLINE( 809)					partObjs->push(subName);
HXLINE( 810)					p0 = (p0 + use);
            				}
HXLINE( 812)				shortObjs = partObjs;
            			}
HXLINE( 815)			::Array< ::String > flags1 = ::BuildTool_obj::getNvccLinkFlags()->concat(shortObjs)->concat(::Array_obj< ::String >::__new(2)->init(0,HX_("-o",a2,27,00,00))->init(1,outFile));
HXLINE( 816)			::String dbgFlags2 = (HX_("x",78,00,00,00) + shortObjs->length);
HXDLIN( 816)			::Array< ::String > dbgFlags3 = ::BuildTool_obj::getNvccLinkFlags()->concat(::Array_obj< ::String >::__new(3)->init(0,HX_("[.",73,4f,00,00))->init(1,dbgFlags2)->init(2,HX_(".]",6f,28,00,00)))->concat(::Array_obj< ::String >::__new(2)->init(0,HX_("-o",a2,27,00,00))->init(1,outFile));
HXLINE( 817)			{
HXLINE( 817)				::String verboseMessage1 = (((HX_("Linking nvcc in ",7b,37,b1,88) + objDir) + HX_(":",3a,00,00,00)) + ::BuildTool_obj::getNvcc());
HXDLIN( 817)				::Log_obj::info(HX_("",00,00,00,00),(verboseMessage1 + dbgFlags3->join(HX_(" ",20,00,00,00))));
            			}
HXLINE( 818)			::ProcessManager_obj::runCommand(objDir,::BuildTool_obj::getNvcc(),flags1,null(),null(),null(),null());
            		}
HXLINE( 820)		return fullFile;
            	}


HX_DEFINE_DYNAMIC_FUNC5(BuildTool_obj,linkNvccFiles,return )

void BuildTool_obj::cleanTarget(::String inTarget,bool allObj){
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_825_cleanTarget)
HXLINE( 827)		if (!(this->mTargets->exists(inTarget))) {
HXLINE( 829)			::Log_obj::error(((HX_("Could not find build target \"",00,1f,4a,d9) + inTarget) + HX_("\"",22,00,00,00)),null(),null(),null());
            		}
HXLINE( 832)		if (::hx::IsNull( this->mCompiler )) {
HXLINE( 834)			::Log_obj::error(HX_("No compiler defined",e7,50,1a,d4),null(),null(),null());
            		}
HXLINE( 838)		 ::Target target = ( ( ::Target)(this->mTargets->get(inTarget)) );
HXLINE( 839)		target->checkError();
HXLINE( 841)		{
HXLINE( 841)			int _g = 0;
HXDLIN( 841)			::Array< ::String > _g1 = target->mSubTargets;
HXDLIN( 841)			while((_g < _g1->length)){
HXLINE( 841)				::String sub = _g1->__get(_g);
HXDLIN( 841)				_g = (_g + 1);
HXLINE( 842)				this->cleanTarget(sub,allObj);
            			}
            		}
HXLINE( 844)		::String restoreDir = HX_("",00,00,00,00);
HXLINE( 845)		if ((target->mBuildDir != HX_("",00,00,00,00))) {
HXLINE( 847)			restoreDir = ::Sys_obj::getCwd();
HXLINE( 848)			::Log_obj::info(HX_("",00,00,00,00),(HX_(" - \x1b""[1mChanging directory:\x1b""[0m ",b2,c4,d8,6b) + target->mBuildDir));
HXLINE( 849)			::Sys_obj::setCwd(target->mBuildDir);
            		}
HXLINE( 852)		::PathManager_obj::removeDirectory(this->mCompiler->mObjDir);
HXLINE( 853)		::PathManager_obj::removeFile(HX_("all_objs",ba,d3,70,62));
HXLINE( 854)		::PathManager_obj::removeFilesWithExtension(HX_(".pdb",80,24,bd,1e));
HXLINE( 855)		if (allObj) {
HXLINE( 856)			::PathManager_obj::removeDirectory(HX_("obj",f7,8f,54,00));
            		}
HXLINE( 858)		if ((restoreDir != HX_("",00,00,00,00))) {
HXLINE( 859)			::Sys_obj::setCwd(restoreDir);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(BuildTool_obj,cleanTarget,(void))

 ::Compiler BuildTool_obj::createCompiler( ::Xml inXML, ::Compiler inBase){
            	HX_GC_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_863_createCompiler)
HXLINE( 864)		 ::Compiler c = inBase;
HXLINE( 865)		::String id;
HXDLIN( 865)		if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(inXML,HX_("id",db,5b,00,00))) {
HXLINE( 865)			id = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(inXML,HX_("id",db,5b,00,00)),null());
            		}
            		else {
HXLINE( 865)			id = null();
            		}
HXLINE( 866)		::String exe;
HXDLIN( 866)		if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(inXML,HX_("exe",92,0c,4d,00))) {
HXLINE( 866)			exe = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(inXML,HX_("exe",92,0c,4d,00)),null());
            		}
            		else {
HXLINE( 866)			exe = null();
            		}
HXLINE( 867)		bool _hx_tmp;
HXDLIN( 867)		if (::hx::IsNotNull( inBase )) {
HXLINE( 867)			_hx_tmp = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(inXML,HX_("replace",34,48,28,ab));
            		}
            		else {
HXLINE( 867)			_hx_tmp = true;
            		}
HXDLIN( 867)		if (_hx_tmp) {
HXLINE( 869)			c =  ::Compiler_obj::__alloc( HX_CTX ,id,exe);
            		}
            		else {
HXLINE( 873)			if (::hx::IsNotNull( id )) {
HXLINE( 874)				c->mID = id;
            			}
HXLINE( 875)			if (::hx::IsNotNull( exe )) {
HXLINE( 876)				c->mExe = exe;
            			}
            		}
HXLINE( 878)		c->mAddGCCIdentity = this->mDefines->exists(HX_("USE_GCC_FILETYPES",2d,2c,29,9e));
HXLINE( 880)		{
HXLINE( 880)			 ::Dynamic el = inXML->elements();
HXDLIN( 880)			while(( (bool)(el->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 880)				 ::Xml el1 = ( ( ::Xml)(el->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 882)				if (this->valid(el1,HX_("",00,00,00,00))) {
HXLINE( 883)					::String _g;
HXDLIN( 883)					if ((el1->nodeType == ::Xml_obj::Document)) {
HXLINE( 883)						_g = HX_("Document",3b,ab,c4,74);
            					}
            					else {
HXLINE( 883)						if ((el1->nodeType != ::Xml_obj::Element)) {
HXLINE( 883)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(el1->nodeType)));
            						}
HXDLIN( 883)						_g = el1->nodeName;
            					}
HXDLIN( 883)					::String _hx_switch_0 = _g;
            					if (  (_hx_switch_0==HX_("cflag",8f,79,69,44)) ){
HXLINE( 886)						::Array< ::String > c1 = c->mCFlags;
HXDLIN( 886)						c1->push(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null()));
HXDLIN( 886)						goto _hx_goto_32;
            					}
            					if (  (_hx_switch_0==HX_("cppflag",4f,5a,64,9d)) ){
HXLINE( 887)						::Array< ::String > c2 = c->mCPPFlags;
HXDLIN( 887)						c2->push(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null()));
HXDLIN( 887)						goto _hx_goto_32;
            					}
            					if (  (_hx_switch_0==HX_("exe",92,0c,4d,00)) ){
HXLINE( 894)						c->mExe = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null());
HXDLIN( 894)						goto _hx_goto_32;
            					}
            					if (  (_hx_switch_0==HX_("ext",a1,0c,4d,00)) ){
HXLINE( 897)						c->mExt = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null());
HXDLIN( 897)						goto _hx_goto_32;
            					}
            					if (  (_hx_switch_0==HX_("flag",ac,0b,be,43)) ){
HXLINE( 885)						::String _hx_tmp1 = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null());
HXDLIN( 885)						::String _hx_tmp2;
HXDLIN( 885)						if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("tag",5a,5a,58,00))) {
HXLINE( 885)							_hx_tmp2 = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("tag",5a,5a,58,00)),null());
            						}
            						else {
HXLINE( 885)							_hx_tmp2 = HX_("",00,00,00,00);
            						}
HXDLIN( 885)						c->addFlag(_hx_tmp1,_hx_tmp2);
HXDLIN( 885)						goto _hx_goto_32;
            					}
            					if (  (_hx_switch_0==HX_("getversion",42,45,02,ff)) ){
HXLINE( 899)						c->mGetCompilerVersion = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null());
HXDLIN( 899)						goto _hx_goto_32;
            					}
            					if (  (_hx_switch_0==HX_("include",28,fe,f6,51)) ){
HXLINE( 902)						::String name = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null());
HXLINE( 903)						::String full_name = this->findIncludeFile(name);
HXLINE( 904)						if ((full_name != HX_("",00,00,00,00))) {
HXLINE( 906)							this->pushFile(full_name,HX_("compiler",9f,9f,d1,7d),null());
HXLINE( 907)							::String make_contents = ::sys::io::File_obj::getContent(full_name);
HXLINE( 908)							 ::Xml xml_slow = ::Xml_obj::parse(make_contents);
HXLINE( 909)							 ::Xml x = xml_slow->firstElement();
HXDLIN( 909)							bool _hx_tmp3;
HXDLIN( 909)							if ((x->nodeType != ::Xml_obj::Document)) {
HXLINE( 909)								_hx_tmp3 = (x->nodeType != ::Xml_obj::Element);
            							}
            							else {
HXLINE( 909)								_hx_tmp3 = false;
            							}
HXDLIN( 909)							if (_hx_tmp3) {
HXLINE( 909)								HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(x->nodeType)));
            							}
HXDLIN( 909)							this->createCompiler(x,c);
HXLINE( 910)							this->popFile();
            						}
            						else {
HXLINE( 912)							if (!(::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("noerror",e7,df,ff,b2)))) {
HXLINE( 914)								::Log_obj::error(((HX_("Could not find include file \"",b1,5a,8b,fc) + name) + HX_("\"",22,00,00,00)),null(),null(),null());
            							}
            						}
HXLINE( 901)						goto _hx_goto_32;
            					}
            					if (  (_hx_switch_0==HX_("mmflag",0c,9b,51,9b)) ){
HXLINE( 890)						::Array< ::String > c3 = c->mMMFlags;
HXDLIN( 890)						c3->push(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null()));
HXDLIN( 890)						goto _hx_goto_32;
            					}
            					if (  (_hx_switch_0==HX_("objcflag",38,aa,54,5e)) ){
HXLINE( 888)						::Array< ::String > c4 = c->mOBJCFlags;
HXDLIN( 888)						c4->push(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null()));
HXDLIN( 888)						goto _hx_goto_32;
            					}
            					if (  (_hx_switch_0==HX_("objdir",b6,c1,3e,15)) ){
HXLINE( 892)						c->mObjDir = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null());
HXDLIN( 892)						goto _hx_goto_32;
            					}
            					if (  (_hx_switch_0==HX_("outflag",3a,0b,c9,dd)) ){
HXLINE( 893)						c->mOutFlag = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null());
HXDLIN( 893)						goto _hx_goto_32;
            					}
            					if (  (_hx_switch_0==HX_("pch",15,53,55,00)) ){
HXLINE( 898)						c->setPCH(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null()));
HXDLIN( 898)						goto _hx_goto_32;
            					}
            					if (  (_hx_switch_0==HX_("pchflag",41,0d,23,ec)) ){
HXLINE( 891)						::Array< ::String > c5 = c->mPCHFlags;
HXDLIN( 891)						c5->push(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null()));
HXDLIN( 891)						goto _hx_goto_32;
            					}
            					if (  (_hx_switch_0==HX_("rcexe",81,4d,6b,e5)) ){
HXLINE( 895)						c->mRcExe = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null());
HXDLIN( 895)						goto _hx_goto_32;
            					}
            					if (  (_hx_switch_0==HX_("rcext",90,4d,6b,e5)) ){
HXLINE( 896)						c->mRcExt = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null());
HXDLIN( 896)						goto _hx_goto_32;
            					}
            					if (  (_hx_switch_0==HX_("rcflag",dd,9b,18,d9)) ){
HXLINE( 889)						::Array< ::String > c6 = c->mRcFlags;
HXDLIN( 889)						c6->push(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null()));
HXDLIN( 889)						goto _hx_goto_32;
            					}
            					if (  (_hx_switch_0==HX_("section",e5,05,d8,5d)) ){
HXLINE( 900)						this->createCompiler(el1,c);
HXDLIN( 900)						goto _hx_goto_32;
            					}
            					/* default */{
HXLINE( 918)						::String _hx_tmp4;
HXDLIN( 918)						if ((el1->nodeType == ::Xml_obj::Document)) {
HXLINE( 918)							_hx_tmp4 = HX_("Document",3b,ab,c4,74);
            						}
            						else {
HXLINE( 918)							if ((el1->nodeType != ::Xml_obj::Element)) {
HXLINE( 918)								HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(el1->nodeType)));
            							}
HXDLIN( 918)							_hx_tmp4 = el1->nodeName;
            						}
HXDLIN( 918)						::Log_obj::error(((HX_("Unknown compiler option \"",22,d5,01,76) + _hx_tmp4) + HX_("\"",22,00,00,00)),null(),null(),null());
            					}
            					_hx_goto_32:;
            				}
            			}
            		}
HXLINE( 923)		return c;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BuildTool_obj,createCompiler,return )

void BuildTool_obj::loadNvccXml(){
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_927_loadNvccXml)
HXLINE( 928)		::String incName = this->findIncludeFile(HX_("nvcc-setup.xml",81,0c,ce,6b));
HXLINE( 929)		if ((incName == HX_("",00,00,00,00))) {
HXLINE( 930)			incName = this->findIncludeFile(((HX_("",00,00,00,00) + ::BuildTool_obj::HXCPP) + HX_("/toolchain/nvcc-setup.xml",96,81,fc,8c)));
            		}
HXLINE( 931)		if ((incName == HX_("",00,00,00,00))) {
HXLINE( 932)			::Log_obj::error(HX_("Could not setup nvcc - missing nvcc-setup.xml",17,87,1e,47),null(),null(),null());
            		}
            		else {
HXLINE( 933)			if (!(this->mPragmaOnce->get_bool(incName))) {
HXLINE( 935)				this->pushFile(incName,HX_("Nvcc",08,85,e8,33),null());
HXLINE( 936)				::String make_contents = ::sys::io::File_obj::getContent(incName);
HXLINE( 937)				this->mPragmaOnce->set(incName,true);
HXLINE( 938)				 ::Xml xml = ::Xml_obj::parse(make_contents);
HXLINE( 939)				 ::Xml x = xml->firstElement();
HXDLIN( 939)				bool _hx_tmp;
HXDLIN( 939)				if ((x->nodeType != ::Xml_obj::Document)) {
HXLINE( 939)					_hx_tmp = (x->nodeType != ::Xml_obj::Element);
            				}
            				else {
HXLINE( 939)					_hx_tmp = false;
            				}
HXDLIN( 939)				if (_hx_tmp) {
HXLINE( 939)					HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(x->nodeType)));
            				}
HXDLIN( 939)				this->parseXML(x,HX_("",00,00,00,00),false);
HXLINE( 940)				this->popFile();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BuildTool_obj,loadNvccXml,(void))

 ::FileGroup BuildTool_obj::createFileGroup( ::Xml inXML, ::FileGroup inFiles,::String inName,bool inForceRelative,::String inTags){
            	HX_GC_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_951_createFileGroup)
HXLINE( 952)		::String dir;
HXDLIN( 952)		if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(inXML,HX_("dir",4d,3d,4c,00))) {
HXLINE( 952)			dir = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(inXML,HX_("dir",4d,3d,4c,00)),null());
            		}
            		else {
HXLINE( 952)			dir = HX_(".",2e,00,00,00);
            		}
HXLINE( 953)		if (inForceRelative) {
HXLINE( 954)			dir = ::PathManager_obj::combine(::haxe::io::Path_obj::directory(this->mCurrentIncludeFile),dir);
            		}
HXLINE( 956)		 ::FileGroup group;
HXDLIN( 956)		if (::hx::IsNull( inFiles )) {
HXLINE( 956)			group =  ::FileGroup_obj::__alloc( HX_CTX ,dir,inName,inForceRelative);
            		}
            		else {
HXLINE( 957)			if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(inXML,HX_("replace",34,48,28,ab))) {
HXLINE( 956)				group = inFiles->replace(dir,inForceRelative);
            			}
            			else {
HXLINE( 956)				group = inFiles;
            			}
            		}
HXLINE( 960)		if (::hx::IsNotNull( inTags )) {
HXLINE( 961)			group->mTags = inTags;
            		}
HXLINE( 963)		{
HXLINE( 963)			 ::Dynamic el = inXML->elements();
HXDLIN( 963)			while(( (bool)(el->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 963)				 ::Xml el1 = ( ( ::Xml)(el->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 965)				if (this->valid(el1,HX_("",00,00,00,00))) {
HXLINE( 966)					::String _g;
HXDLIN( 966)					if ((el1->nodeType == ::Xml_obj::Document)) {
HXLINE( 966)						_g = HX_("Document",3b,ab,c4,74);
            					}
            					else {
HXLINE( 966)						if ((el1->nodeType != ::Xml_obj::Element)) {
HXLINE( 966)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(el1->nodeType)));
            						}
HXDLIN( 966)						_g = el1->nodeName;
            					}
HXDLIN( 966)					::String _hx_switch_0 = _g;
            					if (  (_hx_switch_0==HX_("addTwice",c7,d7,d0,92)) ){
HXLINE(1005)						group->mAddTwice = true;
HXDLIN(1005)						goto _hx_goto_36;
            					}
            					if (  (_hx_switch_0==HX_("cache",42,9a,14,41)) ){
HXLINE( 995)						group->mUseCache = this->parseBool(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null()));
HXLINE( 996)						if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("project",d9,12,eb,f5))) {
HXLINE( 997)							group->mCacheProject = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("project",d9,12,eb,f5)),null());
            						}
HXLINE( 998)						if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("asLibrary",29,5c,e3,ab))) {
HXLINE( 999)							group->mAsLibrary = true;
            						}
HXLINE(1000)						if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("respectTimestamp",b0,72,b5,a2))) {
HXLINE(1001)							group->mRespectTimestamp = true;
            						}
HXLINE( 994)						goto _hx_goto_36;
            					}
            					if (  (_hx_switch_0==HX_("compilerflag",cb,66,01,c1)) ){
HXLINE(1027)						if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48))) {
HXLINE(1028)							group->addCompilerFlag(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null()));
            						}
HXLINE(1029)						group->addCompilerFlag(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null()));
HXLINE(1026)						goto _hx_goto_36;
            					}
            					if (  (_hx_switch_0==HX_("compilervalue",72,df,64,4f)) ){
HXLINE(1038)						group->addCompilerFlag(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null()));
HXLINE(1039)						group->addCompilerFlag(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null()));
HXLINE(1037)						goto _hx_goto_36;
            					}
            					if (  (_hx_switch_0==HX_("config",c2,56,d2,c7)) ){
HXLINE(1025)						group->mConfig = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null());
HXDLIN(1025)						goto _hx_goto_36;
            					}
            					if (  (_hx_switch_0==HX_("depend",6c,95,7d,6d)) ){
HXLINE(1007)						if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48))) {
HXLINE(1009)							bool dateOnly;
HXDLIN(1009)							if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("dateOnly",ba,b6,c0,d6))) {
HXLINE(1009)								dateOnly = this->parseBool(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("dateOnly",ba,b6,c0,d6)),null()));
            							}
            							else {
HXLINE(1009)								dateOnly = false;
            							}
HXLINE(1010)							group->addDepend(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null()),dateOnly);
            						}
            						else {
HXLINE(1012)							if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("files",77,de,98,00))) {
HXLINE(1014)								::String name = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("files",77,de,98,00)),null());
HXLINE(1015)								if (!(this->mFileGroups->exists(name))) {
HXLINE(1016)									::Log_obj::error((HX_("Could not find filegroup for depend node:",f3,01,01,ec) + name),null(),null(),null());
            								}
HXLINE(1017)								group->addDependFiles(( ( ::FileGroup)(this->mFileGroups->get(name)) ));
            							}
            							else {
HXLINE(1020)								::Log_obj::error(HX_("depend node must have 'name' or 'files' attribute",96,eb,66,fe),null(),null(),null());
            							}
            						}
HXLINE(1007)						goto _hx_goto_36;
            					}
            					if (  (_hx_switch_0==HX_("file",7c,ce,bb,43)) ){
HXLINE( 969)						::String name1 = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null());
HXLINE( 970)						 ::File file = group->find(name1);
HXLINE( 971)						if (::hx::IsNull( file )) {
HXLINE( 973)							file =  ::File_obj::__alloc( HX_CTX ,name1,group);
HXLINE( 974)							group->addFile(file);
            						}
HXLINE( 977)						if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("tag",5a,5a,58,00))) {
HXLINE( 979)							::String extra = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("tag",5a,5a,58,00)),null());
HXLINE( 980)							::String _hx_tmp;
HXDLIN( 980)							bool _hx_tmp1;
HXDLIN( 980)							if (::hx::IsNotNull( group->mTags )) {
HXLINE( 980)								_hx_tmp1 = (group->mTags == HX_("",00,00,00,00));
            							}
            							else {
HXLINE( 980)								_hx_tmp1 = true;
            							}
HXDLIN( 980)							if (_hx_tmp1) {
HXLINE( 980)								_hx_tmp = extra;
            							}
            							else {
HXLINE( 980)								_hx_tmp = ((group->mTags + HX_(",",2c,00,00,00)) + extra);
            							}
HXDLIN( 980)							file->setTags(_hx_tmp);
            						}
HXLINE( 982)						if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("tags",d9,b4,f6,4c))) {
HXLINE( 983)							file->setTags(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("tags",d9,b4,f6,4c)),null()));
            						}
HXLINE( 984)						if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("filterout",d6,23,7c,e1))) {
HXLINE( 985)							file->mFilterOut = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("filterout",d6,23,7c,e1)),null());
            						}
HXLINE( 986)						if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("embedName",c4,8c,e6,a8))) {
HXLINE( 987)							file->mEmbedName = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("embedName",c4,8c,e6,a8)),null());
            						}
HXLINE( 988)						if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("scramble",cd,94,5a,7d))) {
HXLINE( 989)							file->mScramble = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("scramble",cd,94,5a,7d)),null());
            						}
HXLINE( 990)						{
HXLINE( 990)							 ::Dynamic f = el1->elements();
HXDLIN( 990)							while(( (bool)(f->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 990)								 ::Xml f1 = ( ( ::Xml)(f->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 991)								bool _hx_tmp2;
HXDLIN( 991)								if (this->valid(f1,HX_("",00,00,00,00))) {
HXLINE( 991)									::String _hx_tmp3;
HXDLIN( 991)									if ((f1->nodeType == ::Xml_obj::Document)) {
HXLINE( 991)										_hx_tmp3 = HX_("Document",3b,ab,c4,74);
            									}
            									else {
HXLINE( 991)										if ((f1->nodeType != ::Xml_obj::Element)) {
HXLINE( 991)											HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(f1->nodeType)));
            										}
HXDLIN( 991)										_hx_tmp3 = f1->nodeName;
            									}
HXDLIN( 991)									_hx_tmp2 = (_hx_tmp3 == HX_("depend",6c,95,7d,6d));
            								}
            								else {
HXLINE( 991)									_hx_tmp2 = false;
            								}
HXDLIN( 991)								if (_hx_tmp2) {
HXLINE( 992)									::Array< ::String > file1 = file->mDepends;
HXDLIN( 992)									file1->push(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(f1,HX_("name",4b,72,ff,48)),null()));
            								}
            							}
            						}
HXLINE( 968)						goto _hx_goto_36;
            					}
            					if (  (_hx_switch_0==HX_("hlsl",9d,88,10,45)) ){
HXLINE(1022)						::String _hx_tmp4 = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null());
HXDLIN(1022)						::String _hx_tmp5 = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("profile",29,49,49,f3)),null());
HXLINE(1023)						::String _hx_tmp6 = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("variable",3c,12,0d,69)),null());
HXLINE(1022)						group->addHLSL(_hx_tmp4,_hx_tmp5,_hx_tmp6,this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("target",51,f3,ec,86)),null()));
HXDLIN(1022)						goto _hx_goto_36;
            					}
            					if (  (_hx_switch_0==HX_("include",28,fe,f6,51)) ){
HXLINE(1043)						::String subbed_name = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null());
HXLINE(1044)						::String full_name = this->findIncludeFile(subbed_name);
HXLINE(1045)						if ((full_name != HX_("",00,00,00,00))) {
HXLINE(1047)							if (!(this->mPragmaOnce->get_bool(full_name))) {
HXLINE(1049)								this->pushFile(full_name,HX_("FileGroup",03,33,ef,3d),null());
HXLINE(1050)								::String make_contents = ::sys::io::File_obj::getContent(full_name);
HXLINE(1051)								 ::Xml xml_slow = ::Xml_obj::parse(make_contents);
HXLINE(1052)								 ::Xml x = xml_slow->firstElement();
HXDLIN(1052)								bool _hx_tmp7;
HXDLIN(1052)								if ((x->nodeType != ::Xml_obj::Document)) {
HXLINE(1052)									_hx_tmp7 = (x->nodeType != ::Xml_obj::Element);
            								}
            								else {
HXLINE(1052)									_hx_tmp7 = false;
            								}
HXDLIN(1052)								if (_hx_tmp7) {
HXLINE(1052)									HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(x->nodeType)));
            								}
HXDLIN(1052)								this->createFileGroup(x,group,inName,false,null());
HXLINE(1053)								this->popFile();
            							}
            						}
            						else {
HXLINE(1058)							::Log_obj::error(((HX_("Could not find include file \"",b1,5a,8b,fc) + subbed_name) + HX_("\"",22,00,00,00)),null(),null(),null());
            						}
HXLINE(1042)						goto _hx_goto_36;
            					}
            					if (  (_hx_switch_0==HX_("nvcc",e8,58,0f,49)) ){
HXLINE(1031)						::BuildTool_obj::setupNvcc();
HXLINE(1032)						group->mNvcc = true;
HXLINE(1033)						bool _hx_tmp8 = (group->mTags == HX_("haxe,static",74,82,4f,d4));
HXLINE(1030)						goto _hx_goto_36;
            					}
            					if (  (_hx_switch_0==HX_("objprefix",c9,3c,96,42)) ){
HXLINE(1036)						group->mObjPrefix = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null());
HXDLIN(1036)						goto _hx_goto_36;
            					}
            					if (  (_hx_switch_0==HX_("options",5e,33,fe,df)) ){
HXLINE(1024)						group->addOptions(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null()));
HXDLIN(1024)						goto _hx_goto_36;
            					}
            					if (  (_hx_switch_0==HX_("precompiledheader",41,63,5f,55)) ){
HXLINE(1041)						::String _hx_tmp9 = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null());
HXDLIN(1041)						group->setPrecompiled(_hx_tmp9,this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("dir",4d,3d,4c,00)),null()));
HXDLIN(1041)						goto _hx_goto_36;
            					}
            					if (  (_hx_switch_0==HX_("section",e5,05,d8,5d)) ){
HXLINE( 993)						this->createFileGroup(el1,group,inName,inForceRelative,null());
HXDLIN( 993)						goto _hx_goto_36;
            					}
            					if (  (_hx_switch_0==HX_("tag",5a,5a,58,00)) ){
HXLINE(1003)						group->addTag(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null()));
HXDLIN(1003)						goto _hx_goto_36;
            					}
            					_hx_goto_36:;
            				}
            			}
            		}
HXLINE(1064)		return group;
            	}


HX_DEFINE_DYNAMIC_FUNC5(BuildTool_obj,createFileGroup,return )

 ::Linker BuildTool_obj::createLinker( ::Xml inXML, ::Linker inBase){
            	HX_GC_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_1068_createLinker)
HXLINE(1069)		::String exe;
HXDLIN(1069)		if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(inXML,HX_("exe",92,0c,4d,00))) {
HXLINE(1069)			exe = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(inXML,HX_("exe",92,0c,4d,00)),null());
            		}
            		else {
HXLINE(1069)			exe = null();
            		}
HXLINE(1070)		bool _hx_tmp;
HXDLIN(1070)		bool _hx_tmp1;
HXDLIN(1070)		if (::hx::IsNotNull( inBase )) {
HXLINE(1070)			_hx_tmp1 = !(::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(inXML,HX_("replace",34,48,28,ab)));
            		}
            		else {
HXLINE(1070)			_hx_tmp1 = false;
            		}
HXDLIN(1070)		if (_hx_tmp1) {
HXLINE(1070)			_hx_tmp = ::hx::IsNull( inBase->mExe );
            		}
            		else {
HXLINE(1070)			_hx_tmp = false;
            		}
HXDLIN(1070)		if (_hx_tmp) {
HXLINE(1071)			inBase->mExe = exe;
            		}
HXLINE(1072)		 ::Linker l;
HXDLIN(1072)		bool l1;
HXDLIN(1072)		if (::hx::IsNotNull( inBase )) {
HXLINE(1072)			l1 = !(::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(inXML,HX_("replace",34,48,28,ab)));
            		}
            		else {
HXLINE(1072)			l1 = false;
            		}
HXDLIN(1072)		if (l1) {
HXLINE(1072)			l = inBase;
            		}
            		else {
HXLINE(1072)			l =  ::Linker_obj::__alloc( HX_CTX ,exe);
            		}
HXLINE(1073)		{
HXLINE(1073)			 ::Dynamic el = inXML->elements();
HXDLIN(1073)			while(( (bool)(el->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1073)				 ::Xml el1 = ( ( ::Xml)(el->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1075)				if (this->valid(el1,HX_("",00,00,00,00))) {
HXLINE(1076)					::String _g;
HXDLIN(1076)					if ((el1->nodeType == ::Xml_obj::Document)) {
HXLINE(1076)						_g = HX_("Document",3b,ab,c4,74);
            					}
            					else {
HXLINE(1076)						if ((el1->nodeType != ::Xml_obj::Element)) {
HXLINE(1076)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(el1->nodeType)));
            						}
HXDLIN(1076)						_g = el1->nodeName;
            					}
HXDLIN(1076)					::String _hx_switch_0 = _g;
            					if (  (_hx_switch_0==HX_("exe",92,0c,4d,00)) ){
HXLINE(1100)						l->mExe = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null());
HXDLIN(1100)						goto _hx_goto_40;
            					}
            					if (  (_hx_switch_0==HX_("expandAr",eb,f1,ce,f9)) ){
HXLINE(1094)						l->mExpandArchives = (this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null()) != HX_("",00,00,00,00));
HXDLIN(1094)						goto _hx_goto_40;
            					}
            					if (  (_hx_switch_0==HX_("ext",a1,0c,4d,00)) ){
HXLINE(1079)						l->mExt = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null());
HXDLIN(1079)						goto _hx_goto_40;
            					}
            					if (  (_hx_switch_0==HX_("flag",ac,0b,be,43)) ){
HXLINE(1078)						::Array< ::String > l2 = l->mFlags;
HXDLIN(1078)						l2->push(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null()));
HXDLIN(1078)						goto _hx_goto_40;
            					}
            					if (  (_hx_switch_0==HX_("fromfile",e6,70,ae,b6)) ){
HXLINE(1096)						if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31))) {
HXLINE(1097)							l->mFromFile = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null());
            						}
HXLINE(1098)						if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("needsQuotes",f4,e0,8b,86))) {
HXLINE(1099)							l->mFromFileNeedsQuotes = this->parseBool(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("needsQuotes",f4,e0,8b,86)),null()));
            						}
HXLINE(1095)						goto _hx_goto_40;
            					}
            					if (  (_hx_switch_0==HX_("lib",45,4f,52,00)) ){
HXLINE(1083)						if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("hxbase",21,0b,44,ee))) {
HXLINE(1084)							::Array< ::String > l3 = l->mLibs;
HXDLIN(1084)							::String _hx_tmp2 = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("hxbase",21,0b,44,ee)),null());
HXDLIN(1084)							::String _hx_tmp3 = (_hx_tmp2 + this->mDefines->get(HX_("LIBEXTRA",2b,61,37,2f)));
HXDLIN(1084)							l3->push((_hx_tmp3 + this->mDefines->get(HX_("LIBEXT",7c,82,34,97))));
            						}
            						else {
HXLINE(1085)							if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("base",11,e8,10,41))) {
HXLINE(1086)								::Array< ::String > l4 = l->mLibs;
HXDLIN(1086)								::String _hx_tmp4 = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("base",11,e8,10,41)),null());
HXDLIN(1086)								l4->push((_hx_tmp4 + this->mDefines->get(HX_("LIBEXT",7c,82,34,97))));
            							}
            							else {
HXLINE(1088)								::Array< ::String > l5 = l->mLibs;
HXDLIN(1088)								l5->push(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null()));
            							}
            						}
HXLINE(1083)						goto _hx_goto_40;
            					}
            					if (  (_hx_switch_0==HX_("libdir",28,07,b1,e4)) ){
HXLINE(1081)						l->mLibDir = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null());
HXDLIN(1081)						goto _hx_goto_40;
            					}
            					if (  (_hx_switch_0==HX_("libpathflag",16,c4,4e,4b)) ){
HXLINE(1092)						l->mAddLibPath = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null());
HXDLIN(1092)						goto _hx_goto_40;
            					}
            					if (  (_hx_switch_0==HX_("outflag",3a,0b,c9,dd)) ){
HXLINE(1080)						l->mOutFlag = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null());
HXDLIN(1080)						goto _hx_goto_40;
            					}
            					if (  (_hx_switch_0==HX_("prefix",92,d9,b6,ae)) ){
HXLINE(1090)						l->mNamePrefix = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null());
HXDLIN(1090)						goto _hx_goto_40;
            					}
            					if (  (_hx_switch_0==HX_("ranlib",c6,2e,95,b7)) ){
HXLINE(1091)						l->mRanLib = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null());
HXDLIN(1091)						goto _hx_goto_40;
            					}
            					if (  (_hx_switch_0==HX_("recreate",ef,12,7e,5c)) ){
HXLINE(1093)						l->mRecreate = (this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null()) != HX_("",00,00,00,00));
HXDLIN(1093)						goto _hx_goto_40;
            					}
            					if (  (_hx_switch_0==HX_("section",e5,05,d8,5d)) ){
HXLINE(1101)						this->createLinker(el1,l);
HXDLIN(1101)						goto _hx_goto_40;
            					}
            					_hx_goto_40:;
            				}
            			}
            		}
HXLINE(1105)		return l;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BuildTool_obj,createLinker,return )

 ::Prelinker BuildTool_obj::createPrelinker( ::Xml inXML, ::Prelinker inBase){
            	HX_GC_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_1109_createPrelinker)
HXLINE(1110)		 ::Prelinker l;
HXDLIN(1110)		bool l1;
HXDLIN(1110)		if (::hx::IsNotNull( inBase )) {
HXLINE(1110)			l1 = !(::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(inXML,HX_("replace",34,48,28,ab)));
            		}
            		else {
HXLINE(1110)			l1 = false;
            		}
HXDLIN(1110)		if (l1) {
HXLINE(1110)			l = inBase;
            		}
            		else {
HXLINE(1110)			l =  ::Prelinker_obj::__alloc( HX_CTX ,this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(inXML,HX_("exe",92,0c,4d,00)),null()));
            		}
HXLINE(1111)		{
HXLINE(1111)			 ::Dynamic el = inXML->elements();
HXDLIN(1111)			while(( (bool)(el->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1111)				 ::Xml el1 = ( ( ::Xml)(el->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1113)				if (this->valid(el1,HX_("",00,00,00,00))) {
HXLINE(1114)					::String _g;
HXDLIN(1114)					if ((el1->nodeType == ::Xml_obj::Document)) {
HXLINE(1114)						_g = HX_("Document",3b,ab,c4,74);
            					}
            					else {
HXLINE(1114)						if ((el1->nodeType != ::Xml_obj::Element)) {
HXLINE(1114)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(el1->nodeType)));
            						}
HXDLIN(1114)						_g = el1->nodeName;
            					}
HXDLIN(1114)					::String _hx_switch_0 = _g;
            					if (  (_hx_switch_0==HX_("exe",92,0c,4d,00)) ){
HXLINE(1121)						l->mExe = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null());
HXDLIN(1121)						goto _hx_goto_43;
            					}
            					if (  (_hx_switch_0==HX_("expandAr",eb,f1,ce,f9)) ){
HXLINE(1119)						l->mExpandArchives = (this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null()) != HX_("",00,00,00,00));
HXDLIN(1119)						goto _hx_goto_43;
            					}
            					if (  (_hx_switch_0==HX_("flag",ac,0b,be,43)) ){
HXLINE(1116)						::Array< ::String > l2 = l->mFlags;
HXDLIN(1116)						l2->push(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null()));
HXDLIN(1116)						goto _hx_goto_43;
            					}
            					if (  (_hx_switch_0==HX_("fromfile",e6,70,ae,b6)) ){
HXLINE(1120)						l->mFromFile = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null());
HXDLIN(1120)						goto _hx_goto_43;
            					}
            					if (  (_hx_switch_0==HX_("outflag",3a,0b,c9,dd)) ){
HXLINE(1118)						l->mOutFlag = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null());
HXDLIN(1118)						goto _hx_goto_43;
            					}
            					if (  (_hx_switch_0==HX_("section",e5,05,d8,5d)) ){
HXLINE(1122)						this->createPrelinker(el1,l);
HXDLIN(1122)						goto _hx_goto_43;
            					}
            					_hx_goto_43:;
            				}
            			}
            		}
HXLINE(1126)		return l;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BuildTool_obj,createPrelinker,return )

 ::Manifester BuildTool_obj::createManifester( ::Xml inXML, ::Manifester inBase){
            	HX_GC_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_1130_createManifester)
HXLINE(1131)		 ::Manifester s;
HXDLIN(1131)		bool s1;
HXDLIN(1131)		if (::hx::IsNotNull( inBase )) {
HXLINE(1131)			s1 = !(::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(inXML,HX_("replace",34,48,28,ab)));
            		}
            		else {
HXLINE(1131)			s1 = false;
            		}
HXDLIN(1131)		if (s1) {
HXLINE(1131)			s = inBase;
            		}
            		else {
HXLINE(1131)			s =  ::Manifester_obj::__alloc( HX_CTX ,this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(inXML,HX_("exe",92,0c,4d,00)),null()));
            		}
HXLINE(1133)		{
HXLINE(1133)			 ::Dynamic el = inXML->elements();
HXDLIN(1133)			while(( (bool)(el->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1133)				 ::Xml el1 = ( ( ::Xml)(el->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1135)				if (this->valid(el1,HX_("",00,00,00,00))) {
HXLINE(1136)					::String _g;
HXDLIN(1136)					if ((el1->nodeType == ::Xml_obj::Document)) {
HXLINE(1136)						_g = HX_("Document",3b,ab,c4,74);
            					}
            					else {
HXLINE(1136)						if ((el1->nodeType != ::Xml_obj::Element)) {
HXLINE(1136)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(el1->nodeType)));
            						}
HXDLIN(1136)						_g = el1->nodeName;
            					}
HXDLIN(1136)					::String _hx_switch_0 = _g;
            					if (  (_hx_switch_0==HX_("exe",92,0c,4d,00)) ){
HXLINE(1141)						s->mExe = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null());
HXDLIN(1141)						goto _hx_goto_46;
            					}
            					if (  (_hx_switch_0==HX_("flag",ac,0b,be,43)) ){
HXLINE(1138)						::Array< ::String > s2 = s->mFlags;
HXDLIN(1138)						s2->push(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null()));
HXDLIN(1138)						goto _hx_goto_46;
            					}
            					if (  (_hx_switch_0==HX_("outPost",0e,b0,40,cf)) ){
HXLINE(1140)						s->mOutPost = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null());
HXDLIN(1140)						goto _hx_goto_46;
            					}
            					if (  (_hx_switch_0==HX_("outPre",35,c4,68,0c)) ){
HXLINE(1139)						s->mOutPre = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null());
HXDLIN(1139)						goto _hx_goto_46;
            					}
            					_hx_goto_46:;
            				}
            			}
            		}
HXLINE(1145)		return s;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BuildTool_obj,createManifester,return )

 ::Stripper BuildTool_obj::createStripper( ::Xml inXML, ::Stripper inBase){
            	HX_GC_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_1150_createStripper)
HXLINE(1151)		 ::Stripper s;
HXDLIN(1151)		bool s1;
HXDLIN(1151)		if (::hx::IsNotNull( inBase )) {
HXLINE(1151)			s1 = !(::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(inXML,HX_("replace",34,48,28,ab)));
            		}
            		else {
HXLINE(1151)			s1 = false;
            		}
HXDLIN(1151)		if (s1) {
HXLINE(1151)			s = inBase;
            		}
            		else {
HXLINE(1151)			s =  ::Stripper_obj::__alloc( HX_CTX ,this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(inXML,HX_("exe",92,0c,4d,00)),null()));
            		}
HXLINE(1153)		{
HXLINE(1153)			 ::Dynamic el = inXML->elements();
HXDLIN(1153)			while(( (bool)(el->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1153)				 ::Xml el1 = ( ( ::Xml)(el->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1155)				if (this->valid(el1,HX_("",00,00,00,00))) {
HXLINE(1156)					::String _g;
HXDLIN(1156)					if ((el1->nodeType == ::Xml_obj::Document)) {
HXLINE(1156)						_g = HX_("Document",3b,ab,c4,74);
            					}
            					else {
HXLINE(1156)						if ((el1->nodeType != ::Xml_obj::Element)) {
HXLINE(1156)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(el1->nodeType)));
            						}
HXDLIN(1156)						_g = el1->nodeName;
            					}
HXDLIN(1156)					::String _hx_switch_0 = _g;
            					if (  (_hx_switch_0==HX_("exe",92,0c,4d,00)) ){
HXLINE(1159)						s->mExe = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null());
HXDLIN(1159)						goto _hx_goto_49;
            					}
            					if (  (_hx_switch_0==HX_("flag",ac,0b,be,43)) ){
HXLINE(1158)						::Array< ::String > s2 = s->mFlags;
HXDLIN(1158)						s2->push(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null()));
HXDLIN(1158)						goto _hx_goto_49;
            					}
            					_hx_goto_49:;
            				}
            			}
            		}
HXLINE(1163)		return s;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BuildTool_obj,createStripper,return )

 ::Target BuildTool_obj::createTarget( ::Xml inXML, ::Target inTarget,bool inForceRelative){
            	HX_GC_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_1167_createTarget)
HXLINE(1168)		 ::Target target = inTarget;
HXLINE(1169)		::String output;
HXDLIN(1169)		if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(inXML,HX_("output",01,0f,81,0c))) {
HXLINE(1169)			output = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(inXML,HX_("output",01,0f,81,0c)),null());
            		}
            		else {
HXLINE(1169)			output = HX_("",00,00,00,00);
            		}
HXLINE(1170)		::String tool;
HXDLIN(1170)		if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(inXML,HX_("tool",58,5b,01,4d))) {
HXLINE(1170)			tool = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(inXML,HX_("tool",58,5b,01,4d)),null());
            		}
            		else {
HXLINE(1170)			tool = HX_("",00,00,00,00);
            		}
HXLINE(1171)		::String toolid;
HXDLIN(1171)		if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(inXML,HX_("toolid",33,3d,91,94))) {
HXLINE(1171)			toolid = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(inXML,HX_("toolid",33,3d,91,94)),null());
            		}
            		else {
HXLINE(1171)			toolid = HX_("",00,00,00,00);
            		}
HXLINE(1173)		if (::hx::IsNull( target )) {
HXLINE(1175)			target =  ::Target_obj::__alloc( HX_CTX ,output,tool,toolid);
HXLINE(1176)			if (inForceRelative) {
HXLINE(1177)				target->mBuildDir = ::haxe::io::Path_obj::directory(this->mCurrentIncludeFile);
            			}
            		}
            		else {
HXLINE(1181)			if ((output != HX_("",00,00,00,00))) {
HXLINE(1182)				target->mOutput = output;
            			}
HXLINE(1183)			if ((tool != HX_("",00,00,00,00))) {
HXLINE(1184)				target->mTool = tool;
            			}
HXLINE(1185)			if ((toolid != HX_("",00,00,00,00))) {
HXLINE(1186)				target->mToolID = toolid;
            			}
            		}
HXLINE(1189)		{
HXLINE(1189)			 ::Dynamic el = inXML->elements();
HXDLIN(1189)			while(( (bool)(el->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1189)				 ::Xml el1 = ( ( ::Xml)(el->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1191)				if (this->valid(el1,HX_("",00,00,00,00))) {
HXLINE(1192)					::String _g;
HXDLIN(1192)					if ((el1->nodeType == ::Xml_obj::Document)) {
HXLINE(1192)						_g = HX_("Document",3b,ab,c4,74);
            					}
            					else {
HXLINE(1192)						if ((el1->nodeType != ::Xml_obj::Element)) {
HXLINE(1192)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(el1->nodeType)));
            						}
HXDLIN(1192)						_g = el1->nodeName;
            					}
HXDLIN(1192)					::String _hx_switch_0 = _g;
            					if (  (_hx_switch_0==HX_("builddir",df,12,c4,53)) ){
HXLINE(1234)						target->mBuildDir = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null());
HXDLIN(1234)						goto _hx_goto_52;
            					}
            					if (  (_hx_switch_0==HX_("depend",6c,95,7d,6d)) ){
HXLINE(1227)						::Array< ::String > target1 = target->mDepends;
HXDLIN(1227)						target1->push(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null()));
HXDLIN(1227)						goto _hx_goto_52;
            					}
            					if (  (_hx_switch_0==HX_("dir",4d,3d,4c,00)) ){
HXLINE(1231)						::Array< ::String > target2 = target->mDirs;
HXDLIN(1231)						target2->push(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null()));
HXDLIN(1231)						goto _hx_goto_52;
            					}
            					if (  (_hx_switch_0==HX_("ext",a1,0c,4d,00)) ){
HXLINE(1233)						target->setExt(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null()));
HXDLIN(1233)						goto _hx_goto_52;
            					}
            					if (  (_hx_switch_0==HX_("files",77,de,98,00)) ){
HXLINE(1239)						::String id = ::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("id",db,5b,00,00));
HXLINE(1240)						if (!(this->mFileGroups->exists(id))) {
HXLINE(1241)							target->addError((HX_("Could not find filegroup ",38,e8,3d,c9) + id));
            						}
            						else {
HXLINE(1243)							 ::FileGroup _hx_tmp = ( ( ::FileGroup)(this->mFileGroups->get(id)) );
HXDLIN(1243)							target->addFiles(_hx_tmp,::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("asLibrary",29,5c,e3,ab)));
            						}
HXLINE(1238)						goto _hx_goto_52;
            					}
            					if (  (_hx_switch_0==HX_("flag",ac,0b,be,43)) ){
HXLINE(1226)						::Array< ::String > target3 = target->mFlags;
HXDLIN(1226)						target3->push(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null()));
HXDLIN(1226)						goto _hx_goto_52;
            					}
            					if (  (_hx_switch_0==HX_("fullouput",7a,cd,fc,20)) ){
HXLINE(1236)						target->mFullOutputName = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null());
HXDLIN(1236)						goto _hx_goto_52;
            					}
            					if (  (_hx_switch_0==HX_("fullunstripped",9f,52,e6,ef)) ){
HXLINE(1237)						target->mFullUnstrippedName = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null());
HXDLIN(1237)						goto _hx_goto_52;
            					}
            					if (  (_hx_switch_0==HX_("lib",45,4f,52,00)) ){
HXLINE(1202)						if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("hxbase",21,0b,44,ee))) {
HXLINE(1203)							::Array< ::String > target4 = target->mLibs;
HXDLIN(1203)							::String _hx_tmp1 = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("hxbase",21,0b,44,ee)),null());
HXDLIN(1203)							::String _hx_tmp2 = (_hx_tmp1 + this->mDefines->get(HX_("LIBEXTRA",2b,61,37,2f)));
HXDLIN(1203)							target4->push((_hx_tmp2 + this->mDefines->get(HX_("LIBEXT",7c,82,34,97))));
            						}
            						else {
HXLINE(1204)							if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("base",11,e8,10,41))) {
HXLINE(1205)								::Array< ::String > target5 = target->mLibs;
HXDLIN(1205)								::String _hx_tmp3 = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("base",11,e8,10,41)),null());
HXDLIN(1205)								target5->push((_hx_tmp3 + this->mDefines->get(HX_("LIBEXT",7c,82,34,97))));
            							}
            							else {
HXLINE(1208)								::String lib = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null());
HXLINE(1209)								bool found = false;
HXLINE(1210)								{
HXLINE(1210)									int _g1 = 0;
HXDLIN(1210)									::Array< ::Dynamic> _g2 = this->mMagicLibs;
HXDLIN(1210)									while((_g1 < _g2->length)){
HXLINE(1210)										 ::Dynamic magicLib = _g2->__get(_g1);
HXDLIN(1210)										_g1 = (_g1 + 1);
HXLINE(1212)										if (::StringTools_obj::endsWith(lib,( (::String)(magicLib->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) ))) {
HXLINE(1214)											::String replace = lib.substr(0,(lib.length - ( (::String)(magicLib->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) ).length));
HXDLIN(1214)											::String replace1 = ( (::String)((replace + magicLib->__Field(HX_("replace",34,48,28,ab),::hx::paccDynamic))) );
HXLINE(1216)											::Log_obj::info(HX_("",00,00,00,00),(((HX_("Using ",7c,9a,25,79) + replace1) + HX_(" instead of ",6b,58,98,3a)) + lib));
HXLINE(1217)											found = true;
HXLINE(1218)											this->include(replace1,HX_("",00,00,00,00),false,true);
HXLINE(1219)											goto _hx_goto_53;
            										}
            									}
            									_hx_goto_53:;
            								}
HXLINE(1222)								if (!(found)) {
HXLINE(1223)									target->mLibs->push(lib);
            								}
            							}
            						}
HXLINE(1202)						goto _hx_goto_52;
            					}
            					if (  (_hx_switch_0==HX_("libpath",6a,bb,1d,3e)) ){
HXLINE(1235)						::Array< ::String > target6 = target->mLibPaths;
HXDLIN(1235)						target6->push(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null()));
HXDLIN(1235)						goto _hx_goto_52;
            					}
            					if (  (_hx_switch_0==HX_("merge",b8,a2,c6,05)) ){
HXLINE(1196)						::String name = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("id",db,5b,00,00)),null());
HXLINE(1197)						if (!(this->mTargets->exists(name))) {
HXLINE(1198)							::Log_obj::error(((HX_("Could not find target ",14,10,be,c5) + name) + HX_(" to merge.",5b,a2,48,a6)),null(),null(),null());
            						}
HXLINE(1199)						target->merge(( ( ::Target)(this->mTargets->get(name)) ));
HXLINE(1195)						goto _hx_goto_52;
            					}
            					if (  (_hx_switch_0==HX_("outdir",7f,e9,77,0c)) ){
HXLINE(1232)						target->mOutputDir = (this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null()) + HX_("/",2f,00,00,00));
HXDLIN(1232)						goto _hx_goto_52;
            					}
            					if (  (_hx_switch_0==HX_("section",e5,05,d8,5d)) ){
HXLINE(1244)						this->createTarget(el1,target,false);
HXDLIN(1244)						goto _hx_goto_52;
            					}
            					if (  (_hx_switch_0==HX_("target",51,f3,ec,86)) ){
HXLINE(1194)						::Array< ::String > target7 = target->mSubTargets;
HXDLIN(1194)						target7->push(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("id",db,5b,00,00)),null()));
HXDLIN(1194)						goto _hx_goto_52;
            					}
            					if (  (_hx_switch_0==HX_("vflag",22,7f,06,35)) ){
HXLINE(1229)						::Array< ::String > target8 = target->mFlags;
HXDLIN(1229)						target8->push(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null()));
HXLINE(1230)						::Array< ::String > target9 = target->mFlags;
HXDLIN(1230)						target9->push(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null()));
HXLINE(1228)						goto _hx_goto_52;
            					}
            					_hx_goto_52:;
            				}
            			}
            		}
HXLINE(1248)		return target;
            	}


HX_DEFINE_DYNAMIC_FUNC3(BuildTool_obj,createTarget,return )

bool BuildTool_obj::defined(::String inString){
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_1252_defined)
HXLINE(1253)		if ((inString == HX_("this_dir",ac,0f,39,41))) {
HXLINE(1254)			return true;
            		}
HXLINE(1255)		return this->mDefines->exists(inString);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BuildTool_obj,defined,return )

bool BuildTool_obj::parseBool(::String inValue){
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_1260_parseBool)
HXDLIN(1260)		bool _hx_tmp;
HXDLIN(1260)		if ((inValue != HX_("1",31,00,00,00))) {
HXDLIN(1260)			_hx_tmp = (inValue == HX_("t",74,00,00,00));
            		}
            		else {
HXDLIN(1260)			_hx_tmp = true;
            		}
HXDLIN(1260)		if (!(_hx_tmp)) {
HXDLIN(1260)			return (inValue == HX_("true",4e,a7,03,4d));
            		}
            		else {
HXDLIN(1260)			return true;
            		}
HXDLIN(1260)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BuildTool_obj,parseBool,return )

::String BuildTool_obj::findLocalIncludeFile(::String inBase){
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_1264_findLocalIncludeFile)
HXLINE(1265)		bool _hx_tmp;
HXDLIN(1265)		if (::hx::IsNotNull( inBase )) {
HXLINE(1265)			_hx_tmp = (inBase == HX_("",00,00,00,00));
            		}
            		else {
HXLINE(1265)			_hx_tmp = true;
            		}
HXDLIN(1265)		if (_hx_tmp) {
HXLINE(1265)			return HX_("",00,00,00,00);
            		}
HXLINE(1266)		::String c0 = inBase.substr(0,1);
HXLINE(1267)		bool _hx_tmp1;
HXDLIN(1267)		if ((c0 != HX_("/",2f,00,00,00))) {
HXLINE(1267)			_hx_tmp1 = (c0 != HX_("\\",5c,00,00,00));
            		}
            		else {
HXLINE(1267)			_hx_tmp1 = false;
            		}
HXDLIN(1267)		if (_hx_tmp1) {
HXLINE(1269)			::String c1 = inBase.substr(1,1);
HXLINE(1270)			if ((c1 != HX_(":",3a,00,00,00))) {
HXLINE(1272)				if ((this->mCurrentIncludeFile != HX_("",00,00,00,00))) {
HXLINE(1274)					::String relative = ::haxe::io::Path_obj::directory(this->mCurrentIncludeFile);
HXLINE(1275)					::String name = ::PathManager_obj::combine(relative,inBase);
HXLINE(1276)					if (::sys::FileSystem_obj::exists(name)) {
HXLINE(1277)						return name;
            					}
            				}
HXLINE(1280)				{
HXLINE(1280)					int _g = 0;
HXDLIN(1280)					::Array< ::String > _g1 = this->mIncludePath;
HXDLIN(1280)					while((_g < _g1->length)){
HXLINE(1280)						::String p = _g1->__get(_g);
HXDLIN(1280)						_g = (_g + 1);
HXLINE(1282)						::String name1 = ::PathManager_obj::combine(p,inBase);
HXLINE(1283)						if (::sys::FileSystem_obj::exists(name1)) {
HXLINE(1285)							return name1;
            						}
            					}
            				}
HXLINE(1288)				return HX_("",00,00,00,00);
            			}
            		}
HXLINE(1291)		if (::sys::FileSystem_obj::exists(inBase)) {
HXLINE(1292)			return inBase;
            		}
HXLINE(1293)		return HX_("",00,00,00,00);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BuildTool_obj,findLocalIncludeFile,return )

::String BuildTool_obj::findIncludeFile(::String inBase){
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_1297_findIncludeFile)
HXLINE(1298)		::String result = this->findLocalIncludeFile(inBase);
HXLINE(1299)		bool _hx_tmp;
HXDLIN(1299)		if ((result != HX_("",00,00,00,00))) {
HXLINE(1299)			_hx_tmp = !(::haxe::io::Path_obj::isAbsolute(result));
            		}
            		else {
HXLINE(1299)			_hx_tmp = false;
            		}
HXDLIN(1299)		if (_hx_tmp) {
HXLINE(1300)			::String result1;
HXDLIN(1300)			if ((this->mCurrentIncludeFile == HX_("",00,00,00,00))) {
HXLINE(1300)				result1 = ::Sys_obj::getCwd();
            			}
            			else {
HXLINE(1300)				result1 = ::haxe::io::Path_obj::directory(this->mCurrentIncludeFile);
            			}
HXDLIN(1300)			result = ::haxe::io::Path_obj::normalize(::PathManager_obj::combine(result1,result));
            		}
HXLINE(1301)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BuildTool_obj,findIncludeFile,return )

void BuildTool_obj::setDefaultToolchain( ::haxe::ds::StringMap defines){
            	HX_GC_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_1843_setDefaultToolchain)
HXLINE(1844)		if ( ::EReg_obj::__alloc( HX_CTX ,HX_("window",f0,93,8c,52),HX_("i",69,00,00,00))->match(::BuildTool_obj::os)) {
HXLINE(1845)			defines->set(HX_("windows_host",e4,91,0a,86),HX_("1",31,00,00,00));
            		}
HXLINE(1847)		if (defines->exists(HX_("iphoneos",c9,2a,af,6e))) {
HXLINE(1849)			defines->set(HX_("toolchain",a9,1a,50,de),HX_("iphoneos",c9,2a,af,6e));
HXLINE(1850)			defines->set(HX_("iphone",65,a6,6c,bd),HX_("iphone",65,a6,6c,bd));
HXLINE(1851)			defines->set(HX_("apple",5a,85,3b,24),HX_("apple",5a,85,3b,24));
HXLINE(1852)			defines->set(HX_("BINDIR",e6,a6,90,9f),HX_("iPhone",45,16,9a,50));
            		}
            		else {
HXLINE(1854)			if (defines->exists(HX_("iphonesim",d2,45,99,6a))) {
HXLINE(1856)				defines->set(HX_("toolchain",a9,1a,50,de),HX_("iphonesim",d2,45,99,6a));
HXLINE(1857)				defines->set(HX_("iphone",65,a6,6c,bd),HX_("iphone",65,a6,6c,bd));
HXLINE(1858)				defines->set(HX_("apple",5a,85,3b,24),HX_("apple",5a,85,3b,24));
HXLINE(1859)				defines->set(HX_("BINDIR",e6,a6,90,9f),HX_("iPhone",45,16,9a,50));
            			}
            			else {
HXLINE(1861)				if (defines->exists(HX_("appletvos",80,e5,f8,c7))) {
HXLINE(1863)					defines->set(HX_("toolchain",a9,1a,50,de),HX_("appletvos",80,e5,f8,c7));
HXLINE(1864)					defines->set(HX_("appletv",5c,75,2b,4e),HX_("appletv",5c,75,2b,4e));
HXLINE(1865)					defines->set(HX_("apple",5a,85,3b,24),HX_("apple",5a,85,3b,24));
HXLINE(1866)					defines->set(HX_("BINDIR",e6,a6,90,9f),HX_("AppleTV",3c,81,7c,1b));
            				}
            				else {
HXLINE(1868)					if (defines->exists(HX_("appletvsim",3b,eb,d2,31))) {
HXLINE(1870)						defines->set(HX_("toolchain",a9,1a,50,de),HX_("appletvsim",3b,eb,d2,31));
HXLINE(1871)						defines->set(HX_("appletv",5c,75,2b,4e),HX_("appletv",5c,75,2b,4e));
HXLINE(1872)						defines->set(HX_("apple",5a,85,3b,24),HX_("apple",5a,85,3b,24));
HXLINE(1873)						defines->set(HX_("BINDIR",e6,a6,90,9f),HX_("AppleTV",3c,81,7c,1b));
            					}
            					else {
HXLINE(1875)						if (defines->exists(HX_("watchos",33,e9,52,29))) {
HXLINE(1877)							defines->set(HX_("toolchain",a9,1a,50,de),HX_("watchos",33,e9,52,29));
HXLINE(1878)							defines->set(HX_("apple",5a,85,3b,24),HX_("apple",5a,85,3b,24));
HXLINE(1879)							defines->set(HX_("applewatch",b5,ea,25,de),HX_("applewatch",b5,ea,25,de));
HXLINE(1880)							defines->set(HX_("BINDIR",e6,a6,90,9f),HX_("watchos",33,e9,52,29));
            						}
            						else {
HXLINE(1882)							if (defines->exists(HX_("watchsimulator",d5,a8,c7,cf))) {
HXLINE(1884)								defines->set(HX_("toolchain",a9,1a,50,de),HX_("watchsimulator",d5,a8,c7,cf));
HXLINE(1885)								defines->set(HX_("applewatch",b5,ea,25,de),HX_("applewatch",b5,ea,25,de));
HXLINE(1886)								defines->set(HX_("apple",5a,85,3b,24),HX_("apple",5a,85,3b,24));
HXLINE(1887)								defines->set(HX_("BINDIR",e6,a6,90,9f),HX_("watchsimulator",d5,a8,c7,cf));
            							}
            							else {
HXLINE(1890)								if (defines->exists(HX_("android",2f,9b,a4,9c))) {
HXLINE(1892)									defines->set(HX_("toolchain",a9,1a,50,de),HX_("android",2f,9b,a4,9c));
HXLINE(1893)									defines->set(HX_("android",2f,9b,a4,9c),HX_("android",2f,9b,a4,9c));
HXLINE(1894)									defines->set(HX_("BINDIR",e6,a6,90,9f),HX_("Android",0f,c3,f5,69));
HXLINE(1896)									if (!(defines->exists(HX_("ANDROID_HOST",d8,4d,d4,2f)))) {
HXLINE(1898)										if ( ::EReg_obj::__alloc( HX_CTX ,HX_("mac",8f,0a,53,00),HX_("i",69,00,00,00))->match(::BuildTool_obj::os)) {
HXLINE(1899)											defines->set(HX_("ANDROID_HOST",d8,4d,d4,2f),HX_("darwin-x86_64",8d,99,97,b3));
            										}
            										else {
HXLINE(1900)											if ( ::EReg_obj::__alloc( HX_CTX ,HX_("window",f0,93,8c,52),HX_("i",69,00,00,00))->match(::BuildTool_obj::os)) {
HXLINE(1902)												defines->set(HX_("windows_host",e4,91,0a,86),HX_("1",31,00,00,00));
HXLINE(1903)												defines->set(HX_("ANDROID_HOST",d8,4d,d4,2f),HX_("windows",83,de,74,e8));
            											}
            											else {
HXLINE(1905)												if ( ::EReg_obj::__alloc( HX_CTX ,HX_("linux",f4,eb,01,75),HX_("i",69,00,00,00))->match(::BuildTool_obj::os)) {
HXLINE(1906)													defines->set(HX_("ANDROID_HOST",d8,4d,d4,2f),HX_("linux-x86_64",20,ae,79,1c));
            												}
            												else {
HXLINE(1909)													::Log_obj::error(((HX_("Unknown android host \"",31,3a,ff,14) + ::BuildTool_obj::os) + HX_("\"",22,00,00,00)),null(),null(),null());
            												}
            											}
            										}
            									}
            								}
            								else {
HXLINE(1914)									if (defines->exists(HX_("webos",b8,52,bc,c7))) {
HXLINE(1916)										defines->set(HX_("toolchain",a9,1a,50,de),HX_("webos",b8,52,bc,c7));
HXLINE(1917)										defines->set(HX_("webos",b8,52,bc,c7),HX_("webos",b8,52,bc,c7));
HXLINE(1918)										defines->set(HX_("BINDIR",e6,a6,90,9f),HX_("webOS",b8,36,bc,c7));
            									}
            									else {
HXLINE(1920)										if (defines->exists(HX_("tizen",0e,9d,3f,10))) {
HXLINE(1922)											defines->set(HX_("toolchain",a9,1a,50,de),HX_("tizen",0e,9d,3f,10));
HXLINE(1923)											defines->set(HX_("tizen",0e,9d,3f,10),HX_("tizen",0e,9d,3f,10));
HXLINE(1924)											defines->set(HX_("BINDIR",e6,a6,90,9f),HX_("Tizen",ee,0c,6d,a3));
            										}
            										else {
HXLINE(1926)											if (defines->exists(HX_("blackberry",b7,40,d2,d3))) {
HXLINE(1928)												defines->set(HX_("toolchain",a9,1a,50,de),HX_("blackberry",b7,40,d2,d3));
HXLINE(1929)												defines->set(HX_("blackberry",b7,40,d2,d3),HX_("blackberry",b7,40,d2,d3));
HXLINE(1930)												defines->set(HX_("BINDIR",e6,a6,90,9f),HX_("BlackBerry",b7,b4,b0,5d));
            											}
            											else {
HXLINE(1932)												bool _hx_tmp;
HXDLIN(1932)												if (!(defines->exists(HX_("emcc",08,99,15,43)))) {
HXLINE(1932)													_hx_tmp = defines->exists(HX_("emscripten",9c,7f,c3,c8));
            												}
            												else {
HXLINE(1932)													_hx_tmp = true;
            												}
HXDLIN(1932)												if (_hx_tmp) {
HXLINE(1934)													defines->set(HX_("toolchain",a9,1a,50,de),HX_("emscripten",9c,7f,c3,c8));
HXLINE(1935)													defines->set(HX_("emcc",08,99,15,43),HX_("emcc",08,99,15,43));
HXLINE(1936)													defines->set(HX_("emscripten",9c,7f,c3,c8),HX_("emscripten",9c,7f,c3,c8));
HXLINE(1937)													defines->set(HX_("BINDIR",e6,a6,90,9f),HX_("Emscripten",bc,83,74,bf));
            												}
            												else {
HXLINE(1939)													if (defines->exists(HX_("gph",1f,8a,4e,00))) {
HXLINE(1941)														defines->set(HX_("toolchain",a9,1a,50,de),HX_("gph",1f,8a,4e,00));
HXLINE(1942)														defines->set(HX_("gph",1f,8a,4e,00),HX_("gph",1f,8a,4e,00));
HXLINE(1943)														defines->set(HX_("BINDIR",e6,a6,90,9f),HX_("GPH",ff,25,36,00));
            													}
            													else {
HXLINE(1945)														if (defines->exists(HX_("gcw0",f5,80,60,44))) {
HXLINE(1947)															defines->set(HX_("toolchain",a9,1a,50,de),HX_("gcw0",f5,80,60,44));
HXLINE(1948)															defines->set(HX_("gcw0",f5,80,60,44),HX_("gcw0",f5,80,60,44));
HXLINE(1949)															defines->set(HX_("BINDIR",e6,a6,90,9f),HX_("GCW0",15,49,21,2f));
            														}
            														else {
HXLINE(1951)															bool _hx_tmp1;
HXDLIN(1951)															if (!(defines->exists(HX_("cygwin",cb,8b,40,85)))) {
HXLINE(1951)																_hx_tmp1 = defines->exists(HX_("HXCPP_CYGWIN",d7,d5,37,8f));
            															}
            															else {
HXLINE(1951)																_hx_tmp1 = true;
            															}
HXDLIN(1951)															if (_hx_tmp1) {
HXLINE(1953)																::BuildTool_obj::set64(defines,this->m64,null());
HXLINE(1954)																defines->set(HX_("toolchain",a9,1a,50,de),HX_("cygwin",cb,8b,40,85));
HXLINE(1955)																defines->set(HX_("cygwin",cb,8b,40,85),HX_("cygwin",cb,8b,40,85));
HXLINE(1956)																defines->set(HX_("linux",f4,eb,01,75),HX_("linux",f4,eb,01,75));
HXLINE(1957)																::String _hx_tmp2;
HXDLIN(1957)																if (this->m64) {
HXLINE(1957)																	_hx_tmp2 = HX_("Cygwin64",e9,3f,05,99);
            																}
            																else {
HXLINE(1957)																	_hx_tmp2 = HX_("Cygwin",eb,ff,d4,b9);
            																}
HXDLIN(1957)																defines->set(HX_("BINDIR",e6,a6,90,9f),_hx_tmp2);
            															}
            															else {
HXLINE(1959)																if ( ::EReg_obj::__alloc( HX_CTX ,HX_("window",f0,93,8c,52),HX_("i",69,00,00,00))->match(::BuildTool_obj::os)) {
HXLINE(1961)																	defines->set(HX_("windows_host",e4,91,0a,86),HX_("1",31,00,00,00));
HXLINE(1963)																	if (defines->exists(HX_("rpi",eb,e2,56,00))) {
HXLINE(1965)																		defines->set(HX_("toolchain",a9,1a,50,de),HX_("linux",f4,eb,01,75));
HXLINE(1966)																		defines->set(HX_("xcompile",fb,a3,14,53),HX_("1",31,00,00,00));
HXLINE(1967)																		defines->set(HX_("linux",f4,eb,01,75),HX_("linux",f4,eb,01,75));
HXLINE(1968)																		defines->set(HX_("rpi",eb,e2,56,00),HX_("1",31,00,00,00));
HXLINE(1969)																		defines->set(HX_("hardfp",f5,58,a2,ba),HX_("1",31,00,00,00));
HXLINE(1970)																		defines->set(HX_("BINDIR",e6,a6,90,9f),HX_("RPi",eb,7e,3e,00));
            																	}
            																	else {
HXLINE(1974)																		::BuildTool_obj::set64(defines,this->m64,this->arm64);
HXLINE(1975)																		defines->set(HX_("windows",83,de,74,e8),HX_("windows",83,de,74,e8));
HXLINE(1976)																		::String _hx_tmp3;
HXDLIN(1976)																		if (this->arm64) {
HXLINE(1976)																			_hx_tmp3 = HX_("WindowsArm64",37,df,b1,0e);
            																		}
            																		else {
HXLINE(1976)																			if (this->m64) {
HXLINE(1976)																				_hx_tmp3 = HX_("Windows64",61,d4,1e,38);
            																			}
            																			else {
HXLINE(1976)																				_hx_tmp3 = HX_("Windows",63,06,c6,b5);
            																			}
            																		}
HXDLIN(1976)																		defines->set(HX_("BINDIR",e6,a6,90,9f),_hx_tmp3);
HXLINE(1979)																		bool useMsvc = true;
HXLINE(1981)																		bool _hx_tmp4;
HXDLIN(1981)																		bool _hx_tmp5;
HXDLIN(1981)																		if (!(defines->exists(HX_("mingw",42,74,68,08)))) {
HXLINE(1981)																			_hx_tmp5 = defines->exists(HX_("HXCPP_MINGW",96,93,0c,ee));
            																		}
            																		else {
HXLINE(1981)																			_hx_tmp5 = true;
            																		}
HXDLIN(1981)																		if (!(_hx_tmp5)) {
HXLINE(1981)																			_hx_tmp4 = defines->exists(HX_("minimingw",4b,e2,94,28));
            																		}
            																		else {
HXLINE(1981)																			_hx_tmp4 = true;
            																		}
HXDLIN(1981)																		if (_hx_tmp4) {
HXLINE(1982)																			useMsvc = false;
            																		}
            																		else {
HXLINE(1983)																			bool _hx_tmp6;
HXDLIN(1983)																			if (!(defines->exists(HX_("winrt",de,4a,6a,ca)))) {
HXLINE(1983)																				_hx_tmp6 = defines->exists(HX_("HXCPP_MSVC_VER",e3,b5,99,79));
            																			}
            																			else {
HXLINE(1983)																				_hx_tmp6 = true;
            																			}
HXDLIN(1983)																			if (_hx_tmp6) {
HXLINE(1984)																				useMsvc = true;
            																			}
            																			else {
HXLINE(1987)																				{
HXLINE(1987)																					int _g = 8;
HXDLIN(1987)																					while((_g < 24)){
HXLINE(1987)																						_g = (_g + 1);
HXDLIN(1987)																						int i = (_g - 1);
HXLINE(1989)																						if (::hx::IsNotNull( ::Sys_obj::getEnv(((HX_("VS",3d,4b,00,00) + i) + HX_("0COMNTOOLS",9e,d3,9d,2d))) )) {
HXLINE(1991)																							useMsvc = true;
HXLINE(1992)																							goto _hx_goto_60;
            																						}
            																					}
            																					_hx_goto_60:;
            																				}
HXLINE(1996)																				::String _hx_tmp7;
HXDLIN(1996)																				if (useMsvc) {
HXLINE(1996)																					_hx_tmp7 = HX_("MSVC",13,b4,24,33);
            																				}
            																				else {
HXLINE(1996)																					_hx_tmp7 = HX_("MinGW",22,c8,95,9b);
            																				}
HXDLIN(1996)																				::Log_obj::info(HX_("",00,00,00,00),(HX_("Using Windows compiler: ",1e,a8,7a,fd) + _hx_tmp7));
            																			}
            																		}
HXLINE(1999)																		if (useMsvc) {
HXLINE(2001)																			defines->set(HX_("toolchain",a9,1a,50,de),HX_("msvc",13,ec,63,48));
HXLINE(2002)																			if (defines->exists(HX_("winrt",de,4a,6a,ca))) {
HXLINE(2003)																				::String _hx_tmp8;
HXDLIN(2003)																				if (this->m64) {
HXLINE(2003)																					_hx_tmp8 = HX_("WinRT64",7c,79,cb,a9);
            																				}
            																				else {
HXLINE(2003)																					_hx_tmp8 = HX_("WinRT",be,9e,97,5d);
            																				}
HXDLIN(2003)																				defines->set(HX_("BINDIR",e6,a6,90,9f),_hx_tmp8);
            																			}
            																		}
            																		else {
HXLINE(2007)																			defines->set(HX_("toolchain",a9,1a,50,de),HX_("mingw",42,74,68,08));
HXLINE(2008)																			defines->set(HX_("mingw",42,74,68,08),HX_("mingw",42,74,68,08));
            																		}
            																	}
            																}
            																else {
HXLINE(2012)																	if (::BuildTool_obj::isRPi) {
HXLINE(2014)																		defines->set(HX_("toolchain",a9,1a,50,de),HX_("linux",f4,eb,01,75));
HXLINE(2015)																		defines->set(HX_("linux",f4,eb,01,75),HX_("linux",f4,eb,01,75));
HXLINE(2016)																		defines->set(HX_("rpi",eb,e2,56,00),HX_("1",31,00,00,00));
HXLINE(2017)																		defines->set(HX_("hardfp",f5,58,a2,ba),HX_("1",31,00,00,00));
HXLINE(2018)																		defines->set(HX_("BINDIR",e6,a6,90,9f),HX_("RPi",eb,7e,3e,00));
            																	}
            																	else {
HXLINE(2020)																		if ( ::EReg_obj::__alloc( HX_CTX ,HX_("linux",f4,eb,01,75),HX_("i",69,00,00,00))->match(::BuildTool_obj::os)) {
HXLINE(2022)																			::BuildTool_obj::set64(defines,this->m64,this->arm64);
HXLINE(2024)																			if (defines->exists(HX_("windows",83,de,74,e8))) {
HXLINE(2026)																				defines->set(HX_("toolchain",a9,1a,50,de),HX_("mingw",42,74,68,08));
HXLINE(2027)																				defines->set(HX_("xcompile",fb,a3,14,53),HX_("1",31,00,00,00));
HXLINE(2028)																				::String _hx_tmp9;
HXDLIN(2028)																				if (this->arm64) {
HXLINE(2028)																					_hx_tmp9 = HX_("WindowsArm64",37,df,b1,0e);
            																				}
            																				else {
HXLINE(2028)																					if (this->m64) {
HXLINE(2028)																						_hx_tmp9 = HX_("Windows64",61,d4,1e,38);
            																					}
            																					else {
HXLINE(2028)																						_hx_tmp9 = HX_("Windows",63,06,c6,b5);
            																					}
            																				}
HXDLIN(2028)																				defines->set(HX_("BINDIR",e6,a6,90,9f),_hx_tmp9);
            																			}
            																			else {
HXLINE(2032)																				defines->set(HX_("toolchain",a9,1a,50,de),HX_("linux",f4,eb,01,75));
HXLINE(2033)																				defines->set(HX_("linux",f4,eb,01,75),HX_("linux",f4,eb,01,75));
HXLINE(2035)																				if (defines->exists(HX_("HXCPP_LINUX_ARMV7",e6,e4,aa,98))) {
HXLINE(2037)																					defines->set(HX_("noM32",8b,18,ad,9f),HX_("1",31,00,00,00));
HXLINE(2038)																					defines->set(HX_("noM64",2a,1b,ad,9f),HX_("1",31,00,00,00));
HXLINE(2039)																					defines->set(HX_("HXCPP_ARMV7",d1,d3,2f,0b),HX_("1",31,00,00,00));
HXLINE(2040)																					this->m64 = false;
            																				}
            																				else {
HXLINE(2042)																					bool _hx_tmp10;
HXDLIN(2042)																					if (!(this->arm64)) {
HXLINE(2042)																						_hx_tmp10 = defines->exists(HX_("HXCPP_LINUX_ARM64",03,c9,aa,98));
            																					}
            																					else {
HXLINE(2042)																						_hx_tmp10 = true;
            																					}
HXDLIN(2042)																					if (_hx_tmp10) {
HXLINE(2044)																						defines->set(HX_("noM32",8b,18,ad,9f),HX_("1",31,00,00,00));
HXLINE(2045)																						defines->set(HX_("noM64",2a,1b,ad,9f),HX_("1",31,00,00,00));
HXLINE(2046)																						defines->set(HX_("HXCPP_ARM64",ee,b7,2f,0b),HX_("1",31,00,00,00));
HXLINE(2047)																						this->m64 = true;
            																					}
            																				}
HXLINE(2049)																				::String _hx_tmp11;
HXDLIN(2049)																				if (this->m64) {
HXLINE(2049)																					_hx_tmp11 = HX_("Linux64",12,28,9d,f7);
            																				}
            																				else {
HXLINE(2049)																					_hx_tmp11 = HX_("Linux",d4,5b,2f,08);
            																				}
HXDLIN(2049)																				defines->set(HX_("BINDIR",e6,a6,90,9f),_hx_tmp11);
            																			}
            																		}
            																		else {
HXLINE(2052)																			if ( ::EReg_obj::__alloc( HX_CTX ,HX_("mac",8f,0a,53,00),HX_("i",69,00,00,00))->match(::BuildTool_obj::os)) {
HXLINE(2054)																				::BuildTool_obj::set64(defines,this->m64,this->arm64);
HXLINE(2056)																				if (defines->exists(HX_("linux",f4,eb,01,75))) {
HXLINE(2058)																					defines->set(HX_("mac_host",58,3a,95,a9),HX_("1",31,00,00,00));
HXLINE(2059)																					defines->set(HX_("linux",f4,eb,01,75),HX_("linux",f4,eb,01,75));
HXLINE(2060)																					defines->set(HX_("toolchain",a9,1a,50,de),HX_("linux",f4,eb,01,75));
HXLINE(2061)																					defines->set(HX_("xcompile",fb,a3,14,53),HX_("1",31,00,00,00));
HXLINE(2062)																					::String _hx_tmp12;
HXDLIN(2062)																					if (this->m64) {
HXLINE(2062)																						_hx_tmp12 = HX_("Linux64",12,28,9d,f7);
            																					}
            																					else {
HXLINE(2062)																						_hx_tmp12 = HX_("Linux",d4,5b,2f,08);
            																					}
HXDLIN(2062)																					defines->set(HX_("BINDIR",e6,a6,90,9f),_hx_tmp12);
            																				}
            																				else {
HXLINE(2066)																					defines->set(HX_("toolchain",a9,1a,50,de),HX_("mac",8f,0a,53,00));
HXLINE(2067)																					defines->set(HX_("macos",73,6d,16,03),HX_("macos",73,6d,16,03));
HXLINE(2068)																					defines->set(HX_("apple",5a,85,3b,24),HX_("apple",5a,85,3b,24));
HXLINE(2069)																					::String _hx_tmp13;
HXDLIN(2069)																					if (this->arm64) {
HXLINE(2069)																						_hx_tmp13 = HX_("MacArm64",ab,f7,db,43);
            																					}
            																					else {
HXLINE(2069)																						if (this->m64) {
HXLINE(2069)																							_hx_tmp13 = HX_("Mac64",6d,ab,43,96);
            																						}
            																						else {
HXLINE(2069)																							_hx_tmp13 = HX_("Mac",6f,c2,3a,00);
            																						}
            																					}
HXDLIN(2069)																					defines->set(HX_("BINDIR",e6,a6,90,9f),_hx_tmp13);
            																				}
            																			}
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BuildTool_obj,setDefaultToolchain,(void))

void BuildTool_obj::setupAppleDirectories( ::haxe::ds::StringMap defines){
            	HX_GC_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_2077_setupAppleDirectories)
HXLINE(2078)		if (defines->exists(HX_("HXCPP_CLEAN_ONLY",4e,97,f9,5d))) {
HXLINE(2079)			return;
            		}
HXLINE(2081)		bool _hx_tmp;
HXDLIN(2081)		if (defines->exists(HX_("apple",5a,85,3b,24))) {
HXLINE(2081)			_hx_tmp = !(defines->exists(HX_("DEVELOPER_DIR",58,4e,f0,af)));
            		}
            		else {
HXLINE(2081)			_hx_tmp = false;
            		}
HXDLIN(2081)		if (_hx_tmp) {
HXLINE(2083)			::String developer_dir = ::ProcessManager_obj::runProcessLine(HX_("",00,00,00,00),HX_("xcode-select",e4,db,b5,b8),::Array_obj< ::String >::fromData( _hx_array_data_8f107186_67,1),true,false,null(),null());
HXLINE(2084)			bool _hx_tmp1;
HXDLIN(2084)			bool _hx_tmp2;
HXDLIN(2084)			if (::hx::IsNotNull( developer_dir )) {
HXLINE(2084)				_hx_tmp2 = (developer_dir == HX_("",00,00,00,00));
            			}
            			else {
HXLINE(2084)				_hx_tmp2 = true;
            			}
HXDLIN(2084)			if (!(_hx_tmp2)) {
HXLINE(2084)				_hx_tmp1 = (developer_dir.indexOf(HX_("Run xcode-select",f9,8d,ac,fb),null()) > -1);
            			}
            			else {
HXLINE(2084)				_hx_tmp1 = true;
            			}
HXDLIN(2084)			if (_hx_tmp1) {
HXLINE(2085)				developer_dir = HX_("/Applications/Xcode.app/Contents/Developer",09,70,31,a9);
            			}
HXLINE(2086)			if ((developer_dir == HX_("/Developer",1b,c5,9d,ec))) {
HXLINE(2087)				defines->set(HX_("LEGACY_XCODE_LOCATION",e5,b3,82,45),HX_("1",31,00,00,00));
            			}
HXLINE(2088)			defines->set(HX_("DEVELOPER_DIR",58,4e,f0,af),developer_dir);
            		}
HXLINE(2091)		bool _hx_tmp3;
HXDLIN(2091)		if (defines->exists(HX_("iphone",65,a6,6c,bd))) {
HXLINE(2091)			_hx_tmp3 = !(defines->exists(HX_("IPHONE_VER",29,ac,85,d5)));
            		}
            		else {
HXLINE(2091)			_hx_tmp3 = false;
            		}
HXDLIN(2091)		if (_hx_tmp3) {
HXLINE(2093)			::String dev_path = (defines->get(HX_("DEVELOPER_DIR",58,4e,f0,af)) + HX_("/Platforms/iPhoneOS.platform/Developer/SDKs/",bc,0e,2c,d6));
HXLINE(2094)			if (::sys::FileSystem_obj::exists(dev_path)) {
HXLINE(2096)				::String best = HX_("0.0",72,94,24,00);
HXLINE(2097)				::Array< ::String > files = ::sys::FileSystem_obj::readDirectory(dev_path);
HXLINE(2098)				 ::EReg extract_version =  ::EReg_obj::__alloc( HX_CTX ,HX_("^iPhoneOS(.*).sdk$",0c,8a,d2,e7),HX_("",00,00,00,00));
HXLINE(2099)				{
HXLINE(2099)					int _g = 0;
HXDLIN(2099)					while((_g < files->length)){
HXLINE(2099)						::String file = files->__get(_g);
HXDLIN(2099)						_g = (_g + 1);
HXLINE(2101)						if (extract_version->match(file)) {
HXLINE(2103)							::String ver = extract_version->matched(1);
HXLINE(2104)							Float _hx_tmp4 = ::Std_obj::parseFloat(ver);
HXDLIN(2104)							if ((_hx_tmp4 > ::Std_obj::parseFloat(best))) {
HXLINE(2105)								best = ver;
            							}
            						}
            					}
            				}
HXLINE(2108)				if ((best != HX_("0.0",72,94,24,00))) {
HXLINE(2109)					defines->set(HX_("IPHONE_VER",29,ac,85,d5),best);
            				}
            			}
            		}
HXLINE(2113)		bool _hx_tmp5;
HXDLIN(2113)		if (defines->exists(HX_("appletv",5c,75,2b,4e))) {
HXLINE(2113)			_hx_tmp5 = !(defines->exists(HX_("TVOS_VER",6a,c1,43,5c)));
            		}
            		else {
HXLINE(2113)			_hx_tmp5 = false;
            		}
HXDLIN(2113)		if (_hx_tmp5) {
HXLINE(2115)			::String dev_path1 = (defines->get(HX_("DEVELOPER_DIR",58,4e,f0,af)) + HX_("/Platforms/AppleTVOS.platform/Developer/SDKs/",21,6a,c6,b6));
HXLINE(2116)			if (::sys::FileSystem_obj::exists(dev_path1)) {
HXLINE(2118)				::String best1 = HX_("0.0",72,94,24,00);
HXLINE(2119)				::Array< ::String > files1 = ::sys::FileSystem_obj::readDirectory(dev_path1);
HXLINE(2120)				 ::EReg extract_version1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("^AppleTVOS(.*).sdk$",71,de,62,f1),HX_("",00,00,00,00));
HXLINE(2121)				{
HXLINE(2121)					int _g1 = 0;
HXDLIN(2121)					while((_g1 < files1->length)){
HXLINE(2121)						::String file1 = files1->__get(_g1);
HXDLIN(2121)						_g1 = (_g1 + 1);
HXLINE(2123)						if (extract_version1->match(file1)) {
HXLINE(2125)							::String ver1 = extract_version1->matched(1);
HXLINE(2126)							Float _hx_tmp6 = ::Std_obj::parseFloat(ver1);
HXDLIN(2126)							if ((_hx_tmp6 > ::Std_obj::parseFloat(best1))) {
HXLINE(2127)								best1 = ver1;
            							}
            						}
            					}
            				}
HXLINE(2130)				if ((best1 != HX_("0.0",72,94,24,00))) {
HXLINE(2131)					defines->set(HX_("TVOS_VER",6a,c1,43,5c),best1);
            				}
            			}
            		}
HXLINE(2136)		bool _hx_tmp7;
HXDLIN(2136)		if (defines->exists(HX_("applewatch",b5,ea,25,de))) {
HXLINE(2136)			_hx_tmp7 = !(defines->exists(HX_("WATCHOS_VER",d7,05,73,1f)));
            		}
            		else {
HXLINE(2136)			_hx_tmp7 = false;
            		}
HXDLIN(2136)		if (_hx_tmp7) {
HXLINE(2138)			::String dev_path2 = (defines->get(HX_("DEVELOPER_DIR",58,4e,f0,af)) + HX_("/Platforms/WatchOS.platform/Developer/SDKs/",8e,6a,0d,07));
HXLINE(2139)			if (::sys::FileSystem_obj::exists(dev_path2)) {
HXLINE(2141)				::String best2 = HX_("0.0",72,94,24,00);
HXLINE(2142)				::Array< ::String > files2 = ::sys::FileSystem_obj::readDirectory(dev_path2);
HXLINE(2143)				 ::EReg extract_version2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("^WatchOS(.*).sdk$",de,14,72,79),HX_("",00,00,00,00));
HXLINE(2144)				{
HXLINE(2144)					int _g2 = 0;
HXDLIN(2144)					while((_g2 < files2->length)){
HXLINE(2144)						::String file2 = files2->__get(_g2);
HXDLIN(2144)						_g2 = (_g2 + 1);
HXLINE(2146)						if (extract_version2->match(file2)) {
HXLINE(2148)							::String ver2 = extract_version2->matched(1);
HXLINE(2149)							Float _hx_tmp8 = ::Std_obj::parseFloat(ver2);
HXDLIN(2149)							if ((_hx_tmp8 > ::Std_obj::parseFloat(best2))) {
HXLINE(2150)								best2 = ver2;
            							}
            						}
            					}
            				}
HXLINE(2153)				if ((best2 != HX_("0.0",72,94,24,00))) {
HXLINE(2154)					defines->set(HX_("WATCHOS_VER",d7,05,73,1f),best2);
            				}
            			}
            		}
HXLINE(2159)		bool _hx_tmp9;
HXDLIN(2159)		if (defines->exists(HX_("macos",73,6d,16,03))) {
HXLINE(2159)			_hx_tmp9 = !(defines->exists(HX_("MACOSX_VER",69,fd,f3,4c)));
            		}
            		else {
HXLINE(2159)			_hx_tmp9 = false;
            		}
HXDLIN(2159)		if (_hx_tmp9) {
HXLINE(2161)			::String dev_path3 = (defines->get(HX_("DEVELOPER_DIR",58,4e,f0,af)) + HX_("/Platforms/MacOSX.platform/Developer/SDKs/",c0,29,62,fe));
HXLINE(2162)			if (::sys::FileSystem_obj::exists(dev_path3)) {
HXLINE(2164)				::String best3 = HX_("0.0",72,94,24,00);
HXLINE(2165)				::Array< ::String > files3 = ::sys::FileSystem_obj::readDirectory(dev_path3);
HXLINE(2166)				 ::EReg extract_version3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("^MacOSX(.*).sdk$",10,bd,f2,18),HX_("",00,00,00,00));
HXLINE(2167)				{
HXLINE(2167)					int _g3 = 0;
HXDLIN(2167)					while((_g3 < files3->length)){
HXLINE(2167)						::String file3 = files3->__get(_g3);
HXDLIN(2167)						_g3 = (_g3 + 1);
HXLINE(2169)						if (extract_version3->match(file3)) {
HXLINE(2171)							::String ver3 = extract_version3->matched(1);
HXLINE(2172)							::Array< ::String > split_best = best3.split(HX_(".",2e,00,00,00));
HXLINE(2173)							::Array< ::String > split_ver = ver3.split(HX_(".",2e,00,00,00));
HXLINE(2174)							bool _hx_tmp10;
HXDLIN(2174)							Float _hx_tmp11 = ::Std_obj::parseFloat(split_ver->__get(0));
HXDLIN(2174)							if (!((_hx_tmp11 > ::Std_obj::parseFloat(split_best->__get(0))))) {
HXLINE(2174)								Float _hx_tmp12 = ::Std_obj::parseFloat(split_ver->__get(1));
HXDLIN(2174)								_hx_tmp10 = (_hx_tmp12 > ::Std_obj::parseFloat(split_best->__get(1)));
            							}
            							else {
HXLINE(2174)								_hx_tmp10 = true;
            							}
HXDLIN(2174)							if (_hx_tmp10) {
HXLINE(2175)								best3 = ver3;
            							}
            						}
            					}
            				}
HXLINE(2178)				if ((best3 != HX_("0.0",72,94,24,00))) {
HXLINE(2179)					defines->set(HX_("MACOSX_VER",69,fd,f3,4c),best3);
            				}
            				else {
HXLINE(2181)					::Log_obj::info(HX_("",00,00,00,00),HX_("Could not find MACOSX_VER!",7d,71,96,08));
            				}
            			}
            		}
HXLINE(2185)		if (!(::sys::FileSystem_obj::exists((defines->get(HX_("DEVELOPER_DIR",58,4e,f0,af)) + HX_("/Platforms/MacOSX.platform/Developer/SDKs/",c0,29,62,fe))))) {
HXLINE(2187)			defines->set(HX_("LEGACY_MACOSX_SDK",36,5f,92,8c),HX_("1",31,00,00,00));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BuildTool_obj,setupAppleDirectories,(void))

void BuildTool_obj::parseXML( ::Xml inXML,::String inSection,bool forceRelative){
            	HX_GC_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_2193_parseXML)
HXDLIN(2193)		 ::Dynamic el = inXML->elements();
HXDLIN(2193)		while(( (bool)(el->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXDLIN(2193)			 ::Xml el1 = ( ( ::Xml)(el->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(2195)			if (this->valid(el1,inSection)) {
HXLINE(2197)				::String _g;
HXDLIN(2197)				if ((el1->nodeType == ::Xml_obj::Document)) {
HXLINE(2197)					_g = HX_("Document",3b,ab,c4,74);
            				}
            				else {
HXLINE(2197)					if ((el1->nodeType != ::Xml_obj::Element)) {
HXLINE(2197)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(el1->nodeType)));
            					}
HXDLIN(2197)					_g = el1->nodeName;
            				}
HXDLIN(2197)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("compiler",9f,9f,d1,7d)) ){
HXLINE(2227)					this->mCompiler = this->createCompiler(el1,this->mCompiler);
HXDLIN(2227)					goto _hx_goto_69;
            				}
            				if (  (_hx_switch_0==HX_("copy",b5,bb,c4,41)) ){
HXLINE(2279)					::String from = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("from",6a,a5,c2,43)),null());
HXLINE(2280)					from = ::PathManager_obj::combine(::haxe::io::Path_obj::directory(this->mCurrentIncludeFile),from);
HXLINE(2281)					::String to = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("to",7b,65,00,00)),null());
HXLINE(2282)					to = ::PathManager_obj::combine(::haxe::io::Path_obj::directory(this->mCurrentIncludeFile),to);
HXLINE(2283)					::BuildTool_obj::copy(from,to);
HXLINE(2278)					goto _hx_goto_69;
            				}
            				if (  (_hx_switch_0==HX_("copyFile",d1,34,5a,c8)) ){
HXLINE(2286)					::Array< ::Dynamic> _hx_tmp = this->mCopyFiles;
HXLINE(2287)					::String _hx_tmp1 = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null());
HXLINE(2288)					::String _hx_tmp2 = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("from",6a,a5,c2,43)),null());
HXLINE(2289)					bool _hx_tmp3;
HXDLIN(2289)					if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("allowMissing",dd,d5,bd,74))) {
HXLINE(2289)						_hx_tmp3 = this->subBool(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("allowMissing",dd,d5,bd,74)));
            					}
            					else {
HXLINE(2289)						_hx_tmp3 = false;
            					}
HXLINE(2290)					::String _hx_tmp4;
HXDLIN(2290)					if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("overwrite",0b,8b,ed,a0))) {
HXLINE(2290)						_hx_tmp4 = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("overwrite",0b,8b,ed,a0)),null());
            					}
            					else {
HXLINE(2290)						_hx_tmp4 = HX_("always",cf,0e,d7,46);
            					}
HXLINE(2291)					::String _hx_tmp5;
HXDLIN(2291)					if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("toolId",53,21,91,94))) {
HXLINE(2291)						_hx_tmp5 = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("toolId",53,21,91,94)),null());
            					}
            					else {
HXLINE(2291)						_hx_tmp5 = null();
            					}
HXLINE(2286)					_hx_tmp->push( ::CopyFile_obj::__alloc( HX_CTX ,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5));
HXDLIN(2286)					goto _hx_goto_69;
            				}
            				if (  (_hx_switch_0==HX_("echo",e5,06,0e,43)) ){
HXLINE(2210)					::Log_obj::info(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null()),null());
HXDLIN(2210)					goto _hx_goto_69;
            				}
            				if (  (_hx_switch_0==HX_("error",c8,cb,29,73)) ){
HXLINE(2217)					::String error = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null());
HXLINE(2218)					::Log_obj::error(error,null(),null(),null());
HXLINE(2216)					goto _hx_goto_69;
            				}
            				if (  (_hx_switch_0==HX_("files",77,de,98,00)) ){
HXLINE(2246)					::String name = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("id",db,5b,00,00)),null());
HXLINE(2247)					::String tags;
HXDLIN(2247)					if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("tags",d9,b4,f6,4c))) {
HXLINE(2247)						tags = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("tags",d9,b4,f6,4c)),null());
            					}
            					else {
HXLINE(2247)						tags = null();
            					}
HXLINE(2248)					if (this->mFileGroups->exists(name)) {
HXLINE(2249)						this->createFileGroup(el1,( ( ::FileGroup)(this->mFileGroups->get(name)) ),name,false,tags);
            					}
            					else {
HXLINE(2251)						 ::haxe::ds::StringMap _hx_tmp6 = this->mFileGroups;
HXDLIN(2251)						_hx_tmp6->set(name,this->createFileGroup(el1,null(),name,forceRelative,tags));
            					}
HXLINE(2245)					goto _hx_goto_69;
            				}
            				if (  (_hx_switch_0==HX_("import",65,a1,82,08)) ||  (_hx_switch_0==HX_("include",28,fe,f6,51)) ){
HXLINE(2253)					::String name1 = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null());
HXLINE(2254)					::String section;
HXDLIN(2254)					if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("section",e5,05,d8,5d))) {
HXLINE(2254)						section = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("section",e5,05,d8,5d)),null());
            					}
            					else {
HXLINE(2254)						section = HX_("",00,00,00,00);
            					}
HXLINE(2255)					bool _hx_tmp7 = ::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("noerror",e7,df,ff,b2));
HXDLIN(2255)					::String _hx_tmp8;
HXDLIN(2255)					if ((el1->nodeType == ::Xml_obj::Document)) {
HXLINE(2255)						_hx_tmp8 = HX_("Document",3b,ab,c4,74);
            					}
            					else {
HXLINE(2255)						if ((el1->nodeType != ::Xml_obj::Element)) {
HXLINE(2255)							HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(el1->nodeType)));
            						}
HXDLIN(2255)						_hx_tmp8 = el1->nodeName;
            					}
HXDLIN(2255)					this->include(name1,section,_hx_tmp7,(_hx_tmp8 == HX_("import",65,a1,82,08)));
HXLINE(2252)					goto _hx_goto_69;
            				}
            				if (  (_hx_switch_0==HX_("linker",e7,e2,a4,ec)) ){
HXLINE(2240)					::String name2 = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("id",db,5b,00,00)),null());
HXLINE(2241)					if (this->mLinkers->exists(name2)) {
HXLINE(2242)						this->createLinker(el1,( ( ::Linker)(this->mLinkers->get(name2)) ));
            					}
            					else {
HXLINE(2244)						 ::haxe::ds::StringMap _hx_tmp9 = this->mLinkers;
HXDLIN(2244)						_hx_tmp9->set(name2,this->createLinker(el1,null()));
            					}
HXLINE(2239)					goto _hx_goto_69;
            				}
            				if (  (_hx_switch_0==HX_("magiclib",38,18,b4,01)) ){
HXLINE(2299)					::Array< ::Dynamic> _hx_tmp10 = this->mMagicLibs;
HXDLIN(2299)					::String _hx_tmp11 = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null());
HXDLIN(2299)					_hx_tmp10->push( ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("replace",34,48,28,ab),this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("replace",34,48,28,ab)),null()))
            						->setFixed(1,HX_("name",4b,72,ff,48),_hx_tmp11)));
HXDLIN(2299)					goto _hx_goto_69;
            				}
            				if (  (_hx_switch_0==HX_("manifest",af,fb,29,d0)) ){
HXLINE(2232)					this->mManifester = this->createManifester(el1,this->mManifester);
HXDLIN(2232)					goto _hx_goto_69;
            				}
            				if (  (_hx_switch_0==HX_("mkdir",af,4c,b3,09)) ){
HXLINE(2269)					::String name3 = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null());
HXLINE(2270)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(2271)						::PathManager_obj::mkdir(name3,null());
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic _g1 = _hx_e;
HXLINE(2272)							{
HXLINE(2272)								null();
            							}
HXLINE(2274)							::Log_obj::error((HX_("Could not create directory ",eb,3c,91,19) + name3),null(),null(),null());
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
HXLINE(2268)					goto _hx_goto_69;
            				}
            				if (  (_hx_switch_0==HX_("nvccflag",94,f8,4f,98)) ){
HXLINE(2302)					if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48))) {
HXLINE(2303)						::Array< ::String > _hx_tmp12 = this->mNvccFlags;
HXDLIN(2303)						_hx_tmp12->push(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null()));
            					}
HXLINE(2304)					::Array< ::String > _hx_tmp13 = this->mNvccFlags;
HXDLIN(2304)					_hx_tmp13->push(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null()));
HXLINE(2301)					goto _hx_goto_69;
            				}
            				if (  (_hx_switch_0==HX_("nvcclinkflag",8e,29,64,a1)) ){
HXLINE(2307)					if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48))) {
HXLINE(2308)						::Array< ::String > _hx_tmp14 = this->mNvccLinkFlags;
HXDLIN(2308)						_hx_tmp14->push(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null()));
            					}
HXLINE(2309)					::Array< ::String > _hx_tmp15 = this->mNvccLinkFlags;
HXDLIN(2309)					_hx_tmp15->push(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null()));
HXLINE(2306)					goto _hx_goto_69;
            				}
            				if (  (_hx_switch_0==HX_("path",a5,e5,51,4a)) ){
HXLINE(2220)					::String path = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null());
HXLINE(2221)					::Log_obj::info(HX_("",00,00,00,00),(HX_(" - \x1b""[1mAdding path:\x1b""[0m ",be,eb,4d,82) + path));
HXLINE(2222)					::String sep;
HXDLIN(2222)					if (this->mDefines->exists(HX_("windows_host",e4,91,0a,86))) {
HXLINE(2222)						sep = HX_(";",3b,00,00,00);
            					}
            					else {
HXLINE(2222)						sep = HX_(":",3a,00,00,00);
            					}
HXLINE(2223)					::String add = ((path + sep) + ::Sys_obj::getEnv(HX_("PATH",a5,ad,12,35)));
HXLINE(2224)					::Sys_obj::putEnv(HX_("PATH",a5,ad,12,35),add);
HXLINE(2219)					goto _hx_goto_69;
            				}
            				if (  (_hx_switch_0==HX_("pleaseUpdateHxcppTool",f8,30,50,10)) ){
HXLINE(2296)					this->checkToolVersion(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("version",18,e7,f1,7c)),null()));
HXDLIN(2296)					goto _hx_goto_69;
            				}
            				if (  (_hx_switch_0==HX_("pragma",bc,c4,12,ac)) ){
HXLINE(2312)					if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("once",81,7d,b2,49))) {
HXLINE(2313)						::Dynamic this1 = this->mPragmaOnce;
HXDLIN(2313)						::String key = this->mCurrentIncludeFile;
HXDLIN(2313)						( ( ::haxe::ds::StringMap)(this1) )->set(key,this->parseBool(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("once",81,7d,b2,49)),null())));
            					}
HXLINE(2312)					goto _hx_goto_69;
            				}
            				if (  (_hx_switch_0==HX_("prelinker",4a,7f,b1,16)) ){
HXLINE(2234)					::String name4 = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("id",db,5b,00,00)),null());
HXLINE(2235)					if (this->mPrelinkers->exists(name4)) {
HXLINE(2236)						this->createPrelinker(el1,( ( ::Prelinker)(this->mPrelinkers->get(name4)) ));
            					}
            					else {
HXLINE(2238)						 ::haxe::ds::StringMap _hx_tmp16 = this->mPrelinkers;
HXDLIN(2238)						_hx_tmp16->set(name4,this->createPrelinker(el1,null()));
            					}
HXLINE(2233)					goto _hx_goto_69;
            				}
            				if (  (_hx_switch_0==HX_("section",e5,05,d8,5d)) ){
HXLINE(2293)					this->parseXML(el1,HX_("",00,00,00,00),forceRelative);
HXDLIN(2293)					goto _hx_goto_69;
            				}
            				if (  (_hx_switch_0==HX_("set",a2,9b,57,00)) ){
HXLINE(2200)					::String name5 = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null());
HXLINE(2201)					::String value = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null());
HXLINE(2202)					this->mDefines->set(name5,value);
HXLINE(2199)					goto _hx_goto_69;
            				}
            				if (  (_hx_switch_0==HX_("setenv",8b,d9,7c,6f)) ){
HXLINE(2212)					::String name6 = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null());
HXLINE(2213)					::String value1 = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("value",71,7f,b8,31)),null());
HXLINE(2214)					this->mDefines->set(name6,value1);
HXLINE(2215)					::Sys_obj::putEnv(name6,value1);
HXLINE(2211)					goto _hx_goto_69;
            				}
            				if (  (_hx_switch_0==HX_("setup",7d,ae,2f,7a)) ){
HXLINE(2207)					::String name7 = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null());
HXLINE(2208)					::Setup_obj::setup(name7,this->mDefines);
HXLINE(2206)					goto _hx_goto_69;
            				}
            				if (  (_hx_switch_0==HX_("stripper",05,59,82,dd)) ){
HXLINE(2230)					this->mStripper = this->createStripper(el1,this->mStripper);
HXDLIN(2230)					goto _hx_goto_69;
            				}
            				if (  (_hx_switch_0==HX_("target",51,f3,ec,86)) ){
HXLINE(2257)					::String name8 = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("id",db,5b,00,00)),null());
HXLINE(2258)					bool overwrite = (name8 == HX_("default",c1,d8,c3,9b));
HXLINE(2259)					if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("overwrite",0b,8b,ed,a0))) {
HXLINE(2260)						overwrite = true;
            					}
HXLINE(2261)					if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(el1,HX_("append",da,e1,d3,8f))) {
HXLINE(2262)						overwrite = false;
            					}
HXLINE(2263)					bool _hx_tmp17;
HXDLIN(2263)					if (this->mTargets->exists(name8)) {
HXLINE(2263)						_hx_tmp17 = !(overwrite);
            					}
            					else {
HXLINE(2263)						_hx_tmp17 = false;
            					}
HXDLIN(2263)					if (_hx_tmp17) {
HXLINE(2264)						this->createTarget(el1,( ( ::Target)(this->mTargets->get(name8)) ),forceRelative);
            					}
            					else {
HXLINE(2266)						 ::haxe::ds::StringMap _hx_tmp18 = this->mTargets;
HXDLIN(2266)						_hx_tmp18->set(name8,this->createTarget(el1,null(),forceRelative));
            					}
HXLINE(2256)					goto _hx_goto_69;
            				}
            				if (  (_hx_switch_0==HX_("unset",e9,f2,ee,a6)) ){
HXLINE(2204)					::String name9 = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(el1,HX_("name",4b,72,ff,48)),null());
HXLINE(2205)					this->mDefines->remove(name9);
HXLINE(2203)					goto _hx_goto_69;
            				}
            				_hx_goto_69:;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(BuildTool_obj,parseXML,(void))

void BuildTool_obj::checkToolVersion(::String inVersion){
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_2320_checkToolVersion)
HXLINE(2321)		 ::Dynamic ver = ::Std_obj::parseInt(inVersion);
HXLINE(2322)		if (::hx::IsGreater( ver,3 )) {
HXLINE(2323)			::Log_obj::error(HX_("Your version of hxcpp.n is out-of-date.  Please update.",6d,0b,fc,55),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BuildTool_obj,checkToolVersion,(void))

::String BuildTool_obj::resolvePath(::String inPath){
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_2328_resolvePath)
HXDLIN(2328)		::String _hx_tmp;
HXDLIN(2328)		if ((this->mCurrentIncludeFile == HX_("",00,00,00,00))) {
HXDLIN(2328)			_hx_tmp = ::Sys_obj::getCwd();
            		}
            		else {
HXDLIN(2328)			_hx_tmp = ::haxe::io::Path_obj::directory(this->mCurrentIncludeFile);
            		}
HXDLIN(2328)		return ::PathManager_obj::combine(_hx_tmp,inPath);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BuildTool_obj,resolvePath,return )

void BuildTool_obj::include(::String inName,::String __o_inSection,::hx::Null< bool >  __o_inAllowMissing,::hx::Null< bool >  __o_forceRelative){
            		::String inSection = __o_inSection;
            		if (::hx::IsNull(__o_inSection)) inSection = HX_("",00,00,00,00);
            		bool inAllowMissing = __o_inAllowMissing.Default(false);
            		bool forceRelative = __o_forceRelative.Default(false);
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_2333_include)
HXLINE(2334)		::String full_name = this->findIncludeFile(inName);
HXLINE(2335)		if ((full_name != HX_("",00,00,00,00))) {
HXLINE(2337)			if (this->mPragmaOnce->get_bool(full_name)) {
HXLINE(2338)				return;
            			}
HXLINE(2340)			this->pushFile(full_name,HX_("include",28,fe,f6,51),inSection);
HXLINE(2342)			::String oldInclude = this->mCurrentIncludeFile;
HXLINE(2343)			this->mCurrentIncludeFile = full_name;
HXLINE(2345)			::String make_contents = ::sys::io::File_obj::getContent(full_name);
HXLINE(2346)			 ::Xml xml_slow = ::Xml_obj::parse(make_contents);
HXLINE(2348)			::Profile_obj::push(::haxe::io::Path_obj::withoutDirectory(inName));
HXLINE(2349)			 ::Xml x = xml_slow->firstElement();
HXDLIN(2349)			bool _hx_tmp;
HXDLIN(2349)			if ((x->nodeType != ::Xml_obj::Document)) {
HXLINE(2349)				_hx_tmp = (x->nodeType != ::Xml_obj::Element);
            			}
            			else {
HXLINE(2349)				_hx_tmp = false;
            			}
HXDLIN(2349)			if (_hx_tmp) {
HXLINE(2349)				HX_STACK_DO_THROW((HX_("Invalid nodeType ",3b,e0,cb,e1) + ::_Xml::XmlType_Impl__obj::toString(x->nodeType)));
            			}
HXDLIN(2349)			this->parseXML(x,inSection,forceRelative);
HXLINE(2350)			::Profile_obj::pop();
HXLINE(2352)			this->mCurrentIncludeFile = oldInclude;
HXLINE(2353)			this->popFile();
            		}
            		else {
HXLINE(2355)			if (!(inAllowMissing)) {
HXLINE(2357)				::Log_obj::error(((HX_("Could not find include file \"",b1,5a,8b,fc) + inName) + HX_("\"",22,00,00,00)),null(),null(),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(BuildTool_obj,include,(void))

::String BuildTool_obj::dospath(::String path){
            	HX_GC_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_2387_dospath)
HXLINE(2388)		if (this->mDefines->exists(HX_("windows_host",e4,91,0a,86))) {
HXLINE(2390)			path = path.split(HX_("\\",5c,00,00,00))->join(HX_("/",2f,00,00,00));
HXLINE(2391)			::String filename = HX_("",00,00,00,00);
HXLINE(2392)			::Array< ::String > parts = path.split(HX_("/",2f,00,00,00));
HXLINE(2393)			if (!(::sys::FileSystem_obj::isDirectory(path))) {
HXLINE(2394)				filename = ( (::String)(parts->pop()) );
            			}
HXLINE(2396)			::String oldDir = ::Sys_obj::getCwd();
HXLINE(2397)			::String output = HX_("",00,00,00,00);
HXLINE(2398)			::String err = HX_("",00,00,00,00);
HXLINE(2399)			::Sys_obj::setCwd(parts->join(HX_("\\",5c,00,00,00)));
HXLINE(2400)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(2401)				::String bat = ((HX_("",00,00,00,00) + ::BuildTool_obj::HXCPP) + HX_("/toolchain/dospath.bat",df,64,bd,ee)).split(HX_("/",2f,00,00,00))->join(HX_("\\",5c,00,00,00));
HXLINE(2402)				 ::sys::io::Process process =  ::sys::io::Process_obj::__alloc( HX_CTX ,HX_("cmd",7a,7e,4b,00),::Array_obj< ::String >::__new(2)->init(0,HX_("/c",54,29,00,00))->init(1,bat),null());
HXLINE(2403)				output = process->_hx_stdout->readAll(null())->toString();
HXLINE(2404)				output = output.split(HX_("\r",0d,00,00,00))->__get(0).split(HX_("\n",0a,00,00,00))->__get(0);
HXLINE(2405)				err = process->_hx_stderr->readAll(null())->toString();
HXLINE(2406)				process->close();
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE(2407)					{
HXLINE(2407)						null();
            					}
HXDLIN(2407)					 ::Dynamic e = _g;
HXDLIN(2407)					::Log_obj::error(( (::String)(e) ),null(),null(),null());
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE(2408)			::Sys_obj::setCwd(oldDir);
HXLINE(2410)			if ((output == HX_("",00,00,00,00))) {
HXLINE(2411)				::Log_obj::error((((HX_("Could not find dos path for ",df,23,5b,64) + path) + HX_(" ",20,00,00,00)) + err),null(),null(),null());
            			}
HXLINE(2412)			return ((output + HX_("\\",5c,00,00,00)) + filename);
            		}
HXLINE(2415)		return path;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BuildTool_obj,dospath,return )

::String BuildTool_obj::substitute(::String str,::hx::Null< bool >  __o_needDollar){
            		bool needDollar = __o_needDollar.Default(true);
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_2419_substitute)
HXLINE(2420)		 ::EReg match;
HXDLIN(2420)		if (needDollar) {
HXLINE(2420)			match = ::BuildTool_obj::mVarMatch;
            		}
            		else {
HXLINE(2420)			match = ::BuildTool_obj::mNoDollarMatch;
            		}
HXLINE(2421)		while(match->match(str)){
HXLINE(2423)			::String sub = match->matched(1);
HXLINE(2424)			if (::StringTools_obj::startsWith(sub,HX_("haxelib:",7b,4c,1f,68))) {
HXLINE(2426)				sub = ::PathManager_obj::getHaxelib(sub.substr(8,null()),null(),null(),null());
HXLINE(2427)				sub = ::PathManager_obj::standardize(sub,null());
            			}
            			else {
HXLINE(2429)				if (::StringTools_obj::startsWith(sub,HX_("removeQuotes:",bf,2a,e9,31))) {
HXLINE(2431)					 ::haxe::ds::StringMap sub1 = this->mDefines;
HXDLIN(2431)					sub = sub1->get_string(sub.substr(13,null()));
HXLINE(2432)					int len = sub.length;
HXLINE(2433)					bool _hx_tmp;
HXDLIN(2433)					bool _hx_tmp1;
HXDLIN(2433)					if ((len > 1)) {
HXLINE(2433)						_hx_tmp1 = (sub.substr(0,1) == HX_("\"",22,00,00,00));
            					}
            					else {
HXLINE(2433)						_hx_tmp1 = false;
            					}
HXDLIN(2433)					if (_hx_tmp1) {
HXLINE(2433)						_hx_tmp = (sub.substr((len - 1),null()) == HX_("\"",22,00,00,00));
            					}
            					else {
HXLINE(2433)						_hx_tmp = false;
            					}
HXDLIN(2433)					if (_hx_tmp) {
HXLINE(2434)						sub = sub.substr(1,(len - 2));
            					}
            				}
            				else {
HXLINE(2436)					if (::StringTools_obj::startsWith(sub,HX_("dospath:",6d,9b,e4,17))) {
HXLINE(2438)						 ::haxe::ds::StringMap sub2 = this->mDefines;
HXDLIN(2438)						sub = this->dospath(sub2->get_string(sub.substr(8,null())));
            					}
            					else {
HXLINE(2440)						if (::StringTools_obj::startsWith(sub,HX_("dir:",4d,66,69,42))) {
HXLINE(2442)							 ::haxe::ds::StringMap sub3 = this->mDefines;
HXDLIN(2442)							sub = this->dospath(sub3->get_string(sub.substr(4,null())));
HXLINE(2443)							if (!(::sys::FileSystem_obj::isDirectory(sub))) {
HXLINE(2445)								sub = ::haxe::io::Path_obj::directory(sub);
            							}
            						}
            						else {
HXLINE(2448)							if ((sub == HX_("this_dir",ac,0f,39,41))) {
HXLINE(2450)								::String sub4;
HXDLIN(2450)								if ((this->mCurrentIncludeFile == HX_("",00,00,00,00))) {
HXLINE(2450)									sub4 = ::Sys_obj::getCwd();
            								}
            								else {
HXLINE(2450)									sub4 = ::haxe::io::Path_obj::directory(this->mCurrentIncludeFile);
            								}
HXDLIN(2450)								sub = ::haxe::io::Path_obj::normalize(sub4);
            							}
            							else {
HXLINE(2453)								sub = this->mDefines->get_string(sub);
            							}
            						}
            					}
            				}
            			}
HXLINE(2455)			if (::hx::IsNull( sub )) {
HXLINE(2455)				sub = HX_("",00,00,00,00);
            			}
HXLINE(2456)			::String str1 = (match->matchedLeft() + sub);
HXDLIN(2456)			str = (str1 + match->matchedRight());
            		}
HXLINE(2459)		return str;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BuildTool_obj,substitute,return )

bool BuildTool_obj::subBool(::String str){
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_2463_subBool)
HXLINE(2464)		::String result = this->substitute(str,null());
HXLINE(2465)		bool _hx_tmp;
HXDLIN(2465)		if ((result != HX_("t",74,00,00,00))) {
HXLINE(2465)			_hx_tmp = (result == HX_("true",4e,a7,03,4d));
            		}
            		else {
HXLINE(2465)			_hx_tmp = true;
            		}
HXDLIN(2465)		if (!(_hx_tmp)) {
HXLINE(2465)			return (result == HX_("1",31,00,00,00));
            		}
            		else {
HXLINE(2465)			return true;
            		}
HXDLIN(2465)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BuildTool_obj,subBool,return )

bool BuildTool_obj::valid( ::Xml inEl,::String inSection){
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_2469_valid)
HXLINE(2470)		if (::hx::IsNotNull( inEl->get(HX_("if",dd,5b,00,00)) )) {
HXLINE(2472)			::String value = inEl->get(HX_("if",dd,5b,00,00));
HXLINE(2473)			::Array< ::String > optionalDefines = value.split(HX_("||",80,6c,00,00));
HXLINE(2474)			bool matchOptional = false;
HXLINE(2475)			{
HXLINE(2475)				int _g = 0;
HXDLIN(2475)				while((_g < optionalDefines->length)){
HXLINE(2475)					::String optional = optionalDefines->__get(_g);
HXDLIN(2475)					_g = (_g + 1);
HXLINE(2477)					::Array< ::String > requiredDefines = optional.split(HX_(" ",20,00,00,00));
HXLINE(2478)					bool matchRequired = true;
HXLINE(2479)					{
HXLINE(2479)						int _g1 = 0;
HXDLIN(2479)						while((_g1 < requiredDefines->length)){
HXLINE(2479)							::String required = requiredDefines->__get(_g1);
HXDLIN(2479)							_g1 = (_g1 + 1);
HXLINE(2481)							::String check = ::StringTools_obj::trim(required);
HXLINE(2482)							bool _hx_tmp;
HXDLIN(2482)							if ((check != HX_("",00,00,00,00))) {
HXLINE(2482)								_hx_tmp = !(this->defined(check));
            							}
            							else {
HXLINE(2482)								_hx_tmp = false;
            							}
HXDLIN(2482)							if (_hx_tmp) {
HXLINE(2484)								matchRequired = false;
            							}
            						}
            					}
HXLINE(2487)					if (matchRequired) {
HXLINE(2489)						matchOptional = true;
            					}
            				}
            			}
HXLINE(2492)			bool _hx_tmp1;
HXDLIN(2492)			if ((optionalDefines->length > 0)) {
HXLINE(2492)				_hx_tmp1 = !(matchOptional);
            			}
            			else {
HXLINE(2492)				_hx_tmp1 = false;
            			}
HXDLIN(2492)			if (_hx_tmp1) {
HXLINE(2494)				return false;
            			}
            		}
HXLINE(2498)		if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(inEl,HX_("unless",32,1a,85,65))) {
HXLINE(2500)			::String value1 = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(inEl,HX_("unless",32,1a,85,65)),null());
HXLINE(2501)			::Array< ::String > optionalDefines1 = value1.split(HX_("||",80,6c,00,00));
HXLINE(2502)			bool matchOptional1 = false;
HXLINE(2503)			{
HXLINE(2503)				int _g2 = 0;
HXDLIN(2503)				while((_g2 < optionalDefines1->length)){
HXLINE(2503)					::String optional1 = optionalDefines1->__get(_g2);
HXDLIN(2503)					_g2 = (_g2 + 1);
HXLINE(2505)					::Array< ::String > requiredDefines1 = optional1.split(HX_(" ",20,00,00,00));
HXLINE(2506)					bool matchRequired1 = true;
HXLINE(2507)					{
HXLINE(2507)						int _g3 = 0;
HXDLIN(2507)						while((_g3 < requiredDefines1->length)){
HXLINE(2507)							::String required1 = requiredDefines1->__get(_g3);
HXDLIN(2507)							_g3 = (_g3 + 1);
HXLINE(2509)							::String check1 = ::StringTools_obj::trim(required1);
HXLINE(2510)							bool _hx_tmp2;
HXDLIN(2510)							if ((check1 != HX_("",00,00,00,00))) {
HXLINE(2510)								_hx_tmp2 = !(this->defined(check1));
            							}
            							else {
HXLINE(2510)								_hx_tmp2 = false;
            							}
HXDLIN(2510)							if (_hx_tmp2) {
HXLINE(2512)								matchRequired1 = false;
            							}
            						}
            					}
HXLINE(2515)					if (matchRequired1) {
HXLINE(2517)						matchOptional1 = true;
            					}
            				}
            			}
HXLINE(2520)			bool _hx_tmp3;
HXDLIN(2520)			if ((optionalDefines1->length > 0)) {
HXLINE(2520)				_hx_tmp3 = matchOptional1;
            			}
            			else {
HXLINE(2520)				_hx_tmp3 = false;
            			}
HXDLIN(2520)			if (_hx_tmp3) {
HXLINE(2522)				return false;
            			}
            		}
HXLINE(2526)		if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(inEl,HX_("unlessApi",88,85,65,6c))) {
HXLINE(2528)			::String value2 = this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(inEl,HX_("unlessApi",88,85,65,6c)),null());
HXLINE(2529)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(2530)				 ::Dynamic val = ::Std_obj::parseInt(value2);
HXLINE(2531)				if (::hx::IsLessEq( val,430 )) {
HXLINE(2532)					return false;
            				}
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g4 = _hx_e;
HXLINE(2533)					{
HXLINE(2533)						null();
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
HXLINE(2537)		if (::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(inEl,HX_("ifExists",99,b1,b2,fb))) {
HXLINE(2538)			if (!(::sys::FileSystem_obj::exists(this->substitute(::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(inEl,HX_("ifExists",99,b1,b2,fb)),null())))) {
HXLINE(2538)				return false;
            			}
            		}
HXLINE(2540)		if ((inSection != HX_("",00,00,00,00))) {
HXLINE(2542)			::String _hx_tmp4;
HXDLIN(2542)			if ((inEl->nodeType == ::Xml_obj::Document)) {
HXLINE(2542)				_hx_tmp4 = HX_("Document",3b,ab,c4,74);
            			}
            			else {
HXLINE(2542)				if ((inEl->nodeType != ::Xml_obj::Element)) {
HXLINE(2542)					HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(inEl->nodeType)));
            				}
HXDLIN(2542)				_hx_tmp4 = inEl->nodeName;
            			}
HXDLIN(2542)			if ((_hx_tmp4 != HX_("section",e5,05,d8,5d))) {
HXLINE(2543)				return false;
            			}
HXLINE(2544)			if (!(::haxe::xml::_Access::HasAttribAccess_Impl__obj::resolve(inEl,HX_("id",db,5b,00,00)))) {
HXLINE(2545)				return false;
            			}
HXLINE(2546)			if ((::haxe::xml::_Access::AttribAccess_Impl__obj::resolve(inEl,HX_("id",db,5b,00,00)) != inSection)) {
HXLINE(2547)				return false;
            			}
            		}
HXLINE(2550)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BuildTool_obj,valid,return )

int BuildTool_obj::SupportedVersion;

::String BuildTool_obj::os;

bool BuildTool_obj::sAllowNumProcs;

int BuildTool_obj::sCompileThreadCount;

 ::ThreadPool BuildTool_obj::sThreadPool;

int BuildTool_obj::sReportedThreads;

::String BuildTool_obj::HXCPP;

bool BuildTool_obj::is64;

bool BuildTool_obj::isWindows;

bool BuildTool_obj::isWindowsArm;

bool BuildTool_obj::isLinux;

bool BuildTool_obj::isRPi;

bool BuildTool_obj::isMac;

::String BuildTool_obj::targetKey;

 ::BuildTool BuildTool_obj::instance;

 ::sys::thread::Tls BuildTool_obj::helperThread;

::String BuildTool_obj::destination;

::Array< ::String > BuildTool_obj::outputs;

 ::sys::thread::Mutex BuildTool_obj::groupMutex;

 ::EReg BuildTool_obj::mVarMatch;

 ::EReg BuildTool_obj::mNoDollarMatch;

bool BuildTool_obj::exitOnThreadError;

int BuildTool_obj::threadExitCode;

::String BuildTool_obj::startDir;

void BuildTool_obj::isDefault64(){
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_310_isDefault64)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(BuildTool_obj,isDefault64,(void))

void BuildTool_obj::addOutput(::String inWhat,::String inWhere){
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_326_addOutput)
HXDLIN( 326)		::BuildTool_obj::outputs->push(((inWhat + HX_("=",3d,00,00,00)) + inWhere));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BuildTool_obj,addOutput,(void))

int BuildTool_obj::getThreadCount(){
            	HX_GC_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_330_getThreadCount)
HXLINE( 331)		if (::hx::IsNull( ::BuildTool_obj::instance )) {
HXLINE( 332)			return ::BuildTool_obj::sCompileThreadCount;
            		}
HXLINE( 333)		 ::haxe::ds::StringMap defs = ::BuildTool_obj::instance->mDefines;
HXLINE( 334)		if (::BuildTool_obj::sAllowNumProcs) {
HXLINE( 336)			::String thread_var;
HXDLIN( 336)			if (defs->exists(HX_("HXCPP_COMPILE_THREADS",91,68,4c,69))) {
HXLINE( 336)				thread_var = defs->get_string(HX_("HXCPP_COMPILE_THREADS",91,68,4c,69));
            			}
            			else {
HXLINE( 336)				thread_var = ::Sys_obj::getEnv(HX_("HXCPP_COMPILE_THREADS",91,68,4c,69));
            			}
HXLINE( 339)			if (::hx::IsNull( thread_var )) {
HXLINE( 341)				::BuildTool_obj::sCompileThreadCount = ::BuildTool_obj::getNumberOfProcesses();
            			}
            			else {
HXLINE( 345)				int _hx_tmp;
HXDLIN( 345)				if (::hx::IsLess( ::Std_obj::parseInt(thread_var),2 )) {
HXLINE( 345)					_hx_tmp = 1;
            				}
            				else {
HXLINE( 345)					_hx_tmp = ( (int)(::Std_obj::parseInt(thread_var)) );
            				}
HXDLIN( 345)				::BuildTool_obj::sCompileThreadCount = _hx_tmp;
            			}
HXLINE( 347)			if ((::BuildTool_obj::sCompileThreadCount != ::BuildTool_obj::sReportedThreads)) {
HXLINE( 349)				::BuildTool_obj::sReportedThreads = ::BuildTool_obj::sCompileThreadCount;
HXLINE( 350)				::Log_obj::info(HX_("",00,00,00,00),((HX_("\x1b""[33;1mUsing compile threads: ",af,8d,f9,02) + ::BuildTool_obj::sCompileThreadCount) + HX_("\x1b""[0m",1d,fa,1d,12)));
            			}
            		}
HXLINE( 353)		bool _hx_tmp1;
HXDLIN( 353)		if ((::BuildTool_obj::sCompileThreadCount > 1)) {
HXLINE( 353)			_hx_tmp1 = ::hx::IsNull( ::BuildTool_obj::sThreadPool );
            		}
            		else {
HXLINE( 353)			_hx_tmp1 = false;
            		}
HXDLIN( 353)		if (_hx_tmp1) {
HXLINE( 354)			::BuildTool_obj::sThreadPool =  ::ThreadPool_obj::__alloc( HX_CTX ,::BuildTool_obj::sCompileThreadCount);
            		}
HXLINE( 356)		return ::BuildTool_obj::sCompileThreadCount;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(BuildTool_obj,getThreadCount,return )

void BuildTool_obj::setThreadError(int inCode){
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_360_setThreadError)
HXLINE( 361)		::BuildTool_obj::threadExitCode = inCode;
HXLINE( 362)		if (::BuildTool_obj::exitOnThreadError) {
HXLINE( 363)			::Tools_obj::exit(inCode);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BuildTool_obj,setThreadError,(void))

void BuildTool_obj::setupNvcc(){
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_946_setupNvcc)
HXDLIN( 946)		::BuildTool_obj::instance->loadNvccXml();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(BuildTool_obj,setupNvcc,(void))

::String BuildTool_obj::getArch(){
            	HX_GC_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_1306_getArch)
HXDLIN(1306)		if (::BuildTool_obj::isWindows) {
HXLINE(1308)			if (::BuildTool_obj::isWindowsArm) {
HXLINE(1309)				return HX_("arm64",9a,7c,8b,25);
            			}
HXLINE(1310)			::String architecture = ::Sys_obj::getEnv(HX_("PROCESSOR_ARCHITECTURE",40,9f,f5,59));
HXLINE(1311)			::String wow64Architecture = ::Sys_obj::getEnv(HX_("PROCESSOR_ARCHITEW6432",3d,ad,0b,ca));
HXLINE(1312)			bool _hx_tmp;
HXDLIN(1312)			if ((architecture.indexOf(HX_("64",3e,2f,00,00),null()) <= -1)) {
HXLINE(1312)				if (::hx::IsNotNull( wow64Architecture )) {
HXLINE(1312)					_hx_tmp = (wow64Architecture.indexOf(HX_("64",3e,2f,00,00),null()) > -1);
            				}
            				else {
HXLINE(1312)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE(1312)				_hx_tmp = true;
            			}
HXDLIN(1312)			if (_hx_tmp) {
HXLINE(1314)				return HX_("m64",eb,e4,52,00);
            			}
            			else {
HXLINE(1318)				return HX_("m32",4c,e2,52,00);
            			}
            		}
            		else {
HXLINE(1323)			 ::sys::io::Process process =  ::sys::io::Process_obj::__alloc( HX_CTX ,HX_("uname",40,51,e1,a6),::Array_obj< ::String >::fromData( _hx_array_data_8f107186_89,1),null());
HXLINE(1324)			::String output = process->_hx_stdout->readAll(null())->toString();
HXLINE(1325)			::String error = process->_hx_stderr->readAll(null())->toString();
HXLINE(1326)			process->exitCode(null());
HXLINE(1327)			process->close();
HXLINE(1329)			bool _hx_tmp1;
HXDLIN(1329)			if ((output.indexOf(HX_("aarch64",b5,59,ad,6f),null()) <= -1)) {
HXLINE(1329)				_hx_tmp1 = (output.indexOf(HX_("arm64",9a,7c,8b,25),null()) > -1);
            			}
            			else {
HXLINE(1329)				_hx_tmp1 = true;
            			}
HXDLIN(1329)			if (_hx_tmp1) {
HXLINE(1331)				return HX_("arm64",9a,7c,8b,25);
            			}
            			else {
HXLINE(1333)				if ((output.indexOf(HX_("64",3e,2f,00,00),null()) > -1)) {
HXLINE(1335)					return HX_("m64",eb,e4,52,00);
            				}
            				else {
HXLINE(1339)					return HX_("m32",4c,e2,52,00);
            				}
            			}
            		}
HXLINE(1306)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(BuildTool_obj,getArch,return )

::String BuildTool_obj::getMsvcVer(){
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_1346_getMsvcVer)
HXDLIN(1346)		return ::BuildTool_obj::instance->mDefines->get_string(HX_("MSVC_VER",d7,7c,38,e5));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(BuildTool_obj,getMsvcVer,return )

bool BuildTool_obj::keepTemp(){
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_1351_keepTemp)
HXDLIN(1351)		return ::BuildTool_obj::instance->mDefines->exists(HX_("HXCPP_KEEP_TEMP",c2,bd,a4,94));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(BuildTool_obj,keepTemp,return )

int BuildTool_obj::getNumberOfProcesses(){
            	HX_GC_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_1357_getNumberOfProcesses)
HXLINE(1358)		bool cache = ::Log_obj::verbose;
HXLINE(1359)		::Log_obj::verbose = false;
HXLINE(1361)		::String result = null();
HXLINE(1362)		if (::BuildTool_obj::isWindows) {
HXLINE(1364)			::String env = ::Sys_obj::getEnv(HX_("NUMBER_OF_PROCESSORS",13,f1,5e,ee));
HXLINE(1365)			if (::hx::IsNotNull( env )) {
HXLINE(1367)				result = env;
            			}
            		}
            		else {
HXLINE(1370)			if (::BuildTool_obj::isLinux) {
HXLINE(1372)				result = ::ProcessManager_obj::runProcessLine(HX_("",00,00,00,00),HX_("nproc",04,97,72,a0),::Array_obj< ::String >::__new(0),true,false,true,true);
HXLINE(1373)				if (::hx::IsNull( result )) {
HXLINE(1375)					::String cpuinfo = ::ProcessManager_obj::runProcess(HX_("",00,00,00,00),HX_("cat",16,74,4b,00),::Array_obj< ::String >::fromData( _hx_array_data_8f107186_93,1),true,false,true,true,null());
HXLINE(1376)					if (::hx::IsNotNull( cpuinfo )) {
HXLINE(1378)						::Array< ::String > split = cpuinfo.split(HX_("processor",52,bd,0b,d3));
HXLINE(1379)						result = ::Std_obj::string((split->length - 1));
            					}
            				}
            			}
            			else {
HXLINE(1383)				if (::BuildTool_obj::isMac) {
HXLINE(1385)					 ::EReg cores =  ::EReg_obj::__alloc( HX_CTX ,HX_("Total Number of Cores: (\\d+)",c2,4a,e3,a3),HX_("",00,00,00,00));
HXLINE(1386)					::String output = ::ProcessManager_obj::runProcess(HX_("",00,00,00,00),HX_("/usr/sbin/system_profiler",a8,1e,29,cd),::Array_obj< ::String >::fromData( _hx_array_data_8f107186_94,3),true,false,true,true,null());
HXLINE(1387)					bool _hx_tmp;
HXDLIN(1387)					if (::hx::IsNotNull( output )) {
HXLINE(1387)						_hx_tmp = cores->match(output);
            					}
            					else {
HXLINE(1387)						_hx_tmp = false;
            					}
HXDLIN(1387)					if (_hx_tmp) {
HXLINE(1389)						result = cores->matched(1);
            					}
            				}
            			}
            		}
HXLINE(1393)		::Log_obj::verbose = cache;
HXLINE(1395)		bool _hx_tmp1;
HXDLIN(1395)		if (::hx::IsNotNull( result )) {
HXLINE(1395)			_hx_tmp1 = ::hx::IsLess( ::Std_obj::parseInt(result),1 );
            		}
            		else {
HXLINE(1395)			_hx_tmp1 = true;
            		}
HXDLIN(1395)		if (_hx_tmp1) {
HXLINE(1397)			return 1;
            		}
            		else {
HXLINE(1401)			return ( (int)(::Std_obj::parseInt(result)) );
            		}
HXLINE(1395)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(BuildTool_obj,getNumberOfProcesses,return )

::String BuildTool_obj::getVersion(){
            	HX_GC_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_1407_getVersion)
HXDLIN(1407)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1409)			 ::Dynamic json =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,::sys::io::File_obj::getContent((::PathManager_obj::getHaxelib(HX_("hxcpp",13,70,49,31),null(),null(),null()) + HX_("/haxelib.json",c6,fc,ee,d5))))->doParse();
HXLINE(1410)			return ( (::String)(json->__Field(HX_("version",18,e7,f1,7c),::hx::paccDynamic)) );
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(1412)				{
HXLINE(1412)					null();
            				}
HXLINE(1414)				return HX_("0.0.0",34,3d,c8,c1);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(1407)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(BuildTool_obj,getVersion,return )

bool BuildTool_obj::isMsvc(){
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_1420_isMsvc)
HXDLIN(1420)		return ::hx::IsEq( ::BuildTool_obj::instance->mDefines->get(HX_("toolchain",a9,1a,50,de)),HX_("msvc",13,ec,63,48) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(BuildTool_obj,isMsvc,return )

bool BuildTool_obj::isMingw(){
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_1425_isMingw)
HXDLIN(1425)		return ::hx::IsEq( ::BuildTool_obj::instance->mDefines->get(HX_("toolchain",a9,1a,50,de)),HX_("mingw",42,74,68,08) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(BuildTool_obj,isMingw,return )

::String BuildTool_obj::getNvcc(){
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_1430_getNvcc)
HXDLIN(1430)		return ::BuildTool_obj::instance->mDefines->get_string(HX_("NVCC",e8,20,d0,33));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(BuildTool_obj,getNvcc,return )

::Array< ::String > BuildTool_obj::getNvccLinkFlags(){
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_1435_getNvccLinkFlags)
HXDLIN(1435)		return ::BuildTool_obj::instance->mNvccLinkFlags;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(BuildTool_obj,getNvccLinkFlags,return )

::Array< ::String > BuildTool_obj::getNvccFlags(){
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_1440_getNvccFlags)
HXDLIN(1440)		return ::BuildTool_obj::instance->mNvccFlags;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(BuildTool_obj,getNvccFlags,return )

void BuildTool_obj::copy(::String from,::String to){
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_1444_copy)
HXLINE(1445)		::Log_obj::info(HX_("",00,00,00,00),(((HX_("copy ",cb,82,5f,4a) + from) + HX_(" ",20,00,00,00)) + to));
HXLINE(1447)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1448)			if (::sys::FileSystem_obj::isDirectory(to)) {
HXLINE(1449)				to = (to + (HX_("/",2f,00,00,00) + ::haxe::io::Path_obj::withoutDirectory(from)));
            			}
HXLINE(1450)			 ::haxe::io::Bytes bytes = ::sys::io::File_obj::getBytes(from);
HXLINE(1451)			::sys::io::File_obj::saveBytes(to,bytes);
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(1452)				{
HXLINE(1452)					null();
            				}
HXLINE(1454)				::Log_obj::error((((HX_("Could not copy file ",c5,57,7f,2a) + from) + HX_(" ",20,00,00,00)) + to),null(),null(),null());
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BuildTool_obj,copy,(void))

void BuildTool_obj::main(){
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_1460_main)
HXLINE(1461)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1462)			::BuildTool_obj::runMain();
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(1464)				{
HXLINE(1464)					null();
            				}
HXDLIN(1464)				 ::Dynamic e = _g;
HXDLIN(1464)				{
HXLINE(1465)					::String _hx_tmp = ((HX_("Uncaught exception on main thread: ",72,a6,07,e1) + ::Std_obj::string(e)) + HX_("\n",0a,00,00,00));
HXDLIN(1465)					::Log_obj::error((_hx_tmp + ::haxe::_CallStack::CallStack_Impl__obj::toString(::haxe::_CallStack::CallStack_Impl__obj::exceptionStack(null()))),null(),null(),null());
HXLINE(1466)					::Tools_obj::exit(1);
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(1468)		::Tools_obj::exit(0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(BuildTool_obj,main,(void))

void BuildTool_obj::runMain(){
            	HX_GC_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_1473_runMain)
HXLINE(1474)		::Array< ::String > targets = ::Array_obj< ::String >::__new();
HXLINE(1475)		 ::haxe::ds::StringMap defines =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(1476)		::Array< ::String > include_path = ::Array_obj< ::String >::__new();
HXLINE(1477)		::String makefile = HX_("",00,00,00,00);
HXLINE(1478)		::String optionsTxt = HX_("Options.txt",40,11,31,49);
HXLINE(1480)		::Profile_obj::start();
HXLINE(1482)		include_path->push(HX_(".",2e,00,00,00));
HXLINE(1484)		::Array< ::String > args = ::Sys_obj::args();
HXLINE(1485)		 ::haxe::ds::StringMap env = ::Sys_obj::environment();
HXLINE(1487)		{
HXLINE(1487)			 ::Dynamic e = env->keys();
HXDLIN(1487)			while(( (bool)(e->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1487)				::String e1 = ( (::String)(e->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1488)				defines->set(e1,::Sys_obj::getEnv(e1));
            			}
            		}
HXLINE(1492)		if ((args->length > 0)) {
HXLINE(1494)			::String last =  ::haxe::io::Path_obj::__alloc( HX_CTX ,args->__get((args->length - 1)))->toString();
HXLINE(1495)			bool isRootDir = (last == HX_("/",2f,00,00,00));
HXLINE(1496)			if (!(isRootDir)) {
HXLINE(1498)				::String slash = last.substr(-1,null());
HXLINE(1499)				bool _hx_tmp;
HXDLIN(1499)				if ((slash != HX_("/",2f,00,00,00))) {
HXLINE(1499)					_hx_tmp = (slash == HX_("\\",5c,00,00,00));
            				}
            				else {
HXLINE(1499)					_hx_tmp = true;
            				}
HXDLIN(1499)				if (_hx_tmp) {
HXLINE(1500)					last = last.substr(0,(last.length - 1));
            				}
            			}
HXLINE(1502)			bool _hx_tmp1;
HXDLIN(1502)			if (!(isRootDir)) {
HXLINE(1502)				if (::sys::FileSystem_obj::exists(last)) {
HXLINE(1502)					_hx_tmp1 = ::sys::FileSystem_obj::isDirectory(last);
            				}
            				else {
HXLINE(1502)					_hx_tmp1 = false;
            				}
            			}
            			else {
HXLINE(1502)				_hx_tmp1 = true;
            			}
HXDLIN(1502)			if (_hx_tmp1) {
HXLINE(1506)				::BuildTool_obj::HXCPP = ::PathManager_obj::standardize(::Sys_obj::getCwd(),null());
HXLINE(1507)				defines->set(HX_("HXCPP",f3,a7,37,af),::BuildTool_obj::HXCPP);
HXLINE(1508)				args->pop();
HXLINE(1509)				::Sys_obj::setCwd(last);
            			}
            		}
HXLINE(1514)		bool _hx_tmp2;
HXDLIN(1514)		if (!(defines->exists(HX_("HXCPP_NO_COLOUR",3e,6d,50,14)))) {
HXLINE(1514)			_hx_tmp2 = defines->exists(HX_("HXCPP_NO_COLOR",91,94,11,9b));
            		}
            		else {
HXLINE(1514)			_hx_tmp2 = true;
            		}
HXDLIN(1514)		if (_hx_tmp2) {
HXLINE(1515)			::Log_obj::colorSupported = false;
            		}
HXLINE(1516)		::Log_obj::verbose = defines->exists(HX_("HXCPP_VERBOSE",d6,57,23,20));
HXLINE(1517)		::BuildTool_obj::exitOnThreadError = defines->exists(HX_("HXCPP_EXIT_ON_ERROR",3d,91,14,d5));
HXLINE(1520)		::BuildTool_obj::os = ::Sys_obj::systemName();
HXLINE(1522)		::BuildTool_obj::startDir = ::Sys_obj::getCwd();
HXLINE(1524)		::BuildTool_obj::isWindows =  ::EReg_obj::__alloc( HX_CTX ,HX_("window",f0,93,8c,52),HX_("i",69,00,00,00))->match(::BuildTool_obj::os);
HXLINE(1525)		if (::BuildTool_obj::isWindows) {
HXLINE(1527)			::String proc = ::Sys_obj::getEnv(HX_("PROCESSOR_IDENTIFIER",96,65,84,d4));
HXLINE(1528)			bool _hx_tmp3;
HXDLIN(1528)			if (::hx::IsNotNull( proc )) {
HXLINE(1528)				_hx_tmp3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("\\barm",96,45,ee,39),HX_("i",69,00,00,00))->match(proc);
            			}
            			else {
HXLINE(1528)				_hx_tmp3 = false;
            			}
HXDLIN(1528)			::BuildTool_obj::isWindowsArm = _hx_tmp3;
HXLINE(1529)			if (::BuildTool_obj::isWindowsArm) {
HXLINE(1530)				defines->set(HX_("windows_arm_host",e7,0f,67,68),HX_("1",31,00,00,00));
            			}
            		}
HXLINE(1532)		::BuildTool_obj::isMac =  ::EReg_obj::__alloc( HX_CTX ,HX_("mac",8f,0a,53,00),HX_("i",69,00,00,00))->match(::BuildTool_obj::os);
HXLINE(1533)		if (::BuildTool_obj::isMac) {
HXLINE(1534)			defines->set(HX_("mac_host",58,3a,95,a9),HX_("1",31,00,00,00));
            		}
HXLINE(1535)		::BuildTool_obj::isLinux =  ::EReg_obj::__alloc( HX_CTX ,HX_("linux",f4,eb,01,75),HX_("i",69,00,00,00))->match(::BuildTool_obj::os);
HXLINE(1536)		if (::BuildTool_obj::isLinux) {
HXLINE(1537)			defines->set(HX_("linux_host",d3,2a,62,2c),HX_("1",31,00,00,00));
            		}
HXLINE(1540)		bool _hx_tmp4;
HXDLIN(1540)		if ((args->length > 0)) {
HXLINE(1540)			_hx_tmp4 = ::StringTools_obj::endsWith(args->__get(0),HX_(".cppia",cd,44,73,af));
            		}
            		else {
HXLINE(1540)			_hx_tmp4 = false;
            		}
HXDLIN(1540)		if (_hx_tmp4) {
HXLINE(1542)			::String binDir;
HXDLIN(1542)			if (::BuildTool_obj::isWindows) {
HXLINE(1542)				binDir = HX_("Windows",63,06,c6,b5);
            			}
            			else {
HXLINE(1542)				if (::BuildTool_obj::isMac) {
HXLINE(1542)					binDir = HX_("Mac64",6d,ab,43,96);
            				}
            				else {
HXLINE(1542)					if (::BuildTool_obj::isLinux) {
HXLINE(1542)						binDir = HX_("Linux64",12,28,9d,f7);
            					}
            					else {
HXLINE(1542)						binDir = null();
            					}
            				}
            			}
HXLINE(1543)			if (::hx::IsNull( binDir )) {
HXLINE(1544)				::Log_obj::error(HX_("Cppia is not supported on this host.",15,e2,77,06),null(),null(),null());
            			}
HXLINE(1545)			::String arch = ::BuildTool_obj::getArch();
HXLINE(1546)			::String binDir1;
HXDLIN(1546)			if (::BuildTool_obj::isWindows) {
HXLINE(1546)				if (::BuildTool_obj::isWindowsArm) {
HXLINE(1546)					binDir1 = HX_("WindowsArm64",37,df,b1,0e);
            				}
            				else {
HXLINE(1546)					binDir1 = HX_("Windows64",61,d4,1e,38);
            				}
            			}
            			else {
HXLINE(1547)				if (::BuildTool_obj::isMac) {
HXLINE(1546)					binDir1 = HX_("Mac64",6d,ab,43,96);
            				}
            				else {
HXLINE(1548)					if (::BuildTool_obj::isLinux) {
HXLINE(1546)						binDir1 = HX_("Linux64",12,28,9d,f7);
            					}
            					else {
HXLINE(1546)						binDir1 = null();
            					}
            				}
            			}
HXLINE(1550)			::String exe;
HXDLIN(1550)			if (::BuildTool_obj::isWindows) {
HXLINE(1550)				exe = HX_(".exe",24,dd,b4,1e);
            			}
            			else {
HXLINE(1550)				exe = HX_("",00,00,00,00);
            			}
HXDLIN(1550)			::String exe1 = (((((HX_("",00,00,00,00) + ::BuildTool_obj::HXCPP) + HX_("/bin/",37,39,ec,50)) + binDir1) + HX_("/Cppia",0c,11,fc,a8)) + exe);
HXLINE(1551)			if (!(::BuildTool_obj::isWindows)) {
HXLINE(1553)				::String phase = HX_("find",39,d0,bb,43);
HXLINE(1554)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1556)					 ::Dynamic stat = ::sys::FileSystem_obj::stat(exe1);
HXLINE(1557)					if (::hx::IsNull( stat )) {
HXLINE(1558)						HX_STACK_DO_THROW((HX_("Could not find exe:",e3,55,fe,a9) + exe1));
            					}
HXLINE(1559)					int mode = ( (int)(stat->__Field(HX_("mode",63,d3,60,48),::hx::paccDynamic)) );
HXLINE(1560)					int exeFlags = 73;
HXLINE(1561)					if (((mode & exeFlags) != exeFlags)) {
HXLINE(1563)						::String phase1 = HX_("add exe permissions to",04,ca,36,fe);
HXLINE(1564)						if ((::Sys_obj::command(HX_("chmod",3d,b5,bc,45),::Array_obj< ::String >::__new(2)->init(0,HX_("755",57,ea,29,00))->init(1,exe1)) != 0)) {
HXLINE(1565)							::Log_obj::error((HX_("Please use root access to add execute permissions to ",a7,6a,cf,1e) + exe1),null(),null(),null());
            						}
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g = _hx_e;
HXLINE(1568)						{
HXLINE(1568)							null();
            						}
HXDLIN(1568)						 ::Dynamic e2 = _g;
HXLINE(1570)						::Log_obj::error(((((((HX_("Could not ",4c,e5,d2,2a) + phase) + HX_(" Cppia host ",53,2d,77,8a)) + exe1) + HX_(" (",08,1c,00,00)) + ::Std_obj::string(e2)) + HX_(")",29,00,00,00)),null(),null(),null());
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
HXLINE(1581)			::Tools_obj::exit(::Sys_obj::command(exe1,args));
            		}
            		else {
HXLINE(1583)			bool _hx_tmp5;
HXDLIN(1583)			if ((args->length > 0)) {
HXLINE(1583)				_hx_tmp5 = ::StringTools_obj::endsWith(args->__get(0),HX_(".js",77,44,23,00));
            			}
            			else {
HXLINE(1583)				_hx_tmp5 = false;
            			}
HXDLIN(1583)			if (_hx_tmp5) {
HXLINE(1585)				::Setup_obj::initHXCPPConfig(defines);
HXLINE(1586)				::Setup_obj::setupEmscripten(defines);
HXLINE(1587)				::String node = defines->get_string(HX_("EMSCRIPTEN_NODE_JS",43,7b,2b,e9));
HXLINE(1588)				::String _hx_tmp6;
HXDLIN(1588)				if (::hx::IsNull( node )) {
HXLINE(1588)					_hx_tmp6 = HX_("EMSCRIPTEN_NODE_JS undefined, using 'node'",e1,ac,f5,96);
            				}
            				else {
HXLINE(1588)					_hx_tmp6 = ((HX_("Using ",7c,9a,25,79) + node) + HX_(" from EMSCRIPTEN_NODE_JS",19,ac,ae,b3));
            				}
HXDLIN(1588)				::Log_obj::info(HX_("",00,00,00,00),_hx_tmp6);
HXLINE(1589)				bool _hx_tmp7;
HXDLIN(1589)				if ((node != HX_("",00,00,00,00))) {
HXLINE(1589)					_hx_tmp7 = ::hx::IsNull( node );
            				}
            				else {
HXLINE(1589)					_hx_tmp7 = true;
            				}
HXDLIN(1589)				if (_hx_tmp7) {
HXLINE(1590)					node = HX_("node",02,0a,0a,49);
            				}
HXLINE(1592)				::Log_obj::info(HX_("",00,00,00,00),((node + HX_(" ",20,00,00,00)) + args->join(HX_(" ",20,00,00,00))));
HXLINE(1593)				::Tools_obj::exit(::Sys_obj::command(node,args));
            			}
            			else {
HXLINE(1595)				bool _hx_tmp8;
HXDLIN(1595)				if ((args->length == 1)) {
HXLINE(1595)					_hx_tmp8 = (args->__get(0) == HX_("defines",d8,37,08,a1));
            				}
            				else {
HXLINE(1595)					_hx_tmp8 = false;
            				}
HXDLIN(1595)				if (_hx_tmp8) {
HXLINE(1597)					::String dir = ((HX_("",00,00,00,00) + ::BuildTool_obj::HXCPP) + HX_("/tools/hxcpp",10,1e,60,19));
HXLINE(1598)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1600)						 ::EReg defineMatch =  ::EReg_obj::__alloc( HX_CTX ,HX_("m*defines\\.\\w+\\(\"(\\w+)\"",74,22,1d,cb),HX_("i",69,00,00,00));
HXLINE(1601)						 ::haxe::ds::StringMap allDefines =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(1602)						{
HXLINE(1602)							int _g1 = 0;
HXDLIN(1602)							::Array< ::String > _g2 = ::sys::FileSystem_obj::readDirectory(dir);
HXDLIN(1602)							while((_g1 < _g2->length)){
HXLINE(1602)								::String file = _g2->__get(_g1);
HXDLIN(1602)								_g1 = (_g1 + 1);
HXLINE(1603)								if (::StringTools_obj::endsWith(file,HX_(".hx",be,42,23,00))) {
HXLINE(1604)									int _g3 = 0;
HXDLIN(1604)									::Array< ::String > _g4 = ::sys::io::File_obj::getContent(file).split(HX_("\n",0a,00,00,00));
HXDLIN(1604)									while((_g3 < _g4->length)){
HXLINE(1604)										::String line = _g4->__get(_g3);
HXDLIN(1604)										_g3 = (_g3 + 1);
HXLINE(1605)										if (defineMatch->match(line)) {
HXLINE(1606)											allDefines->set(defineMatch->matched(1),true);
            										}
            									}
            								}
            							}
            						}
HXLINE(1607)						{
HXLINE(1607)							 ::Dynamic key = allDefines->keys();
HXDLIN(1607)							while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1607)								::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(1608)								::Sys_obj::println(key1);
            							}
            						}
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic _g5 = _hx_e;
HXLINE(1610)							{
HXLINE(1610)								null();
            							}
HXDLIN(1610)							 ::Dynamic e3 = _g5;
HXLINE(1612)							::Log_obj::error((((HX_("Could not read ",3e,07,69,5f) + dir) + HX_(" : ",c6,7a,18,00)) + ::Std_obj::string(e3)),null(),null(),null());
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
HXLINE(1614)					return;
            				}
            			}
            		}
HXLINE(1618)		bool _hx_tmp9;
HXDLIN(1618)		if (::BuildTool_obj::isLinux) {
HXLINE(1618)			_hx_tmp9 = ::Setup_obj::isRaspberryPi();
            		}
            		else {
HXLINE(1618)			_hx_tmp9 = false;
            		}
HXDLIN(1618)		::BuildTool_obj::isRPi = _hx_tmp9;
HXLINE(1620)		::BuildTool_obj::is64 = (::BuildTool_obj::getArch() != HX_("m32",4c,e2,52,00));
HXLINE(1621)		::Array< ::String > dirtyList = ::Array_obj< ::String >::__new();
HXLINE(1623)		int a = 0;
HXLINE(1624)		while((a < args->length)){
HXLINE(1626)			::String arg = args->__get(a);
HXLINE(1627)			bool _hx_tmp10;
HXDLIN(1627)			if ((arg.substr(0,2) != HX_("-D",77,27,00,00))) {
HXLINE(1627)				_hx_tmp10 =  ::EReg_obj::__alloc( HX_CTX ,HX_("^[a-zA-Z0-9_][a-zA-Z0-9_-]*=",c4,6b,79,78),HX_("",00,00,00,00))->match(arg);
            			}
            			else {
HXLINE(1627)				_hx_tmp10 = true;
            			}
HXDLIN(1627)			if (_hx_tmp10) {
HXLINE(1629)				::String define;
HXDLIN(1629)				if ((arg.substr(0,2) == HX_("-D",77,27,00,00))) {
HXLINE(1629)					define = arg.substr(2,null());
            				}
            				else {
HXLINE(1629)					define = arg;
            				}
HXLINE(1630)				int equals = define.indexOf(HX_("=",3d,00,00,00),null());
HXLINE(1631)				if ((equals > 0)) {
HXLINE(1633)					::String value = define.substr((equals + 1),null());
HXLINE(1634)					define = define.substr(0,equals);
HXLINE(1635)					if ((define == HX_("destination",8e,8a,fb,11))) {
HXLINE(1637)						::BuildTool_obj::destination = value;
            					}
            					else {
HXLINE(1640)						defines->set(define,value);
            					}
            				}
            				else {
HXLINE(1643)					defines->set(define,HX_("",00,00,00,00));
            				}
HXLINE(1644)				if ((define == HX_("verbose",82,d7,b9,71))) {
HXLINE(1645)					::Log_obj::verbose = true;
            				}
            			}
            			else {
HXLINE(1647)				if ((arg == HX_("-debug",06,8f,2e,d5))) {
HXLINE(1648)					defines->set(HX_("debug",53,52,1f,d7),HX_("1",31,00,00,00));
            				}
            				else {
HXLINE(1649)					if ((arg == HX_("-no-options",7f,26,a1,ab))) {
HXLINE(1650)						optionsTxt = HX_("",00,00,00,00);
            					}
            					else {
HXLINE(1651)						if ((arg == HX_("-options",d1,42,dc,ed))) {
HXLINE(1653)							a = (a + 1);
HXLINE(1654)							optionsTxt = args->__get(a);
HXLINE(1655)							if (::hx::IsNull( optionsTxt )) {
HXLINE(1656)								optionsTxt = HX_("",00,00,00,00);
            							}
            						}
            						else {
HXLINE(1658)							if ((arg == HX_("-dirty",c5,8c,df,d7))) {
HXLINE(1660)								a = (a + 1);
HXLINE(1661)								dirtyList->push(args->__get(a));
            							}
            							else {
HXLINE(1663)								bool _hx_tmp11;
HXDLIN(1663)								if ((arg != HX_("-v",a9,27,00,00))) {
HXLINE(1663)									_hx_tmp11 = (arg == HX_("-verbose",f5,e6,97,7f));
            								}
            								else {
HXLINE(1663)									_hx_tmp11 = true;
            								}
HXDLIN(1663)								if (_hx_tmp11) {
HXLINE(1664)									::Log_obj::verbose = true;
            								}
            								else {
HXLINE(1665)									if ((arg == HX_("-nocolor",f5,94,10,98))) {
HXLINE(1666)										::Log_obj::colorSupported = false;
            									}
            									else {
HXLINE(1667)										if ((arg.substr(0,2) == HX_("-I",7c,27,00,00))) {
HXLINE(1668)											include_path->push(::PathManager_obj::standardize(arg.substr(2,null()),null()));
            										}
            										else {
HXLINE(1669)											if ((makefile.length == 0)) {
HXLINE(1670)												makefile = arg;
            											}
            											else {
HXLINE(1672)												targets->push(arg);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE(1674)			a = (a + 1);
            		}
HXLINE(1677)		if (defines->exists(HX_("HXCPP_TIMES",1a,df,d9,f5))) {
HXLINE(1678)			::Profile_obj::enable();
            		}
HXLINE(1680)		bool _hx_tmp12;
HXDLIN(1680)		if (!(defines->exists(HX_("HXCPP_NO_COLOUR",3e,6d,50,14)))) {
HXLINE(1680)			_hx_tmp12 = defines->exists(HX_("HXCPP_NO_COLOR",91,94,11,9b));
            		}
            		else {
HXLINE(1680)			_hx_tmp12 = true;
            		}
HXDLIN(1680)		if (_hx_tmp12) {
HXLINE(1681)			::Log_obj::colorSupported = false;
            		}
HXLINE(1682)		bool _hx_tmp13;
HXDLIN(1682)		if (!(::Log_obj::verbose)) {
HXLINE(1682)			_hx_tmp13 = defines->exists(HX_("HXCPP_VERBOSE",d6,57,23,20));
            		}
            		else {
HXLINE(1682)			_hx_tmp13 = true;
            		}
HXDLIN(1682)		::Log_obj::verbose = _hx_tmp13;
HXLINE(1683)		bool _hx_tmp14;
HXDLIN(1683)		if (defines->exists(HX_("HXCPP_QUIET",08,a8,91,43))) {
HXLINE(1683)			_hx_tmp14 = !(::Log_obj::verbose);
            		}
            		else {
HXLINE(1683)			_hx_tmp14 = false;
            		}
HXDLIN(1683)		::Log_obj::quiet = _hx_tmp14;
HXLINE(1684)		bool _hx_tmp15;
HXDLIN(1684)		bool _hx_tmp16;
HXDLIN(1684)		if (defines->exists(HX_("HXCPP_SILENT",a1,c0,c4,c1))) {
HXLINE(1684)			_hx_tmp16 = !(::Log_obj::quiet);
            		}
            		else {
HXLINE(1684)			_hx_tmp16 = false;
            		}
HXDLIN(1684)		if (_hx_tmp16) {
HXLINE(1684)			_hx_tmp15 = !(::Log_obj::verbose);
            		}
            		else {
HXLINE(1684)			_hx_tmp15 = false;
            		}
HXDLIN(1684)		::Log_obj::mute = _hx_tmp15;
HXLINE(1686)		bool _hx_tmp17;
HXDLIN(1686)		if ((optionsTxt != HX_("",00,00,00,00))) {
HXLINE(1686)			_hx_tmp17 = (makefile != HX_("",00,00,00,00));
            		}
            		else {
HXLINE(1686)			_hx_tmp17 = false;
            		}
HXDLIN(1686)		if (_hx_tmp17) {
HXLINE(1688)			::String path = ::PathManager_obj::combine(::haxe::io::Path_obj::directory(makefile),optionsTxt);
HXLINE(1689)			if (::sys::FileSystem_obj::exists(path)) {
HXLINE(1690)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1692)					::String contents = ::sys::io::File_obj::getContent(path);
HXLINE(1693)					if ((contents.substr(0,1) != HX_(" ",20,00,00,00))) {
HXLINE(1694)						int _g6 = 0;
HXDLIN(1694)						::Array< ::String > _g7 = contents.split(HX_("\r",0d,00,00,00))->join(HX_("",00,00,00,00)).split(HX_("\n",0a,00,00,00));
HXDLIN(1694)						while((_g6 < _g7->length)){
HXLINE(1694)							::String def = _g7->__get(_g6);
HXDLIN(1694)							_g6 = (_g6 + 1);
HXLINE(1696)							int equals1 = def.indexOf(HX_("=",3d,00,00,00),null());
HXLINE(1697)							if ((equals1 > 0)) {
HXLINE(1699)								::String name = def.substr(0,equals1);
HXLINE(1700)								::String value1 = def.substr((equals1 + 1),null());
HXLINE(1701)								if ((name != HX_("hxcpp",13,70,49,31))) {
HXLINE(1705)									if ((name == HX_("destination",8e,8a,fb,11))) {
HXLINE(1706)										::BuildTool_obj::destination = value1;
            									}
            									else {
HXLINE(1708)										defines->set(name,value1);
            									}
            								}
            							}
            						}
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g8 = _hx_e;
HXLINE(1712)						{
HXLINE(1712)							null();
            						}
HXDLIN(1712)						 ::Dynamic e4 = _g8;
HXLINE(1714)						::Log_obj::error(((((HX_("Could not parse options file ",69,61,5a,6d) + path) + HX_(" (",08,1c,00,00)) + ::Std_obj::string(e4)) + HX_(")",29,00,00,00)),null(),null(),null());
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
HXLINE(1718)		::Profile_obj::setEntry(HX_("setup",7d,ae,2f,7a));
HXLINE(1719)		::Setup_obj::initHXCPPConfig(defines);
HXLINE(1721)		bool _hx_tmp18;
HXDLIN(1721)		if ((::BuildTool_obj::HXCPP == HX_("",00,00,00,00))) {
HXLINE(1721)			_hx_tmp18 = env->exists(HX_("HXCPP",f3,a7,37,af));
            		}
            		else {
HXLINE(1721)			_hx_tmp18 = false;
            		}
HXDLIN(1721)		if (_hx_tmp18) {
HXLINE(1723)			::BuildTool_obj::HXCPP = ::PathManager_obj::standardize(env->get_string(HX_("HXCPP",f3,a7,37,af)),null());
HXLINE(1724)			defines->set(HX_("HXCPP",f3,a7,37,af),::BuildTool_obj::HXCPP);
            		}
HXLINE(1727)		if ((::BuildTool_obj::HXCPP == HX_("",00,00,00,00))) {
HXLINE(1729)			if (!(defines->exists(HX_("HXCPP",f3,a7,37,af)))) {
HXLINE(1731)				::Log_obj::error(HX_("Please run hxcpp using haxelib",cb,6f,7a,c3),null(),null(),null());
            			}
HXLINE(1734)			::BuildTool_obj::HXCPP = ::PathManager_obj::standardize(defines->get_string(HX_("HXCPP",f3,a7,37,af)),null());
HXLINE(1735)			defines->set(HX_("HXCPP",f3,a7,37,af),::BuildTool_obj::HXCPP);
            		}
HXLINE(1740)		include_path->push(HX_(".",2e,00,00,00));
HXLINE(1741)		if (env->exists(HX_("HOME",1f,92,d3,2f))) {
HXLINE(1742)			include_path->push(env->get_string(HX_("HOME",1f,92,d3,2f)));
            		}
HXLINE(1743)		if (env->exists(HX_("USERPROFILE",1e,72,55,c2))) {
HXLINE(1744)			include_path->push(env->get_string(HX_("USERPROFILE",1e,72,55,c2)));
            		}
HXLINE(1745)		include_path->push(::BuildTool_obj::HXCPP);
HXLINE(1754)		if (defines->exists(HX_("ios",cd,0d,50,00))) {
HXLINE(1756)			if (defines->exists(HX_("simulator",04,81,44,24))) {
HXLINE(1757)				defines->set(HX_("iphonesim",d2,45,99,6a),HX_("iphonesim",d2,45,99,6a));
            			}
            			else {
HXLINE(1758)				if (!(defines->exists(HX_("iphonesim",d2,45,99,6a)))) {
HXLINE(1759)					defines->set(HX_("iphoneos",c9,2a,af,6e),HX_("iphoneos",c9,2a,af,6e));
            				}
            			}
HXLINE(1760)			defines->set(HX_("iphone",65,a6,6c,bd),HX_("iphone",65,a6,6c,bd));
            		}
HXLINE(1763)		if (defines->exists(HX_("tvos",26,ab,06,4d))) {
HXLINE(1765)			if (defines->exists(HX_("simulator",04,81,44,24))) {
HXLINE(1766)				defines->set(HX_("appletvsim",3b,eb,d2,31),HX_("appletvsim",3b,eb,d2,31));
            			}
            			else {
HXLINE(1767)				if (!(defines->exists(HX_("appletvsim",3b,eb,d2,31)))) {
HXLINE(1768)					defines->set(HX_("appletvos",80,e5,f8,c7),HX_("appletvos",80,e5,f8,c7));
            				}
            			}
HXLINE(1769)			defines->set(HX_("appletv",5c,75,2b,4e),HX_("appletv",5c,75,2b,4e));
            		}
HXLINE(1774)		bool _hx_tmp19;
HXDLIN(1774)		if ((makefile != HX_("",00,00,00,00))) {
HXLINE(1774)			_hx_tmp19 = ::Log_obj::verbose;
            		}
            		else {
HXLINE(1774)			_hx_tmp19 = true;
            		}
HXDLIN(1774)		if (_hx_tmp19) {
HXLINE(1776)			::BuildTool_obj::printBanner();
            		}
HXLINE(1779)		if ((makefile == HX_("",00,00,00,00))) {
HXLINE(1781)			::BuildTool_obj::printUsage();
            		}
            		else {
HXLINE(1785)			::Log_obj::info(HX_("",00,00,00,00),((((HX_("\x1b""[1m",fc,fa,1d,12) + HX_("\x1b""[33m",ed,f3,1e,c8)) + HX_("Using makefile: ",0c,06,0b,14)) + makefile) + HX_("\x1b""[0m",1d,fa,1d,12)));
HXLINE(1786)			::Log_obj::info(HX_("",00,00,00,00),((((HX_("\x1b""[1m",fc,fa,1d,12) + HX_("\x1b""[33m",ed,f3,1e,c8)) + HX_("Reading HXCPP config: ",29,e6,a6,9f)) + defines->get(HX_("HXCPP_CONFIG",ce,a0,c9,d1))) + HX_("\x1b""[0m",1d,fa,1d,12)));
HXLINE(1787)			if (defines->exists(HX_("toolchain",a9,1a,50,de))) {
HXLINE(1788)				::Log_obj::info(HX_("",00,00,00,00),(((((HX_("\x1b""[1m",fc,fa,1d,12) + HX_("{",7b,00,00,00)) + HX_("\x1b""[33m",ed,f3,1e,c8)) + HX_("}Using target toolchain: ",39,9f,df,bf)) + defines->get(HX_("toolchain",a9,1a,50,de))) + HX_("\x1b""[0m",1d,fa,1d,12)));
            			}
            			else {
HXLINE(1790)				::Log_obj::info(HX_("",00,00,00,00),(((HX_("\x1b""[1m",fc,fa,1d,12) + HX_("\x1b""[33m",ed,f3,1e,c8)) + HX_("No specified toolchain",7a,7e,69,9f)) + HX_("\x1b""[0m",1d,fa,1d,12)));
            			}
HXLINE(1791)			if (::Log_obj::verbose) {
HXLINE(1791)				::Log_obj::println(HX_("",00,00,00,00));
            			}
HXLINE(1794)			if ((targets->length == 0)) {
HXLINE(1795)				targets->push(HX_("default",c1,d8,c3,9b));
            			}
HXLINE(1798)			 ::BuildTool_obj::__alloc( HX_CTX ,makefile,defines,targets,include_path,dirtyList);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(BuildTool_obj,runMain,(void))

void BuildTool_obj::printUsage(){
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_1804_printUsage)
HXLINE(1805)		::Log_obj::println(((HX_("\x1b""[33m",ed,f3,1e,c8) + HX_("Usage:",19,94,d6,73)) + HX_("\x1b""[0m",1d,fa,1d,12)));
HXLINE(1806)		::Log_obj::println(((((((((HX_(" ",20,00,00,00) + HX_("\x1b""[1m",fc,fa,1d,12)) + HX_("haxelib run hxcpp",fd,8c,4b,02)) + HX_("\x1b""[0m",1d,fa,1d,12)) + HX_(" file.xml ",7b,89,5c,44)) + HX_("\x1b""[3m",ba,fc,1d,12)) + HX_("\x1b""[37m",69,f7,1e,c8)) + HX_("[options]",9a,12,3f,1a)) + HX_("\x1b""[0m",1d,fa,1d,12)));
HXLINE(1807)		::Log_obj::println(HX_("   Build project from \"file.xml\".  options:",12,c2,e6,5f));
HXLINE(1808)		::Log_obj::println((((((((HX_("    ",00,38,3f,15) + HX_("\x1b""[1m",fc,fa,1d,12)) + HX_("-D",77,27,00,00)) + HX_("\x1b""[0m",1d,fa,1d,12)) + HX_("\x1b""[3m",ba,fc,1d,12)) + HX_("value",71,7f,b8,31)) + HX_("\x1b""[0m",1d,fa,1d,12)) + HX_(" -- Specify a define to use when processing other commands",f6,16,3b,86)));
HXLINE(1809)		::Log_obj::println(((((HX_("    ",00,38,3f,15) + HX_("\x1b""[1m",fc,fa,1d,12)) + HX_("-verbose",f5,e6,97,7f)) + HX_("\x1b""[0m",1d,fa,1d,12)) + HX_(" -- Print additional information (when available)",18,1c,d2,32)));
HXLINE(1810)		::Log_obj::println(((((HX_("    ",00,38,3f,15) + HX_("\x1b""[1m",fc,fa,1d,12)) + HX_("-dirty [groudId|all]",2a,d2,08,17)) + HX_("\x1b""[0m",1d,fa,1d,12)) + HX_(" -- always rebuild files in given group",20,3a,d1,de)));
HXLINE(1811)		::Log_obj::println(((((((((HX_(" ",20,00,00,00) + HX_("\x1b""[1m",fc,fa,1d,12)) + HX_("haxelib run hxcpp",fd,8c,4b,02)) + HX_("\x1b""[0m",1d,fa,1d,12)) + HX_(" ",20,00,00,00)) + HX_("\x1b""[3m",ba,fc,1d,12)) + HX_("\x1b""[37m",69,f7,1e,c8)) + HX_("file.cppia",49,18,63,5b)) + HX_("\x1b""[0m",1d,fa,1d,12)));
HXLINE(1812)		::Log_obj::println(HX_("   Run cppia script using default Cppia host",e3,83,f9,9d));
HXLINE(1813)		::Log_obj::println(((((((((HX_(" ",20,00,00,00) + HX_("\x1b""[1m",fc,fa,1d,12)) + HX_("haxelib run hxcpp",fd,8c,4b,02)) + HX_("\x1b""[0m",1d,fa,1d,12)) + HX_(" ",20,00,00,00)) + HX_("\x1b""[3m",ba,fc,1d,12)) + HX_("\x1b""[37m",69,f7,1e,c8)) + HX_("file.js",7b,ab,32,ff)) + HX_("\x1b""[0m",1d,fa,1d,12)));
HXLINE(1814)		::Log_obj::println(HX_("    Run emscripten compiled scipt \"file.js\"",a6,db,9e,c7));
HXLINE(1815)		::Log_obj::println(((((((((HX_(" ",20,00,00,00) + HX_("\x1b""[1m",fc,fa,1d,12)) + HX_("haxelib run hxcpp",fd,8c,4b,02)) + HX_("\x1b""[0m",1d,fa,1d,12)) + HX_(" ",20,00,00,00)) + HX_("\x1b""[3m",ba,fc,1d,12)) + HX_("\x1b""[37m",69,f7,1e,c8)) + HX_("cache [command] [project]",0e,cc,05,e1)) + HX_("\x1b""[0m",1d,fa,1d,12)));
HXLINE(1816)		::Log_obj::println(HX_("   Perform command on cache, either on specific project or all. commands:",f6,9d,67,cb));
HXLINE(1817)		::Log_obj::println(((((HX_("    ",00,38,3f,15) + HX_("\x1b""[1m",fc,fa,1d,12)) + HX_("clear",8d,71,5b,48)) + HX_("\x1b""[0m",1d,fa,1d,12)) + HX_(" -- remove all files from cache",b0,80,11,41)));
HXLINE(1818)		::Log_obj::println(((((HX_("    ",00,38,3f,15) + HX_("\x1b""[1m",fc,fa,1d,12)) + HX_("days",97,5a,63,42)) + HX_("\x1b""[0m",1d,fa,1d,12)) + HX_(" #days -- remove files older than \"days\"",51,2f,15,02)));
HXLINE(1819)		::Log_obj::println(((((HX_("    ",00,38,3f,15) + HX_("\x1b""[1m",fc,fa,1d,12)) + HX_("resize",f4,59,7b,08)) + HX_("\x1b""[0m",1d,fa,1d,12)) + HX_(" #megabytes -- Only keep #megabytes MB",02,ff,7a,30)));
HXLINE(1820)		::Log_obj::println(((((HX_("    ",00,38,3f,15) + HX_("\x1b""[1m",fc,fa,1d,12)) + HX_("list",5e,1c,b3,47)) + HX_("\x1b""[0m",1d,fa,1d,12)) + HX_(" -- list cache usage",a1,e6,1c,14)));
HXLINE(1821)		::Log_obj::println(((((HX_("    ",00,38,3f,15) + HX_("\x1b""[1m",fc,fa,1d,12)) + HX_("details",c2,dc,56,ab)) + HX_("\x1b""[0m",1d,fa,1d,12)) + HX_(" -- list cache usage, per file",f4,dc,9a,cd)));
HXLINE(1822)		::Log_obj::println(HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(BuildTool_obj,printUsage,(void))

void BuildTool_obj::printBanner(){
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_1827_printBanner)
HXLINE(1828)		::Log_obj::println(HX_("\x1b""[33;1m __                          ",49,03,26,2c));
HXLINE(1829)		::Log_obj::println(HX_("/\\ \\                                      ",89,87,c0,73));
HXLINE(1830)		::Log_obj::println(HX_("\\ \\ \\___    __  _   ___   _____   _____   ",af,bb,b6,d4));
HXLINE(1831)		::Log_obj::println(HX_(" \\ \\  _ `\\ /\\ \\/'\\ /'___\\/\\ '__`\\/\\ '__`\\ ",3b,32,80,67));
HXLINE(1832)		::Log_obj::println(HX_("  \\ \\ \\ \\ \\\\/>  <//\\ \\__/\\ \\ \\L\\ \\ \\ \\L\\ \\",f0,b2,12,24));
HXLINE(1833)		::Log_obj::println(HX_("   \\ \\_\\ \\_\\/\\_/\\_\\ \\____\\\\ \\ ,__/\\ \\ ,__/",88,ab,e9,7e));
HXLINE(1834)		::Log_obj::println(HX_("    \\/_/\\/_/\\//\\/_/\\/____/ \\ \\ \\/  \\ \\ \\/ ",ad,68,79,d1));
HXLINE(1835)		::Log_obj::println(HX_("                            \\ \\_\\   \\ \\_\\ ",96,7a,20,c4));
HXLINE(1836)		::Log_obj::println(HX_("                             \\/_/    \\/_/ \x1b""[0m",57,09,1c,20));
HXLINE(1837)		::Log_obj::println(HX_("",00,00,00,00));
HXLINE(1838)		::Log_obj::println(((HX_("\x1b""[1mhxcpp \x1b""[0m\x1b""[3;37m(Haxe C++ Runtime Support)\x1b""[0m \x1b""[1m(",35,64,a5,1e) + ::BuildTool_obj::getVersion()) + HX_(")\x1b""[0m",c6,c2,8b,ad)));
HXLINE(1839)		::Log_obj::println(HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(BuildTool_obj,printBanner,(void))

void BuildTool_obj::set64( ::haxe::ds::StringMap outDefines,bool in64,::hx::Null< bool >  __o_isArm64){
            		bool isArm64 = __o_isArm64.Default(false);
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_2366_set64)
HXDLIN(2366)		if (isArm64) {
HXLINE(2368)			outDefines->set(HX_("HXCPP_ARM64",ee,b7,2f,0b),HX_("1",31,00,00,00));
HXLINE(2369)			outDefines->set(HX_("HXCPP_M64",3f,ff,fb,2a),HX_("1",31,00,00,00));
HXLINE(2370)			outDefines->remove(HX_("HXCPP_32",ab,d4,b1,70));
            		}
            		else {
HXLINE(2372)			if (in64) {
HXLINE(2374)				outDefines->set(HX_("HXCPP_M64",3f,ff,fb,2a),HX_("1",31,00,00,00));
HXLINE(2375)				outDefines->remove(HX_("HXCPP_32",ab,d4,b1,70));
HXLINE(2376)				outDefines->remove(HX_("HXCPP_ARM64",ee,b7,2f,0b));
            			}
            			else {
HXLINE(2380)				outDefines->set(HX_("HXCPP_M32",a0,fc,fb,2a),HX_("1",31,00,00,00));
HXLINE(2381)				outDefines->remove(HX_("HXCPP_M64",3f,ff,fb,2a));
HXLINE(2382)				outDefines->remove(HX_("HXCPP_ARM64",ee,b7,2f,0b));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(BuildTool_obj,set64,(void))


::hx::ObjectPtr< BuildTool_obj > BuildTool_obj::__new(::String inJob, ::haxe::ds::StringMap inDefines,::Array< ::String > inTargets,::Array< ::String > inIncludePath,::Array< ::String > inDirtyList) {
	::hx::ObjectPtr< BuildTool_obj > __this = new BuildTool_obj();
	__this->__construct(inJob,inDefines,inTargets,inIncludePath,inDirtyList);
	return __this;
}

::hx::ObjectPtr< BuildTool_obj > BuildTool_obj::__alloc(::hx::Ctx *_hx_ctx,::String inJob, ::haxe::ds::StringMap inDefines,::Array< ::String > inTargets,::Array< ::String > inIncludePath,::Array< ::String > inDirtyList) {
	BuildTool_obj *__this = (BuildTool_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BuildTool_obj), true, "BuildTool"));
	*(void **)__this = BuildTool_obj::_hx_vtable;
	__this->__construct(inJob,inDefines,inTargets,inIncludePath,inDirtyList);
	return __this;
}

BuildTool_obj::BuildTool_obj()
{
}

void BuildTool_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BuildTool);
	HX_MARK_MEMBER_NAME(mDefines,"mDefines");
	HX_MARK_MEMBER_NAME(mCurrentIncludeFile,"mCurrentIncludeFile");
	HX_MARK_MEMBER_NAME(mIncludePath,"mIncludePath");
	HX_MARK_MEMBER_NAME(mCompiler,"mCompiler");
	HX_MARK_MEMBER_NAME(mStripper,"mStripper");
	HX_MARK_MEMBER_NAME(mManifester,"mManifester");
	HX_MARK_MEMBER_NAME(mPrelinkers,"mPrelinkers");
	HX_MARK_MEMBER_NAME(mLinkers,"mLinkers");
	HX_MARK_MEMBER_NAME(mCopyFiles,"mCopyFiles");
	HX_MARK_MEMBER_NAME(mFileGroups,"mFileGroups");
	HX_MARK_MEMBER_NAME(mTargets,"mTargets");
	HX_MARK_MEMBER_NAME(mFileStack,"mFileStack");
	HX_MARK_MEMBER_NAME(mMakefile,"mMakefile");
	HX_MARK_MEMBER_NAME(mMagicLibs,"mMagicLibs");
	HX_MARK_MEMBER_NAME(mPragmaOnce,"mPragmaOnce");
	HX_MARK_MEMBER_NAME(mNvccFlags,"mNvccFlags");
	HX_MARK_MEMBER_NAME(mNvccLinkFlags,"mNvccLinkFlags");
	HX_MARK_MEMBER_NAME(mDirtyList,"mDirtyList");
	HX_MARK_MEMBER_NAME(arm64,"arm64");
	HX_MARK_MEMBER_NAME(m64,"m64");
	HX_MARK_MEMBER_NAME(m32,"m32");
	HX_MARK_END_CLASS();
}

void BuildTool_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mDefines,"mDefines");
	HX_VISIT_MEMBER_NAME(mCurrentIncludeFile,"mCurrentIncludeFile");
	HX_VISIT_MEMBER_NAME(mIncludePath,"mIncludePath");
	HX_VISIT_MEMBER_NAME(mCompiler,"mCompiler");
	HX_VISIT_MEMBER_NAME(mStripper,"mStripper");
	HX_VISIT_MEMBER_NAME(mManifester,"mManifester");
	HX_VISIT_MEMBER_NAME(mPrelinkers,"mPrelinkers");
	HX_VISIT_MEMBER_NAME(mLinkers,"mLinkers");
	HX_VISIT_MEMBER_NAME(mCopyFiles,"mCopyFiles");
	HX_VISIT_MEMBER_NAME(mFileGroups,"mFileGroups");
	HX_VISIT_MEMBER_NAME(mTargets,"mTargets");
	HX_VISIT_MEMBER_NAME(mFileStack,"mFileStack");
	HX_VISIT_MEMBER_NAME(mMakefile,"mMakefile");
	HX_VISIT_MEMBER_NAME(mMagicLibs,"mMagicLibs");
	HX_VISIT_MEMBER_NAME(mPragmaOnce,"mPragmaOnce");
	HX_VISIT_MEMBER_NAME(mNvccFlags,"mNvccFlags");
	HX_VISIT_MEMBER_NAME(mNvccLinkFlags,"mNvccLinkFlags");
	HX_VISIT_MEMBER_NAME(mDirtyList,"mDirtyList");
	HX_VISIT_MEMBER_NAME(arm64,"arm64");
	HX_VISIT_MEMBER_NAME(m64,"m64");
	HX_VISIT_MEMBER_NAME(m32,"m32");
}

::hx::Val BuildTool_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"m64") ) { return ::hx::Val( m64 ); }
		if (HX_FIELD_EQ(inName,"m32") ) { return ::hx::Val( m32 ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"arm64") ) { return ::hx::Val( arm64 ); }
		if (HX_FIELD_EQ(inName,"valid") ) { return ::hx::Val( valid_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"popFile") ) { return ::hx::Val( popFile_dyn() ); }
		if (HX_FIELD_EQ(inName,"defined") ) { return ::hx::Val( defined_dyn() ); }
		if (HX_FIELD_EQ(inName,"include") ) { return ::hx::Val( include_dyn() ); }
		if (HX_FIELD_EQ(inName,"dospath") ) { return ::hx::Val( dospath_dyn() ); }
		if (HX_FIELD_EQ(inName,"subBool") ) { return ::hx::Val( subBool_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mDefines") ) { return ::hx::Val( mDefines ); }
		if (HX_FIELD_EQ(inName,"mLinkers") ) { return ::hx::Val( mLinkers ); }
		if (HX_FIELD_EQ(inName,"mTargets") ) { return ::hx::Val( mTargets ); }
		if (HX_FIELD_EQ(inName,"pushFile") ) { return ::hx::Val( pushFile_dyn() ); }
		if (HX_FIELD_EQ(inName,"parseXML") ) { return ::hx::Val( parseXML_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mCompiler") ) { return ::hx::Val( mCompiler ); }
		if (HX_FIELD_EQ(inName,"mStripper") ) { return ::hx::Val( mStripper ); }
		if (HX_FIELD_EQ(inName,"mMakefile") ) { return ::hx::Val( mMakefile ); }
		if (HX_FIELD_EQ(inName,"parseBool") ) { return ::hx::Val( parseBool_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"mCopyFiles") ) { return ::hx::Val( mCopyFiles ); }
		if (HX_FIELD_EQ(inName,"mFileStack") ) { return ::hx::Val( mFileStack ); }
		if (HX_FIELD_EQ(inName,"mMagicLibs") ) { return ::hx::Val( mMagicLibs ); }
		if (HX_FIELD_EQ(inName,"mNvccFlags") ) { return ::hx::Val( mNvccFlags ); }
		if (HX_FIELD_EQ(inName,"mDirtyList") ) { return ::hx::Val( mDirtyList ); }
		if (HX_FIELD_EQ(inName,"substitute") ) { return ::hx::Val( substitute_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mManifester") ) { return ::hx::Val( mManifester ); }
		if (HX_FIELD_EQ(inName,"mPrelinkers") ) { return ::hx::Val( mPrelinkers ); }
		if (HX_FIELD_EQ(inName,"mFileGroups") ) { return ::hx::Val( mFileGroups ); }
		if (HX_FIELD_EQ(inName,"mPragmaOnce") ) { return ::hx::Val( mPragmaOnce ); }
		if (HX_FIELD_EQ(inName,"buildTarget") ) { return ::hx::Val( buildTarget_dyn() ); }
		if (HX_FIELD_EQ(inName,"cleanTarget") ) { return ::hx::Val( cleanTarget_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadNvccXml") ) { return ::hx::Val( loadNvccXml_dyn() ); }
		if (HX_FIELD_EQ(inName,"resolvePath") ) { return ::hx::Val( resolvePath_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"mIncludePath") ) { return ::hx::Val( mIncludePath ); }
		if (HX_FIELD_EQ(inName,"createLinker") ) { return ::hx::Val( createLinker_dyn() ); }
		if (HX_FIELD_EQ(inName,"createTarget") ) { return ::hx::Val( createTarget_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"linkNvccFiles") ) { return ::hx::Val( linkNvccFiles_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"mNvccLinkFlags") ) { return ::hx::Val( mNvccLinkFlags ); }
		if (HX_FIELD_EQ(inName,"createCompiler") ) { return ::hx::Val( createCompiler_dyn() ); }
		if (HX_FIELD_EQ(inName,"createStripper") ) { return ::hx::Val( createStripper_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"createFileGroup") ) { return ::hx::Val( createFileGroup_dyn() ); }
		if (HX_FIELD_EQ(inName,"createPrelinker") ) { return ::hx::Val( createPrelinker_dyn() ); }
		if (HX_FIELD_EQ(inName,"findIncludeFile") ) { return ::hx::Val( findIncludeFile_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"createManifester") ) { return ::hx::Val( createManifester_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkToolVersion") ) { return ::hx::Val( checkToolVersion_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"mCurrentIncludeFile") ) { return ::hx::Val( mCurrentIncludeFile ); }
		if (HX_FIELD_EQ(inName,"setDefaultToolchain") ) { return ::hx::Val( setDefaultToolchain_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"findLocalIncludeFile") ) { return ::hx::Val( findLocalIncludeFile_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"setupAppleDirectories") ) { return ::hx::Val( setupAppleDirectories_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BuildTool_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"os") ) { outValue = ( os ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"is64") ) { outValue = ( is64 ); return true; }
		if (HX_FIELD_EQ(inName,"copy") ) { outValue = copy_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"HXCPP") ) { outValue = ( HXCPP ); return true; }
		if (HX_FIELD_EQ(inName,"isRPi") ) { outValue = ( isRPi ); return true; }
		if (HX_FIELD_EQ(inName,"isMac") ) { outValue = ( isMac ); return true; }
		if (HX_FIELD_EQ(inName,"set64") ) { outValue = set64_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"isMsvc") ) { outValue = isMsvc_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isLinux") ) { outValue = ( isLinux ); return true; }
		if (HX_FIELD_EQ(inName,"outputs") ) { outValue = ( outputs ); return true; }
		if (HX_FIELD_EQ(inName,"getArch") ) { outValue = getArch_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isMingw") ) { outValue = isMingw_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getNvcc") ) { outValue = getNvcc_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"runMain") ) { outValue = runMain_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = ( instance ); return true; }
		if (HX_FIELD_EQ(inName,"startDir") ) { outValue = ( startDir ); return true; }
		if (HX_FIELD_EQ(inName,"keepTemp") ) { outValue = keepTemp_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isWindows") ) { outValue = ( isWindows ); return true; }
		if (HX_FIELD_EQ(inName,"targetKey") ) { outValue = ( targetKey ); return true; }
		if (HX_FIELD_EQ(inName,"mVarMatch") ) { outValue = ( mVarMatch ); return true; }
		if (HX_FIELD_EQ(inName,"addOutput") ) { outValue = addOutput_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setupNvcc") ) { outValue = setupNvcc_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"groupMutex") ) { outValue = ( groupMutex ); return true; }
		if (HX_FIELD_EQ(inName,"getMsvcVer") ) { outValue = getMsvcVer_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getVersion") ) { outValue = getVersion_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"printUsage") ) { outValue = printUsage_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sThreadPool") ) { outValue = ( sThreadPool ); return true; }
		if (HX_FIELD_EQ(inName,"destination") ) { outValue = ( destination ); return true; }
		if (HX_FIELD_EQ(inName,"isDefault64") ) { outValue = isDefault64_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"printBanner") ) { outValue = printBanner_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isWindowsArm") ) { outValue = ( isWindowsArm ); return true; }
		if (HX_FIELD_EQ(inName,"helperThread") ) { outValue = ( helperThread ); return true; }
		if (HX_FIELD_EQ(inName,"getNvccFlags") ) { outValue = getNvccFlags_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"sAllowNumProcs") ) { outValue = ( sAllowNumProcs ); return true; }
		if (HX_FIELD_EQ(inName,"mNoDollarMatch") ) { outValue = ( mNoDollarMatch ); return true; }
		if (HX_FIELD_EQ(inName,"threadExitCode") ) { outValue = ( threadExitCode ); return true; }
		if (HX_FIELD_EQ(inName,"getThreadCount") ) { outValue = getThreadCount_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setThreadError") ) { outValue = setThreadError_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"sReportedThreads") ) { outValue = ( sReportedThreads ); return true; }
		if (HX_FIELD_EQ(inName,"getNvccLinkFlags") ) { outValue = getNvccLinkFlags_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"exitOnThreadError") ) { outValue = ( exitOnThreadError ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"sCompileThreadCount") ) { outValue = ( sCompileThreadCount ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getNumberOfProcesses") ) { outValue = getNumberOfProcesses_dyn(); return true; }
	}
	return false;
}

::hx::Val BuildTool_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"m64") ) { m64=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m32") ) { m32=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"arm64") ) { arm64=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mDefines") ) { mDefines=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mLinkers") ) { mLinkers=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mTargets") ) { mTargets=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mCompiler") ) { mCompiler=inValue.Cast<  ::Compiler >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mStripper") ) { mStripper=inValue.Cast<  ::Stripper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mMakefile") ) { mMakefile=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"mCopyFiles") ) { mCopyFiles=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mFileStack") ) { mFileStack=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mMagicLibs") ) { mMagicLibs=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mNvccFlags") ) { mNvccFlags=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mDirtyList") ) { mDirtyList=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mManifester") ) { mManifester=inValue.Cast<  ::Manifester >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mPrelinkers") ) { mPrelinkers=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mFileGroups") ) { mFileGroups=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mPragmaOnce") ) { mPragmaOnce=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"mIncludePath") ) { mIncludePath=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"mNvccLinkFlags") ) { mNvccLinkFlags=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"mCurrentIncludeFile") ) { mCurrentIncludeFile=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool BuildTool_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"os") ) { os=ioValue.Cast< ::String >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"is64") ) { is64=ioValue.Cast< bool >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"HXCPP") ) { HXCPP=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"isRPi") ) { isRPi=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"isMac") ) { isMac=ioValue.Cast< bool >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isLinux") ) { isLinux=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"outputs") ) { outputs=ioValue.Cast< ::Array< ::String > >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::BuildTool >(); return true; }
		if (HX_FIELD_EQ(inName,"startDir") ) { startDir=ioValue.Cast< ::String >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"isWindows") ) { isWindows=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"targetKey") ) { targetKey=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"mVarMatch") ) { mVarMatch=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"groupMutex") ) { groupMutex=ioValue.Cast<  ::sys::thread::Mutex >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sThreadPool") ) { sThreadPool=ioValue.Cast<  ::ThreadPool >(); return true; }
		if (HX_FIELD_EQ(inName,"destination") ) { destination=ioValue.Cast< ::String >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isWindowsArm") ) { isWindowsArm=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"helperThread") ) { helperThread=ioValue.Cast<  ::sys::thread::Tls >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"sAllowNumProcs") ) { sAllowNumProcs=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"mNoDollarMatch") ) { mNoDollarMatch=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"threadExitCode") ) { threadExitCode=ioValue.Cast< int >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"sReportedThreads") ) { sReportedThreads=ioValue.Cast< int >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"exitOnThreadError") ) { exitOnThreadError=ioValue.Cast< bool >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"sCompileThreadCount") ) { sCompileThreadCount=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void BuildTool_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("mDefines",eb,f6,d3,c8));
	outFields->push(HX_("mCurrentIncludeFile",d8,d4,99,d4));
	outFields->push(HX_("mIncludePath",80,88,34,6c));
	outFields->push(HX_("mCompiler",2c,11,4d,28));
	outFields->push(HX_("mStripper",92,ca,fd,87));
	outFields->push(HX_("mManifester",a9,8c,c8,80));
	outFields->push(HX_("mPrelinkers",b6,90,02,9a));
	outFields->push(HX_("mLinkers",bf,66,6d,4b));
	outFields->push(HX_("mCopyFiles",55,ec,1b,08));
	outFields->push(HX_("mFileGroups",bd,1a,11,d2));
	outFields->push(HX_("mTargets",15,b3,33,b0));
	outFields->push(HX_("mFileStack",ff,f0,ba,07));
	outFields->push(HX_("mMakefile",f7,08,fc,f9));
	outFields->push(HX_("mMagicLibs",2e,2f,42,e8));
	outFields->push(HX_("mPragmaOnce",2a,2b,0a,f0));
	outFields->push(HX_("mNvccFlags",12,e3,5e,c2));
	outFields->push(HX_("mNvccLinkFlags",38,52,fd,f6));
	outFields->push(HX_("mDirtyList",63,f3,82,21));
	outFields->push(HX_("arm64",9a,7c,8b,25));
	outFields->push(HX_("m64",eb,e4,52,00));
	outFields->push(HX_("m32",4c,e2,52,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BuildTool_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(BuildTool_obj,mDefines),HX_("mDefines",eb,f6,d3,c8)},
	{::hx::fsString,(int)offsetof(BuildTool_obj,mCurrentIncludeFile),HX_("mCurrentIncludeFile",d8,d4,99,d4)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(BuildTool_obj,mIncludePath),HX_("mIncludePath",80,88,34,6c)},
	{::hx::fsObject /*  ::Compiler */ ,(int)offsetof(BuildTool_obj,mCompiler),HX_("mCompiler",2c,11,4d,28)},
	{::hx::fsObject /*  ::Stripper */ ,(int)offsetof(BuildTool_obj,mStripper),HX_("mStripper",92,ca,fd,87)},
	{::hx::fsObject /*  ::Manifester */ ,(int)offsetof(BuildTool_obj,mManifester),HX_("mManifester",a9,8c,c8,80)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(BuildTool_obj,mPrelinkers),HX_("mPrelinkers",b6,90,02,9a)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(BuildTool_obj,mLinkers),HX_("mLinkers",bf,66,6d,4b)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(BuildTool_obj,mCopyFiles),HX_("mCopyFiles",55,ec,1b,08)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(BuildTool_obj,mFileGroups),HX_("mFileGroups",bd,1a,11,d2)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(BuildTool_obj,mTargets),HX_("mTargets",15,b3,33,b0)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(BuildTool_obj,mFileStack),HX_("mFileStack",ff,f0,ba,07)},
	{::hx::fsString,(int)offsetof(BuildTool_obj,mMakefile),HX_("mMakefile",f7,08,fc,f9)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(BuildTool_obj,mMagicLibs),HX_("mMagicLibs",2e,2f,42,e8)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(BuildTool_obj,mPragmaOnce),HX_("mPragmaOnce",2a,2b,0a,f0)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(BuildTool_obj,mNvccFlags),HX_("mNvccFlags",12,e3,5e,c2)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(BuildTool_obj,mNvccLinkFlags),HX_("mNvccLinkFlags",38,52,fd,f6)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(BuildTool_obj,mDirtyList),HX_("mDirtyList",63,f3,82,21)},
	{::hx::fsBool,(int)offsetof(BuildTool_obj,arm64),HX_("arm64",9a,7c,8b,25)},
	{::hx::fsBool,(int)offsetof(BuildTool_obj,m64),HX_("m64",eb,e4,52,00)},
	{::hx::fsBool,(int)offsetof(BuildTool_obj,m32),HX_("m32",4c,e2,52,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo BuildTool_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &BuildTool_obj::SupportedVersion,HX_("SupportedVersion",aa,66,a9,3d)},
	{::hx::fsString,(void *) &BuildTool_obj::os,HX_("os",24,61,00,00)},
	{::hx::fsBool,(void *) &BuildTool_obj::sAllowNumProcs,HX_("sAllowNumProcs",2d,45,27,12)},
	{::hx::fsInt,(void *) &BuildTool_obj::sCompileThreadCount,HX_("sCompileThreadCount",45,ec,af,93)},
	{::hx::fsObject /*  ::ThreadPool */ ,(void *) &BuildTool_obj::sThreadPool,HX_("sThreadPool",19,87,c0,20)},
	{::hx::fsInt,(void *) &BuildTool_obj::sReportedThreads,HX_("sReportedThreads",63,2d,75,3e)},
	{::hx::fsString,(void *) &BuildTool_obj::HXCPP,HX_("HXCPP",f3,a7,37,af)},
	{::hx::fsBool,(void *) &BuildTool_obj::is64,HX_("is64",a8,d9,be,45)},
	{::hx::fsBool,(void *) &BuildTool_obj::isWindows,HX_("isWindows",b9,5b,73,ec)},
	{::hx::fsBool,(void *) &BuildTool_obj::isWindowsArm,HX_("isWindowsArm",23,b4,51,be)},
	{::hx::fsBool,(void *) &BuildTool_obj::isLinux,HX_("isLinux",aa,8f,87,11)},
	{::hx::fsBool,(void *) &BuildTool_obj::isRPi,HX_("isRPi",41,f1,54,c1)},
	{::hx::fsBool,(void *) &BuildTool_obj::isMac,HX_("isMac",c5,34,51,c1)},
	{::hx::fsString,(void *) &BuildTool_obj::targetKey,HX_("targetKey",ce,76,30,69)},
	{::hx::fsObject /*  ::BuildTool */ ,(void *) &BuildTool_obj::instance,HX_("instance",95,1f,e1,59)},
	{::hx::fsObject /*  ::sys::thread::Tls */ ,(void *) &BuildTool_obj::helperThread,HX_("helperThread",d8,32,51,cf)},
	{::hx::fsString,(void *) &BuildTool_obj::destination,HX_("destination",8e,8a,fb,11)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &BuildTool_obj::outputs,HX_("outputs",52,12,6c,e4)},
	{::hx::fsObject /*  ::sys::thread::Mutex */ ,(void *) &BuildTool_obj::groupMutex,HX_("groupMutex",c0,27,27,87)},
	{::hx::fsObject /*  ::EReg */ ,(void *) &BuildTool_obj::mVarMatch,HX_("mVarMatch",6b,e6,5d,f4)},
	{::hx::fsObject /*  ::EReg */ ,(void *) &BuildTool_obj::mNoDollarMatch,HX_("mNoDollarMatch",bb,07,94,4d)},
	{::hx::fsBool,(void *) &BuildTool_obj::exitOnThreadError,HX_("exitOnThreadError",c1,3f,78,cc)},
	{::hx::fsInt,(void *) &BuildTool_obj::threadExitCode,HX_("threadExitCode",55,cc,7a,c9)},
	{::hx::fsString,(void *) &BuildTool_obj::startDir,HX_("startDir",0b,ea,8f,42)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String BuildTool_obj_sMemberFields[] = {
	HX_("mDefines",eb,f6,d3,c8),
	HX_("mCurrentIncludeFile",d8,d4,99,d4),
	HX_("mIncludePath",80,88,34,6c),
	HX_("mCompiler",2c,11,4d,28),
	HX_("mStripper",92,ca,fd,87),
	HX_("mManifester",a9,8c,c8,80),
	HX_("mPrelinkers",b6,90,02,9a),
	HX_("mLinkers",bf,66,6d,4b),
	HX_("mCopyFiles",55,ec,1b,08),
	HX_("mFileGroups",bd,1a,11,d2),
	HX_("mTargets",15,b3,33,b0),
	HX_("mFileStack",ff,f0,ba,07),
	HX_("mMakefile",f7,08,fc,f9),
	HX_("mMagicLibs",2e,2f,42,e8),
	HX_("mPragmaOnce",2a,2b,0a,f0),
	HX_("mNvccFlags",12,e3,5e,c2),
	HX_("mNvccLinkFlags",38,52,fd,f6),
	HX_("mDirtyList",63,f3,82,21),
	HX_("arm64",9a,7c,8b,25),
	HX_("m64",eb,e4,52,00),
	HX_("m32",4c,e2,52,00),
	HX_("pushFile",76,01,ad,12),
	HX_("popFile",ad,f4,76,3e),
	HX_("buildTarget",1f,d9,5d,d7),
	HX_("linkNvccFiles",15,a5,21,04),
	HX_("cleanTarget",ba,25,84,74),
	HX_("createCompiler",bb,1e,0c,d0),
	HX_("loadNvccXml",49,0c,52,1f),
	HX_("createFileGroup",87,0c,11,3d),
	HX_("createLinker",03,23,fa,0e),
	HX_("createPrelinker",ae,38,a6,b7),
	HX_("createManifester",f8,5b,91,e0),
	HX_("createStripper",21,d8,bc,2f),
	HX_("createTarget",6d,33,42,a9),
	HX_("defined",c9,37,08,a1),
	HX_("parseBool",fd,d5,c1,c8),
	HX_("findLocalIncludeFile",72,db,e1,82),
	HX_("findIncludeFile",0b,5d,f2,43),
	HX_("setDefaultToolchain",6a,dd,0b,98),
	HX_("setupAppleDirectories",6e,2d,38,42),
	HX_("parseXML",64,5b,7d,d6),
	HX_("checkToolVersion",b8,f2,2a,5c),
	HX_("resolvePath",b1,0a,8d,e5),
	HX_("include",28,fe,f6,51),
	HX_("dospath",2d,0c,66,21),
	HX_("substitute",5a,90,bb,80),
	HX_("subBool",ca,19,1f,0f),
	HX_("valid",fc,74,b8,31),
	::String(null()) };

static void BuildTool_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BuildTool_obj::SupportedVersion,"SupportedVersion");
	HX_MARK_MEMBER_NAME(BuildTool_obj::os,"os");
	HX_MARK_MEMBER_NAME(BuildTool_obj::sAllowNumProcs,"sAllowNumProcs");
	HX_MARK_MEMBER_NAME(BuildTool_obj::sCompileThreadCount,"sCompileThreadCount");
	HX_MARK_MEMBER_NAME(BuildTool_obj::sThreadPool,"sThreadPool");
	HX_MARK_MEMBER_NAME(BuildTool_obj::sReportedThreads,"sReportedThreads");
	HX_MARK_MEMBER_NAME(BuildTool_obj::HXCPP,"HXCPP");
	HX_MARK_MEMBER_NAME(BuildTool_obj::is64,"is64");
	HX_MARK_MEMBER_NAME(BuildTool_obj::isWindows,"isWindows");
	HX_MARK_MEMBER_NAME(BuildTool_obj::isWindowsArm,"isWindowsArm");
	HX_MARK_MEMBER_NAME(BuildTool_obj::isLinux,"isLinux");
	HX_MARK_MEMBER_NAME(BuildTool_obj::isRPi,"isRPi");
	HX_MARK_MEMBER_NAME(BuildTool_obj::isMac,"isMac");
	HX_MARK_MEMBER_NAME(BuildTool_obj::targetKey,"targetKey");
	HX_MARK_MEMBER_NAME(BuildTool_obj::instance,"instance");
	HX_MARK_MEMBER_NAME(BuildTool_obj::helperThread,"helperThread");
	HX_MARK_MEMBER_NAME(BuildTool_obj::destination,"destination");
	HX_MARK_MEMBER_NAME(BuildTool_obj::outputs,"outputs");
	HX_MARK_MEMBER_NAME(BuildTool_obj::groupMutex,"groupMutex");
	HX_MARK_MEMBER_NAME(BuildTool_obj::mVarMatch,"mVarMatch");
	HX_MARK_MEMBER_NAME(BuildTool_obj::mNoDollarMatch,"mNoDollarMatch");
	HX_MARK_MEMBER_NAME(BuildTool_obj::exitOnThreadError,"exitOnThreadError");
	HX_MARK_MEMBER_NAME(BuildTool_obj::threadExitCode,"threadExitCode");
	HX_MARK_MEMBER_NAME(BuildTool_obj::startDir,"startDir");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BuildTool_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BuildTool_obj::SupportedVersion,"SupportedVersion");
	HX_VISIT_MEMBER_NAME(BuildTool_obj::os,"os");
	HX_VISIT_MEMBER_NAME(BuildTool_obj::sAllowNumProcs,"sAllowNumProcs");
	HX_VISIT_MEMBER_NAME(BuildTool_obj::sCompileThreadCount,"sCompileThreadCount");
	HX_VISIT_MEMBER_NAME(BuildTool_obj::sThreadPool,"sThreadPool");
	HX_VISIT_MEMBER_NAME(BuildTool_obj::sReportedThreads,"sReportedThreads");
	HX_VISIT_MEMBER_NAME(BuildTool_obj::HXCPP,"HXCPP");
	HX_VISIT_MEMBER_NAME(BuildTool_obj::is64,"is64");
	HX_VISIT_MEMBER_NAME(BuildTool_obj::isWindows,"isWindows");
	HX_VISIT_MEMBER_NAME(BuildTool_obj::isWindowsArm,"isWindowsArm");
	HX_VISIT_MEMBER_NAME(BuildTool_obj::isLinux,"isLinux");
	HX_VISIT_MEMBER_NAME(BuildTool_obj::isRPi,"isRPi");
	HX_VISIT_MEMBER_NAME(BuildTool_obj::isMac,"isMac");
	HX_VISIT_MEMBER_NAME(BuildTool_obj::targetKey,"targetKey");
	HX_VISIT_MEMBER_NAME(BuildTool_obj::instance,"instance");
	HX_VISIT_MEMBER_NAME(BuildTool_obj::helperThread,"helperThread");
	HX_VISIT_MEMBER_NAME(BuildTool_obj::destination,"destination");
	HX_VISIT_MEMBER_NAME(BuildTool_obj::outputs,"outputs");
	HX_VISIT_MEMBER_NAME(BuildTool_obj::groupMutex,"groupMutex");
	HX_VISIT_MEMBER_NAME(BuildTool_obj::mVarMatch,"mVarMatch");
	HX_VISIT_MEMBER_NAME(BuildTool_obj::mNoDollarMatch,"mNoDollarMatch");
	HX_VISIT_MEMBER_NAME(BuildTool_obj::exitOnThreadError,"exitOnThreadError");
	HX_VISIT_MEMBER_NAME(BuildTool_obj::threadExitCode,"threadExitCode");
	HX_VISIT_MEMBER_NAME(BuildTool_obj::startDir,"startDir");
};

#endif

::hx::Class BuildTool_obj::__mClass;

static ::String BuildTool_obj_sStaticFields[] = {
	HX_("SupportedVersion",aa,66,a9,3d),
	HX_("os",24,61,00,00),
	HX_("sAllowNumProcs",2d,45,27,12),
	HX_("sCompileThreadCount",45,ec,af,93),
	HX_("sThreadPool",19,87,c0,20),
	HX_("sReportedThreads",63,2d,75,3e),
	HX_("HXCPP",f3,a7,37,af),
	HX_("is64",a8,d9,be,45),
	HX_("isWindows",b9,5b,73,ec),
	HX_("isWindowsArm",23,b4,51,be),
	HX_("isLinux",aa,8f,87,11),
	HX_("isRPi",41,f1,54,c1),
	HX_("isMac",c5,34,51,c1),
	HX_("targetKey",ce,76,30,69),
	HX_("instance",95,1f,e1,59),
	HX_("helperThread",d8,32,51,cf),
	HX_("destination",8e,8a,fb,11),
	HX_("outputs",52,12,6c,e4),
	HX_("groupMutex",c0,27,27,87),
	HX_("mVarMatch",6b,e6,5d,f4),
	HX_("mNoDollarMatch",bb,07,94,4d),
	HX_("exitOnThreadError",c1,3f,78,cc),
	HX_("threadExitCode",55,cc,7a,c9),
	HX_("startDir",0b,ea,8f,42),
	HX_("isDefault64",f5,30,7d,d5),
	HX_("addOutput",02,44,a5,c4),
	HX_("getThreadCount",af,30,f2,25),
	HX_("setThreadError",1c,a0,d8,6e),
	HX_("setupNvcc",05,b6,9d,a3),
	HX_("getArch",8c,39,f7,12),
	HX_("getMsvcVer",1a,c2,09,32),
	HX_("keepTemp",39,e6,cc,66),
	HX_("getNumberOfProcesses",c7,f2,16,0e),
	HX_("getVersion",22,6d,53,cc),
	HX_("isMsvc",1d,b1,ca,65),
	HX_("isMingw",f8,17,ee,a4),
	HX_("getNvcc",9e,08,92,1b),
	HX_("getNvccLinkFlags",6f,2c,61,35),
	HX_("getNvccFlags",c9,95,2d,50),
	HX_("copy",b5,bb,c4,41),
	HX_("main",39,38,56,48),
	HX_("runMain",24,4d,93,d5),
	HX_("printUsage",b4,b1,c1,02),
	HX_("printBanner",f9,95,58,79),
	HX_("set64",60,77,2f,7a),
	::String(null())
};

void BuildTool_obj::__register()
{
	BuildTool_obj _hx_dummy;
	BuildTool_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("BuildTool",86,71,10,8f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BuildTool_obj::__GetStatic;
	__mClass->mSetStaticField = &BuildTool_obj::__SetStatic;
	__mClass->mMarkFunc = BuildTool_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(BuildTool_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BuildTool_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BuildTool_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BuildTool_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BuildTool_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BuildTool_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BuildTool_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_48_boot)
HXDLIN(  48)		SupportedVersion = 430;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_72_boot)
HXDLIN(  72)		os = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_73_boot)
HXDLIN(  73)		sAllowNumProcs = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_74_boot)
HXDLIN(  74)		sCompileThreadCount = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_76_boot)
HXDLIN(  76)		sReportedThreads = -1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_77_boot)
HXDLIN(  77)		HXCPP = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_78_boot)
HXDLIN(  78)		is64 = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_79_boot)
HXDLIN(  79)		isWindows = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_80_boot)
HXDLIN(  80)		isWindowsArm = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_81_boot)
HXDLIN(  81)		isLinux = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_82_boot)
HXDLIN(  82)		isRPi = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_83_boot)
HXDLIN(  83)		isMac = false;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_86_boot)
HXDLIN(  86)		helperThread =  ::sys::thread::Tls_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_88_boot)
HXDLIN(  88)		outputs = ::Array_obj< ::String >::__new();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_89_boot)
HXDLIN(  89)		groupMutex =  ::sys::thread::Mutex_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_90_boot)
HXDLIN(  90)		mVarMatch =  ::EReg_obj::__alloc( HX_CTX ,HX_("\\${(.*?)}",c2,dd,51,6b),HX_("",00,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_91_boot)
HXDLIN(  91)		mNoDollarMatch =  ::EReg_obj::__alloc( HX_CTX ,HX_("{(.*?)}",0a,15,78,91),HX_("",00,00,00,00));
            	}
{
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_93_boot)
HXDLIN(  93)		exitOnThreadError = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af91bcc8ec9a333f_94_boot)
HXDLIN(  94)		threadExitCode = 0;
            	}
}

