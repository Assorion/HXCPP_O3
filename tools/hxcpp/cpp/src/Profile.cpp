// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_Entry
#include <Entry.h>
#endif
#ifndef INCLUDED_Profile
#include <Profile.h>
#endif
#ifndef INCLUDED_Tools
#include <Tools.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_71907eb2e7163919_83_start,"Profile","start",0x883c6b3d,"Profile.start","Profile.hx",83,0xd2d85d55)
HX_LOCAL_STACK_FRAME(_hx_pos_71907eb2e7163919_92_enable,"Profile","enable",0x9f2eb748,"Profile.enable","Profile.hx",92,0xd2d85d55)
HX_LOCAL_STACK_FRAME(_hx_pos_71907eb2e7163919_98_setEntry,"Profile","setEntry",0x63c96575,"Profile.setEntry","Profile.hx",98,0xd2d85d55)
HX_LOCAL_STACK_FRAME(_hx_pos_71907eb2e7163919_107_push,"Profile","push",0x84f1ef5f,"Profile.push","Profile.hx",107,0xd2d85d55)
HX_LOCAL_STACK_FRAME(_hx_pos_71907eb2e7163919_115_pop,"Profile","pop",0xaa7f57ac,"Profile.pop","Profile.hx",115,0xd2d85d55)
HX_LOCAL_STACK_FRAME(_hx_pos_71907eb2e7163919_126_dump,"Profile","dump",0x7d035ab9,"Profile.dump","Profile.hx",126,0xd2d85d55)
HX_LOCAL_STACK_FRAME(_hx_pos_71907eb2e7163919_138_now,"Profile","now",0xaa7dd331,"Profile.now","Profile.hx",138,0xd2d85d55)
HX_LOCAL_STACK_FRAME(_hx_pos_71907eb2e7163919_74_boot,"Profile","boot",0x7bac61b7,"Profile.boot","Profile.hx",74,0xd2d85d55)

void Profile_obj::__construct() { }

Dynamic Profile_obj::__CreateEmpty() { return new Profile_obj; }

void *Profile_obj::_hx_vtable = 0;

Dynamic Profile_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Profile_obj > _hx_result = new Profile_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Profile_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x122c35d5;
}

bool Profile_obj::valid;

Float Profile_obj::t0;

 ::Entry Profile_obj::root;

 ::Entry Profile_obj::current;

 ::Entry Profile_obj::currentParent;

::Array< ::Dynamic> Profile_obj::stack;

void Profile_obj::start(){
            	HX_GC_STACKFRAME(&_hx_pos_71907eb2e7163919_83_start)
HXLINE(  84)		::Profile_obj::t0 =  ::__time_stamp();
HXLINE(  85)		::Profile_obj::root =  ::Entry_obj::__alloc( HX_CTX ,HX_("Program",64,72,4a,c1));
HXLINE(  86)		::Profile_obj::currentParent = ::Profile_obj::root;
HXLINE(  87)		::Profile_obj::current = null();
HXLINE(  88)		::Profile_obj::stack = ::Array_obj< ::Dynamic>::__new(0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Profile_obj,start,(void))

void Profile_obj::enable(){
            	HX_STACKFRAME(&_hx_pos_71907eb2e7163919_92_enable)
HXLINE(  93)		::Profile_obj::valid = true;
HXLINE(  94)		::Tools_obj::addOnExitHook(::Profile_obj::dump_dyn());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Profile_obj,enable,(void))

void Profile_obj::setEntry(::String inName){
            	HX_STACKFRAME(&_hx_pos_71907eb2e7163919_98_setEntry)
HXLINE(  99)		if (!(::Profile_obj::valid)) {
HXLINE(  99)			return;
            		}
HXLINE( 101)		if (::hx::IsNotNull( ::Profile_obj::current )) {
HXLINE( 102)			::Profile_obj::current->stop();
            		}
HXLINE( 103)		::Profile_obj::current = ::Profile_obj::currentParent->find(inName);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Profile_obj,setEntry,(void))

void Profile_obj::push(::String inName){
            	HX_STACKFRAME(&_hx_pos_71907eb2e7163919_107_push)
HXLINE( 108)		if (!(::Profile_obj::valid)) {
HXLINE( 108)			return;
            		}
HXLINE( 110)		::Profile_obj::stack->push(::Profile_obj::currentParent);
HXLINE( 111)		::Profile_obj::currentParent = ::Profile_obj::current;
HXLINE( 112)		::Profile_obj::current = ::Profile_obj::currentParent->find(inName);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Profile_obj,push,(void))

void Profile_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_71907eb2e7163919_115_pop)
HXLINE( 116)		if (!(::Profile_obj::valid)) {
HXLINE( 116)			return;
            		}
HXLINE( 118)		::Profile_obj::current->stop();
HXLINE( 119)		::Profile_obj::currentParent = ::Profile_obj::stack->pop().StaticCast<  ::Entry >();
HXLINE( 120)		::Profile_obj::current = ::Profile_obj::currentParent->current;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Profile_obj,pop,(void))

void Profile_obj::dump(int inExitCode){
            	HX_STACKFRAME(&_hx_pos_71907eb2e7163919_126_dump)
HXDLIN( 126)		if ((inExitCode == 0)) {
HXLINE( 128)			if (::hx::IsNotNull( ::Profile_obj::current )) {
HXLINE( 129)				::Profile_obj::current->stop();
            			}
HXLINE( 130)			if (::hx::IsNotNull( ::Profile_obj::currentParent )) {
HXLINE( 131)				::Profile_obj::currentParent->stop();
            			}
HXLINE( 132)			{
HXLINE( 132)				int _g = 0;
HXDLIN( 132)				::Array< ::Dynamic> _g1 = ::Profile_obj::stack;
HXDLIN( 132)				while((_g < _g1->length)){
HXLINE( 132)					 ::Entry s = _g1->__get(_g).StaticCast<  ::Entry >();
HXDLIN( 132)					_g = (_g + 1);
HXLINE( 133)					s->stop();
            				}
            			}
HXLINE( 134)			::Profile_obj::root->dump(null());
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Profile_obj,dump,(void))

Float Profile_obj::now(){
            	HX_STACKFRAME(&_hx_pos_71907eb2e7163919_138_now)
HXDLIN( 138)		return  ::__time_stamp();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Profile_obj,now,return )


Profile_obj::Profile_obj()
{
}

bool Profile_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"t0") ) { outValue = ( t0 ); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"pop") ) { outValue = pop_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"now") ) { outValue = now_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { outValue = ( root ); return true; }
		if (HX_FIELD_EQ(inName,"push") ) { outValue = push_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"dump") ) { outValue = dump_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"valid") ) { outValue = ( valid ); return true; }
		if (HX_FIELD_EQ(inName,"stack") ) { outValue = ( stack ); return true; }
		if (HX_FIELD_EQ(inName,"start") ) { outValue = start_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"enable") ) { outValue = enable_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"current") ) { outValue = ( current ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"setEntry") ) { outValue = setEntry_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentParent") ) { outValue = ( currentParent ); return true; }
	}
	return false;
}

bool Profile_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"t0") ) { t0=ioValue.Cast< Float >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"root") ) { root=ioValue.Cast<  ::Entry >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"valid") ) { valid=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"stack") ) { stack=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"current") ) { current=ioValue.Cast<  ::Entry >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentParent") ) { currentParent=ioValue.Cast<  ::Entry >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Profile_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Profile_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &Profile_obj::valid,HX_("valid",fc,74,b8,31)},
	{::hx::fsFloat,(void *) &Profile_obj::t0,HX_("t0",3c,65,00,00)},
	{::hx::fsObject /*  ::Entry */ ,(void *) &Profile_obj::root,HX_("root",22,ee,ae,4b)},
	{::hx::fsObject /*  ::Entry */ ,(void *) &Profile_obj::current,HX_("current",39,9c,e3,cb)},
	{::hx::fsObject /*  ::Entry */ ,(void *) &Profile_obj::currentParent,HX_("currentParent",43,86,da,d0)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &Profile_obj::stack,HX_("stack",48,67,0b,84)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Profile_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Profile_obj::valid,"valid");
	HX_MARK_MEMBER_NAME(Profile_obj::t0,"t0");
	HX_MARK_MEMBER_NAME(Profile_obj::root,"root");
	HX_MARK_MEMBER_NAME(Profile_obj::current,"current");
	HX_MARK_MEMBER_NAME(Profile_obj::currentParent,"currentParent");
	HX_MARK_MEMBER_NAME(Profile_obj::stack,"stack");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Profile_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Profile_obj::valid,"valid");
	HX_VISIT_MEMBER_NAME(Profile_obj::t0,"t0");
	HX_VISIT_MEMBER_NAME(Profile_obj::root,"root");
	HX_VISIT_MEMBER_NAME(Profile_obj::current,"current");
	HX_VISIT_MEMBER_NAME(Profile_obj::currentParent,"currentParent");
	HX_VISIT_MEMBER_NAME(Profile_obj::stack,"stack");
};

#endif

::hx::Class Profile_obj::__mClass;

static ::String Profile_obj_sStaticFields[] = {
	HX_("valid",fc,74,b8,31),
	HX_("t0",3c,65,00,00),
	HX_("root",22,ee,ae,4b),
	HX_("current",39,9c,e3,cb),
	HX_("currentParent",43,86,da,d0),
	HX_("stack",48,67,0b,84),
	HX_("start",62,74,0b,84),
	HX_("enable",83,ae,87,f8),
	HX_("setEntry",70,e1,ba,7e),
	HX_("push",da,11,61,4a),
	HX_("pop",91,5d,55,00),
	HX_("dump",34,7d,72,42),
	HX_("now",16,d9,53,00),
	::String(null())
};

void Profile_obj::__register()
{
	Profile_obj _hx_dummy;
	Profile_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Profile",09,71,9a,c0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Profile_obj::__GetStatic;
	__mClass->mSetStaticField = &Profile_obj::__SetStatic;
	__mClass->mMarkFunc = Profile_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Profile_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Profile_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Profile_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Profile_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Profile_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Profile_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_71907eb2e7163919_74_boot)
HXDLIN(  74)		valid = false;
            	}
}

