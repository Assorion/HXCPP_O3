// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_CompileCache
#include <CompileCache.h>
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Log
#include <Log.h>
#endif
#ifndef INCLUDED_PathManager
#include <PathManager.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e152f523b5d295fd_10_init,"CompileCache","init",0xd78537ef,"CompileCache.init","CompileCache.hx",10,0x8557122f)
HX_LOCAL_STACK_FRAME(_hx_pos_e152f523b5d295fd_75_getPchDir,"CompileCache","getPchDir",0xf806812f,"CompileCache.getPchDir","CompileCache.hx",75,0x8557122f)
HX_LOCAL_STACK_FRAME(_hx_pos_e152f523b5d295fd_86_getCacheName,"CompileCache","getCacheName",0xba7b9216,"CompileCache.getCacheName","CompileCache.hx",86,0x8557122f)
HX_LOCAL_STACK_FRAME(_hx_pos_e152f523b5d295fd_98_clear,"CompileCache","clear",0x474eb7ce,"CompileCache.clear","CompileCache.hx",98,0x8557122f)
HX_LOCAL_STACK_FRAME(_hx_pos_e152f523b5d295fd_201_clear,"CompileCache","clear",0x474eb7ce,"CompileCache.clear","CompileCache.hx",201,0x8557122f)
HX_LOCAL_STACK_FRAME(_hx_pos_e152f523b5d295fd_244_list,"CompileCache","list",0xd97d193d,"CompileCache.list","CompileCache.hx",244,0x8557122f)
HX_LOCAL_STACK_FRAME(_hx_pos_e152f523b5d295fd_5_boot,"CompileCache","boot",0xd2e58111,"CompileCache.boot","CompileCache.hx",5,0x8557122f)

void CompileCache_obj::__construct() { }

Dynamic CompileCache_obj::__CreateEmpty() { return new CompileCache_obj; }

void *CompileCache_obj::_hx_vtable = 0;

Dynamic CompileCache_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CompileCache_obj > _hx_result = new CompileCache_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CompileCache_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5ecae2af;
}

bool CompileCache_obj::hasCache;

::String CompileCache_obj::compileCache;

bool CompileCache_obj::init( ::haxe::ds::StringMap inDefines){
            	HX_STACKFRAME(&_hx_pos_e152f523b5d295fd_10_init)
HXLINE(  11)		::CompileCache_obj::compileCache = HX_("",00,00,00,00);
HXLINE(  12)		::CompileCache_obj::hasCache = false;
HXLINE(  14)		if (inDefines->exists(HX_("HXCPP_COMPILE_CACHE",6a,ce,7b,87))) {
HXLINE(  16)			::CompileCache_obj::compileCache = inDefines->get_string(HX_("HXCPP_COMPILE_CACHE",6a,ce,7b,87));
HXLINE(  17)			::CompileCache_obj::compileCache = ::CompileCache_obj::compileCache.split(HX_("\\",5c,00,00,00))->join(HX_("/",2f,00,00,00));
HXLINE(  19)			while((::CompileCache_obj::compileCache.length > 1)){
HXLINE(  21)				int l = ::CompileCache_obj::compileCache.length;
HXLINE(  22)				::String last = ::CompileCache_obj::compileCache.substr((l - 1),null());
HXLINE(  23)				if ((last == HX_("/",2f,00,00,00))) {
HXLINE(  24)					::CompileCache_obj::compileCache = ::CompileCache_obj::compileCache.substr(0,(l - 1));
            				}
            				else {
HXLINE(  26)					goto _hx_goto_0;
            				}
            			}
            			_hx_goto_0:;
HXLINE(  29)			if (!(::sys::FileSystem_obj::exists(::CompileCache_obj::compileCache))) {
HXLINE(  31)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  32)					::PathManager_obj::mkdir(::CompileCache_obj::compileCache,null());
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g = _hx_e;
HXLINE(  34)						{
HXLINE(  34)							null();
            						}
HXLINE(  36)						::Log_obj::error(((HX_("Could not create compiler cache directory \"",e8,fb,25,1d) + ::CompileCache_obj::compileCache) + HX_("\"",22,00,00,00)),null(),null(),null());
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
HXLINE(  40)			bool _hx_tmp;
HXDLIN(  40)			if (::sys::FileSystem_obj::exists(::CompileCache_obj::compileCache)) {
HXLINE(  40)				_hx_tmp = ::sys::FileSystem_obj::isDirectory(::CompileCache_obj::compileCache);
            			}
            			else {
HXLINE(  40)				_hx_tmp = false;
            			}
HXDLIN(  40)			if (_hx_tmp) {
HXLINE(  42)				::CompileCache_obj::hasCache = true;
            			}
            			else {
HXLINE(  46)				::Log_obj::error(((HX_("Could not find compiler cache \"",3e,14,d0,de) + ::CompileCache_obj::compileCache) + HX_("\"",22,00,00,00)),null(),null(),null());
            			}
            		}
HXLINE(  52)		if (::CompileCache_obj::hasCache) {
HXLINE(  54)			::Log_obj::info(HX_("",00,00,00,00),((HX_("\x1b""[33;1mUsing compiler cache: ",3a,3b,aa,16) + ::CompileCache_obj::compileCache) + HX_("\x1b""[0m",1d,fa,1d,12)));
            		}
HXLINE(  57)		return ::CompileCache_obj::hasCache;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CompileCache_obj,init,return )

::String CompileCache_obj::getPchDir(::String inProject,::String hash){
            	HX_STACKFRAME(&_hx_pos_e152f523b5d295fd_75_getPchDir)
HXLINE(  76)		::String dir = (((::CompileCache_obj::compileCache + HX_("/",2f,00,00,00)) + inProject) + HX_("/pch",46,5a,66,1f));
HXDLIN(  76)		::String dir1 = (dir + hash.substr(0,8));
HXLINE(  77)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  79)			if (!(::sys::FileSystem_obj::exists(dir1))) {
HXLINE(  80)				::PathManager_obj::mkdir(dir1,null());
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(  81)				{
HXLINE(  81)					null();
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(  82)		return dir1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CompileCache_obj,getPchDir,return )

::String CompileCache_obj::getCacheName(::String inProject,::String hash,::String inExt){
            	HX_STACKFRAME(&_hx_pos_e152f523b5d295fd_86_getCacheName)
HXLINE(  87)		::String dir = (((::CompileCache_obj::compileCache + HX_("/",2f,00,00,00)) + inProject) + HX_("/",2f,00,00,00));
HXDLIN(  87)		::String dir1 = (dir + hash.substr(0,2));
HXLINE(  88)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  90)			if (!(::sys::FileSystem_obj::exists(dir1))) {
HXLINE(  91)				::PathManager_obj::mkdir(dir1,null());
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(  92)				{
HXLINE(  92)					null();
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(  93)		return (((dir1 + HX_("/",2f,00,00,00)) + hash.substr(2,null())) + inExt);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(CompileCache_obj,getCacheName,return )

void CompileCache_obj::clear(int inDays,int inMB,bool inLogInfo,::String inProject){
            	HX_STACKFRAME(&_hx_pos_e152f523b5d295fd_98_clear)
HXDLIN(  98)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 100)			::Array< ::String > projects = ::sys::FileSystem_obj::readDirectory(::CompileCache_obj::compileCache);
HXLINE( 101)			int deleted = 0;
HXLINE( 102)			int total = 0;
HXLINE( 103)			Float t0 =  ::__time_stamp();
HXLINE( 104)			Float tooOld = (::Date_obj::now()->getTime() - (( (Float)(((inDays * 24) * 3600)) ) * ((Float)1000.0)));
HXLINE( 105)			Float sizeKB = ( (Float)(0) );
HXLINE( 106)			::Array< ::Dynamic> fileInfo = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 108)			{
HXLINE( 108)				int _g = 0;
HXDLIN( 108)				while((_g < projects->length)){
HXLINE( 108)					::String project = projects->__get(_g);
HXDLIN( 108)					_g = (_g + 1);
HXLINE( 110)					bool _hx_tmp;
HXDLIN( 110)					if (::hx::IsNotNull( inProject )) {
HXLINE( 110)						_hx_tmp = (inProject != project);
            					}
            					else {
HXLINE( 110)						_hx_tmp = false;
            					}
HXDLIN( 110)					if (_hx_tmp) {
HXLINE( 111)						continue;
            					}
HXLINE( 112)					bool projectHasDirs = false;
HXLINE( 113)					::String projDir = ((::CompileCache_obj::compileCache + HX_("/",2f,00,00,00)) + project);
HXLINE( 114)					if (!(::sys::FileSystem_obj::isDirectory(projDir))) {
HXLINE( 115)						continue;
            					}
HXLINE( 116)					::Array< ::String > dirs = ::sys::FileSystem_obj::readDirectory(projDir);
HXLINE( 117)					{
HXLINE( 117)						int _g1 = 0;
HXDLIN( 117)						while((_g1 < dirs->length)){
HXLINE( 117)							::String dir = dirs->__get(_g1);
HXDLIN( 117)							_g1 = (_g1 + 1);
HXLINE( 119)							::String path = ((projDir + HX_("/",2f,00,00,00)) + dir);
HXLINE( 120)							if (!(::sys::FileSystem_obj::isDirectory(path))) {
HXLINE( 121)								::sys::FileSystem_obj::deleteFile(path);
HXLINE( 122)								continue;
            							}
HXLINE( 124)							bool _hx_tmp1;
HXDLIN( 124)							bool _hx_tmp2;
HXDLIN( 124)							if ((dir.length != 2)) {
HXLINE( 124)								_hx_tmp2 = (dir != HX_("lib",45,4f,52,00));
            							}
            							else {
HXLINE( 124)								_hx_tmp2 = false;
            							}
HXDLIN( 124)							if (_hx_tmp2) {
HXLINE( 124)								_hx_tmp1 = (dir.substr(0,3) != HX_("pch",15,53,55,00));
            							}
            							else {
HXLINE( 124)								_hx_tmp1 = false;
            							}
HXDLIN( 124)							if (_hx_tmp1) {
HXLINE( 126)								::Log_obj::warn(((HX_("bad cache name \"",66,68,c7,a8) + dir) + HX_("\" found - try manually clearing",2e,2e,72,e3)),null(),null());
HXLINE( 127)								continue;
            							}
HXLINE( 129)							::Array< ::String > dirFiles = ::sys::FileSystem_obj::readDirectory(path);
HXLINE( 130)							bool allDeleted = true;
HXLINE( 131)							{
HXLINE( 131)								int _g2 = 0;
HXDLIN( 131)								while((_g2 < dirFiles->length)){
HXLINE( 131)									::String file = dirFiles->__get(_g2);
HXDLIN( 131)									_g2 = (_g2 + 1);
HXLINE( 133)									total = (total + 1);
HXLINE( 134)									::String filename = ((path + HX_("/",2f,00,00,00)) + file);
HXLINE( 135)									bool doDelete = true;
HXLINE( 136)									if ((inDays > 0)) {
HXLINE( 138)										 ::Dynamic info = ::sys::FileSystem_obj::stat(filename);
HXLINE( 139)										 ::Date atime = ( ( ::Date)(info->__Field(HX_("atime",ee,10,db,26),::hx::paccDynamic)) );
HXLINE( 140)										Float time;
HXDLIN( 140)										if (::hx::IsNull( atime )) {
HXLINE( 140)											time = ( ( ::Date)(info->__Field(HX_("mtime",fa,06,aa,0f),::hx::paccDynamic)) )->getTime();
            										}
            										else {
HXLINE( 141)											Float time1 = ( ( ::Date)(info->__Field(HX_("atime",ee,10,db,26),::hx::paccDynamic)) )->getTime();
HXLINE( 140)											time = ::Math_obj::max(time1,( ( ::Date)(info->__Field(HX_("mtime",fa,06,aa,0f),::hx::paccDynamic)) )->getTime());
            										}
HXLINE( 142)										if ((time >= tooOld)) {
HXLINE( 143)											doDelete = false;
            										}
            									}
            									else {
HXLINE( 145)										if ((inMB > 0)) {
HXLINE( 147)											 ::Dynamic info1 = ::sys::FileSystem_obj::stat(filename);
HXLINE( 148)											 ::Date atime1 = ( ( ::Date)(info1->__Field(HX_("atime",ee,10,db,26),::hx::paccDynamic)) );
HXLINE( 149)											Float time2;
HXDLIN( 149)											if (::hx::IsNull( atime1 )) {
HXLINE( 149)												time2 = ( ( ::Date)(info1->__Field(HX_("mtime",fa,06,aa,0f),::hx::paccDynamic)) )->getTime();
            											}
            											else {
HXLINE( 150)												Float time3 = ( ( ::Date)(info1->__Field(HX_("atime",ee,10,db,26),::hx::paccDynamic)) )->getTime();
HXLINE( 149)												time2 = ::Math_obj::max(time3,( ( ::Date)(info1->__Field(HX_("mtime",fa,06,aa,0f),::hx::paccDynamic)) )->getTime());
            											}
HXLINE( 151)											fileInfo->push( ::Dynamic(::hx::Anon_obj::Create(3)
            												->setFixed(0,HX_("size",c1,a0,53,4c), ::Dynamic(info1->__Field(HX_("size",c1,a0,53,4c),::hx::paccDynamic)))
            												->setFixed(1,HX_("time",0d,cc,fc,4c),time2)
            												->setFixed(2,HX_("filename",c7,2e,6a,77),filename)));
HXLINE( 152)											sizeKB = (sizeKB + (( (Float)(info1->__Field(HX_("size",c1,a0,53,4c),::hx::paccDynamic)) ) / ( (Float)(1024) )));
HXLINE( 153)											doDelete = false;
            										}
            									}
HXLINE( 156)									if (doDelete) {
HXLINE( 158)										try {
            											HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 160)											::sys::FileSystem_obj::deleteFile(filename);
HXLINE( 161)											deleted = (deleted + 1);
            										} catch( ::Dynamic _hx_e) {
            											if (_hx_e.IsClass<  ::Dynamic >() ){
            												HX_STACK_BEGIN_CATCH
            												 ::Dynamic _g3 = _hx_e;
HXLINE( 163)												{
HXLINE( 163)													null();
            												}
HXLINE( 165)												::Log_obj::warn((HX_("Could not delete ",c9,01,4d,e1) + filename),null(),null());
            											}
            											else {
            												HX_STACK_DO_THROW(_hx_e);
            											}
            										}
            									}
            									else {
HXLINE( 169)										allDeleted = false;
            									}
            								}
            							}
HXLINE( 171)							if (allDeleted) {
HXLINE( 173)								try {
            									HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 175)									::sys::FileSystem_obj::deleteDirectory(path);
            								} catch( ::Dynamic _hx_e) {
            									if (_hx_e.IsClass<  ::Dynamic >() ){
            										HX_STACK_BEGIN_CATCH
            										 ::Dynamic _g4 = _hx_e;
HXLINE( 177)										{
HXLINE( 177)											null();
            										}
HXLINE( 179)										::Log_obj::warn((HX_("Could not delete directory ",1c,a4,a9,9c) + path),null(),null());
            									}
            									else {
            										HX_STACK_DO_THROW(_hx_e);
            									}
            								}
            							}
            							else {
HXLINE( 183)								projectHasDirs = true;
            							}
            						}
            					}
HXLINE( 185)					if (!(projectHasDirs)) {
HXLINE( 187)						try {
            							HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 189)							::sys::FileSystem_obj::deleteDirectory(projDir);
            						} catch( ::Dynamic _hx_e) {
            							if (_hx_e.IsClass<  ::Dynamic >() ){
            								HX_STACK_BEGIN_CATCH
            								 ::Dynamic _g5 = _hx_e;
HXLINE( 191)								{
HXLINE( 191)									null();
            								}
HXLINE( 193)								::Log_obj::warn((HX_("Could not delete directory ",1c,a4,a9,9c) + projDir),null(),null());
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
            					}
            				}
            			}
HXLINE( 198)			if (((inMB * 1024) < sizeKB)) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            				int _hx_run( ::Dynamic a, ::Dynamic b){
            					HX_STACKFRAME(&_hx_pos_e152f523b5d295fd_201_clear)
HXLINE( 201)					if (::hx::IsGreater( a->__Field(HX_("time",0d,cc,fc,4c),::hx::paccDynamic),b->__Field(HX_("time",0d,cc,fc,4c),::hx::paccDynamic) )) {
HXLINE( 201)						return -1;
            					}
            					else {
HXLINE( 201)						return 1;
            					}
HXDLIN( 201)					return 0;
            				}
            				HX_END_LOCAL_FUNC2(return)

HXLINE( 201)				fileInfo->sort( ::Dynamic(new _hx_Closure_0()));
HXLINE( 202)				Float keepKB = ( (Float)((inMB * 1024)) );
HXLINE( 203)				{
HXLINE( 203)					int _g6 = 0;
HXDLIN( 203)					while((_g6 < fileInfo->length)){
HXLINE( 203)						 ::Dynamic info2 = fileInfo->__get(_g6);
HXDLIN( 203)						_g6 = (_g6 + 1);
HXLINE( 205)						if ((keepKB > 0)) {
HXLINE( 207)							sizeKB = (sizeKB - (( (Float)(info2->__Field(HX_("size",c1,a0,53,4c),::hx::paccDynamic)) ) / ( (Float)(1024) )));
HXLINE( 208)							keepKB = (keepKB - (( (Float)(info2->__Field(HX_("size",c1,a0,53,4c),::hx::paccDynamic)) ) / ( (Float)(1024) )));
            						}
            						else {
HXLINE( 212)							try {
            								HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 214)								::sys::FileSystem_obj::deleteFile(( (::String)(info2->__Field(HX_("filename",c7,2e,6a,77),::hx::paccDynamic)) ));
HXLINE( 215)								deleted = (deleted + 1);
            							} catch( ::Dynamic _hx_e) {
            								if (_hx_e.IsClass<  ::Dynamic >() ){
            									HX_STACK_BEGIN_CATCH
            									 ::Dynamic _g7 = _hx_e;
HXLINE( 217)									{
HXLINE( 217)										null();
            									}
HXLINE( 219)									::Log_obj::warn(( (::String)((HX_("Could not delete ",c9,01,4d,e1) + info2->__Field(HX_("filename",c7,2e,6a,77),::hx::paccDynamic))) ),null(),null());
            								}
            								else {
            									HX_STACK_DO_THROW(_hx_e);
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 225)			Float t = ( ::__time_stamp() - t0);
HXLINE( 226)			::String projString;
HXDLIN( 226)			if (::hx::IsNull( inProject )) {
HXLINE( 226)				projString = HX_("",00,00,00,00);
            			}
            			else {
HXLINE( 226)				projString = (HX_(" from project ",7d,54,b3,bd) + inProject);
            			}
HXLINE( 227)			::String message;
HXDLIN( 227)			if ((inMB > 0)) {
HXLINE( 227)				message = ((((((((HX_("Cache: removed ",c8,9d,a4,e4) + deleted) + HX_("/",2f,00,00,00)) + total) + HX_(" files",57,6a,04,cc)) + projString) + HX_(", leaving ",20,66,db,f3)) + ::Std_obj::_hx_int((sizeKB / ( (Float)(1024) )))) + ((HX_("MB, in ",32,ef,9a,50) + t) + HX_(" seconds",5f,fa,db,80)));
            			}
            			else {
HXLINE( 227)				message = ((((((((HX_("Cache: removed ",c8,9d,a4,e4) + deleted) + HX_("/",2f,00,00,00)) + total) + HX_(" files",57,6a,04,cc)) + projString) + HX_(" in ",7b,e0,76,15)) + t) + HX_(" seconds",5f,fa,db,80));
            			}
HXLINE( 230)			if (inLogInfo) {
HXLINE( 231)				::Log_obj::info(message,null());
            			}
            			else {
HXLINE( 233)				::Log_obj::info(HX_("",00,00,00,00),message);
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g8 = _hx_e;
HXLINE( 235)				{
HXLINE( 235)					null();
            				}
HXDLIN( 235)				 ::Dynamic error = _g8;
HXLINE( 237)				::Log_obj::warn((HX_("Error cleaning cache: ",b9,a4,09,e2) + ::Std_obj::string(error)),null(),null());
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(CompileCache_obj,clear,(void))

void CompileCache_obj::list(bool inDetails,::String inProject){
            	HX_STACKFRAME(&_hx_pos_e152f523b5d295fd_244_list)
HXDLIN( 244)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 246)			::Sys_obj::println((HX_("Cache Directory: ",35,5b,12,75) + ::CompileCache_obj::compileCache));
HXLINE( 247)			Float t0 =  ::__time_stamp();
HXLINE( 248)			::Array< ::String > files = ::Array_obj< ::String >::__new();
HXLINE( 249)			::Array< ::String > projects = ::sys::FileSystem_obj::readDirectory(::CompileCache_obj::compileCache);
HXLINE( 250)			Float size = ((Float)0.0);
HXLINE( 251)			int count = 0;
HXLINE( 253)			{
HXLINE( 253)				int _g = 0;
HXDLIN( 253)				while((_g < projects->length)){
HXLINE( 253)					::String project = projects->__get(_g);
HXDLIN( 253)					_g = (_g + 1);
HXLINE( 255)					bool _hx_tmp;
HXDLIN( 255)					if (::hx::IsNotNull( inProject )) {
HXLINE( 255)						_hx_tmp = (inProject != project);
            					}
            					else {
HXLINE( 255)						_hx_tmp = false;
            					}
HXDLIN( 255)					if (_hx_tmp) {
HXLINE( 256)						continue;
            					}
HXLINE( 257)					Float projSize = size;
HXLINE( 258)					int projCount = count;
HXLINE( 259)					::String projDir = ((::CompileCache_obj::compileCache + HX_("/",2f,00,00,00)) + project);
HXLINE( 260)					if (!(::sys::FileSystem_obj::isDirectory(projDir))) {
HXLINE( 261)						continue;
            					}
HXLINE( 262)					::Array< ::String > dirs = ::sys::FileSystem_obj::readDirectory(projDir);
HXLINE( 263)					{
HXLINE( 263)						int _g1 = 0;
HXDLIN( 263)						while((_g1 < dirs->length)){
HXLINE( 263)							::String dir = dirs->__get(_g1);
HXDLIN( 263)							_g1 = (_g1 + 1);
HXLINE( 265)							::String path = ((projDir + HX_("/",2f,00,00,00)) + dir);
HXLINE( 266)							if (!(::sys::FileSystem_obj::isDirectory(path))) {
HXLINE( 267)								continue;
            							}
HXLINE( 268)							::Array< ::String > dirFiles = ::sys::FileSystem_obj::readDirectory(path);
HXLINE( 269)							{
HXLINE( 269)								int _g2 = 0;
HXDLIN( 269)								while((_g2 < dirFiles->length)){
HXLINE( 269)									::String file = dirFiles->__get(_g2);
HXDLIN( 269)									_g2 = (_g2 + 1);
HXLINE( 271)									::String filename = ((path + HX_("/",2f,00,00,00)) + file);
HXLINE( 272)									 ::Dynamic info = ::sys::FileSystem_obj::stat(filename);
HXLINE( 273)									if (inDetails) {
HXLINE( 275)										 ::Date atime = ( ( ::Date)(info->__Field(HX_("atime",ee,10,db,26),::hx::paccDynamic)) );
HXLINE( 276)										bool _hx_tmp1;
HXDLIN( 276)										if (::hx::IsNotNull( atime )) {
HXLINE( 276)											Float _hx_tmp2 = atime->getTime();
HXDLIN( 276)											_hx_tmp1 = (_hx_tmp2 < ( ( ::Date)(info->__Field(HX_("mtime",fa,06,aa,0f),::hx::paccDynamic)) )->getTime());
            										}
            										else {
HXLINE( 276)											_hx_tmp1 = true;
            										}
HXDLIN( 276)										if (_hx_tmp1) {
HXLINE( 277)											atime = ( ( ::Date)(info->__Field(HX_("mtime",fa,06,aa,0f),::hx::paccDynamic)) );
            										}
HXLINE( 278)										::String _hx_tmp3 = ( (::String)(((((HX_("",00,00,00,00) + filename) + HX_(" : ",c6,7a,18,00)) + info->__Field(HX_("size",c1,a0,53,4c),::hx::paccDynamic)) + HX_(" bytes, ",7f,a3,49,80))) );
HXDLIN( 278)										::Sys_obj::println((_hx_tmp3 + ::Std_obj::string(atime)));
            									}
HXLINE( 280)									count = (count + 1);
HXLINE( 281)									size = ( (Float)((size + info->__Field(HX_("size",c1,a0,53,4c),::hx::paccDynamic))) );
            								}
            							}
            						}
            					}
HXLINE( 285)					projSize = ( (Float)(::Std_obj::_hx_int(((size - projSize) / ( (Float)(1024) )))) );
HXLINE( 286)					projCount = (count - projCount);
HXLINE( 287)					::Sys_obj::println(((((((HX_("Project ",47,27,77,11) + project) + HX_("\t: ",ef,06,07,00)) + projSize) + HX_("k in ",66,f2,56,b1)) + projCount) + HX_(" files",57,6a,04,cc)));
            				}
            			}
HXLINE( 290)			int k = ::Std_obj::_hx_int((size / ( (Float)(1024) )));
HXLINE( 291)			Float t = ( ::__time_stamp() - t0);
HXLINE( 292)			::String projString;
HXDLIN( 292)			if (::hx::IsNull( inProject )) {
HXLINE( 292)				projString = HX_("",00,00,00,00);
            			}
            			else {
HXLINE( 292)				projString = (HX_(" in project ",a2,be,19,49) + inProject);
            			}
HXLINE( 293)			::Sys_obj::println(((((((((HX_("Found: ",48,f1,5e,67) + k) + HX_("k in ",66,f2,56,b1)) + count) + HX_(" files",57,6a,04,cc)) + projString) + HX_(" in ",7b,e0,76,15)) + t) + HX_(" seconds",5f,fa,db,80)));
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g3 = _hx_e;
HXLINE( 295)				{
HXLINE( 295)					null();
            				}
HXDLIN( 295)				 ::Dynamic error = _g3;
HXLINE( 297)				::Log_obj::warn((HX_("Error accessing cache: ",8e,4a,c9,9c) + ::Std_obj::string(error)),null(),null());
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CompileCache_obj,list,(void))


CompileCache_obj::CompileCache_obj()
{
}

bool CompileCache_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"list") ) { outValue = list_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { outValue = clear_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"hasCache") ) { outValue = ( hasCache ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getPchDir") ) { outValue = getPchDir_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"compileCache") ) { outValue = ( compileCache ); return true; }
		if (HX_FIELD_EQ(inName,"getCacheName") ) { outValue = getCacheName_dyn(); return true; }
	}
	return false;
}

bool CompileCache_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"hasCache") ) { hasCache=ioValue.Cast< bool >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"compileCache") ) { compileCache=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *CompileCache_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo CompileCache_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &CompileCache_obj::hasCache,HX_("hasCache",88,e4,6c,cd)},
	{::hx::fsString,(void *) &CompileCache_obj::compileCache,HX_("compileCache",cf,43,d7,ad)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void CompileCache_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CompileCache_obj::hasCache,"hasCache");
	HX_MARK_MEMBER_NAME(CompileCache_obj::compileCache,"compileCache");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CompileCache_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CompileCache_obj::hasCache,"hasCache");
	HX_VISIT_MEMBER_NAME(CompileCache_obj::compileCache,"compileCache");
};

#endif

::hx::Class CompileCache_obj::__mClass;

static ::String CompileCache_obj_sStaticFields[] = {
	HX_("hasCache",88,e4,6c,cd),
	HX_("compileCache",cf,43,d7,ad),
	HX_("init",10,3b,bb,45),
	HX_("getPchDir",6e,86,ec,89),
	HX_("getCacheName",37,1e,0b,54),
	HX_("clear",8d,71,5b,48),
	HX_("list",5e,1c,b3,47),
	::String(null())
};

void CompileCache_obj::__register()
{
	CompileCache_obj _hx_dummy;
	CompileCache_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("CompileCache",ef,8f,e9,75);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CompileCache_obj::__GetStatic;
	__mClass->mSetStaticField = &CompileCache_obj::__SetStatic;
	__mClass->mMarkFunc = CompileCache_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CompileCache_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< CompileCache_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CompileCache_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CompileCache_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CompileCache_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CompileCache_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e152f523b5d295fd_5_boot)
HXDLIN(   5)		hasCache = false;
            	}
}

