// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_BuildTool
#include <BuildTool.h>
#endif
#ifndef INCLUDED_CompileCache
#include <CompileCache.h>
#endif
#ifndef INCLUDED_Compiler
#include <Compiler.h>
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_File
#include <File.h>
#endif
#ifndef INCLUDED_FileGroup
#include <FileGroup.h>
#endif
#ifndef INCLUDED_Log
#include <Log.h>
#endif
#ifndef INCLUDED_PathManager
#include <PathManager.h>
#endif
#ifndef INCLUDED_ProcessManager
#include <ProcessManager.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_Tools
#include <Tools.h>
#endif
#ifndef INCLUDED__Compiler_FlagInfo
#include <_Compiler/FlagInfo.h>
#endif
#ifndef INCLUDED_haxe_crypto_Md5
#include <haxe/crypto/Md5.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Encoding
#include <haxe/io/Encoding.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_sys_io_FileOutput
#include <sys/io/FileOutput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9b639c4816dab056_29_new,"Compiler","new",0x64114831,"Compiler.new","Compiler.hx",29,0xa12a885f)
HX_LOCAL_STACK_FRAME(_hx_pos_9b639c4816dab056_92_getFlagStrings,"Compiler","getFlagStrings",0xcb51730f,"Compiler.getFlagStrings","Compiler.hx",92,0xa12a885f)
HX_LOCAL_STACK_FRAME(_hx_pos_9b639c4816dab056_101_addFlag,"Compiler","addFlag",0x0bff82be,"Compiler.addFlag","Compiler.hx",101,0xa12a885f)
HX_LOCAL_STACK_FRAME(_hx_pos_9b639c4816dab056_106_objToAbsolute,"Compiler","objToAbsolute",0xdda7f8fa,"Compiler.objToAbsolute","Compiler.hx",106,0xa12a885f)
HX_LOCAL_STACK_FRAME(_hx_pos_9b639c4816dab056_113_getTargetPrefix,"Compiler","getTargetPrefix",0x85dfd6ca,"Compiler.getTargetPrefix","Compiler.hx",113,0xa12a885f)
HX_LOCAL_STACK_FRAME(_hx_pos_9b639c4816dab056_129_addIdentity,"Compiler","addIdentity",0x422ead50,"Compiler.addIdentity","Compiler.hx",129,0xa12a885f)
HX_LOCAL_STACK_FRAME(_hx_pos_9b639c4816dab056_149_addOptimTags,"Compiler","addOptimTags",0xa0e9eafe,"Compiler.addOptimTags","Compiler.hx",149,0xa12a885f)
HX_LOCAL_STACK_FRAME(_hx_pos_9b639c4816dab056_163_getCompilerDefines,"Compiler","getCompilerDefines",0xa4f61d52,"Compiler.getCompilerDefines","Compiler.hx",163,0xa12a885f)
HX_LOCAL_STACK_FRAME(_hx_pos_9b639c4816dab056_173_getArgs,"Compiler","getArgs",0x9efb7164,"Compiler.getArgs","Compiler.hx",173,0xa12a885f)
HX_LOCAL_STACK_FRAME(_hx_pos_9b639c4816dab056_230_createEmbedFile,"Compiler","createEmbedFile",0x3c520faa,"Compiler.createEmbedFile","Compiler.hx",230,0xa12a885f)
HX_LOCAL_STACK_FRAME(_hx_pos_9b639c4816dab056_283_cleanTmp,"Compiler","cleanTmp",0x2619195d,"Compiler.cleanTmp","Compiler.hx",283,0xa12a885f)
HX_LOCAL_STACK_FRAME(_hx_pos_9b639c4816dab056_296_compile,"Compiler","compile",0x0f7359c4,"Compiler.compile","Compiler.hx",296,0xa12a885f)
HX_LOCAL_STACK_FRAME(_hx_pos_9b639c4816dab056_435_createCompilerVersion,"Compiler","createCompilerVersion",0xd004cdae,"Compiler.createCompilerVersion","Compiler.hx",435,0xa12a885f)
static const ::String _hx_array_data_57835bbf_19[] = {
	HX_("--version",b8,6b,3f,9f),
};
HX_LOCAL_STACK_FRAME(_hx_pos_9b639c4816dab056_466_getObjName,"Compiler","getObjName",0x259a103b,"Compiler.getObjName","Compiler.hx",466,0xa12a885f)
HX_LOCAL_STACK_FRAME(_hx_pos_9b639c4816dab056_476_getHashedName,"Compiler","getHashedName",0x13f133df,"Compiler.getHashedName","Compiler.hx",476,0xa12a885f)
HX_LOCAL_STACK_FRAME(_hx_pos_9b639c4816dab056_491_getCacheString,"Compiler","getCacheString",0xcc100f8c,"Compiler.getCacheString","Compiler.hx",491,0xa12a885f)
HX_LOCAL_STACK_FRAME(_hx_pos_9b639c4816dab056_498_getCachedObjName,"Compiler","getCachedObjName",0xde214139,"Compiler.getCachedObjName","Compiler.hx",498,0xa12a885f)
HX_LOCAL_STACK_FRAME(_hx_pos_9b639c4816dab056_509_needsPchObj,"Compiler","needsPchObj",0x15e0aff0,"Compiler.needsPchObj","Compiler.hx",509,0xa12a885f)
HX_LOCAL_STACK_FRAME(_hx_pos_9b639c4816dab056_522_getPchCompileFlags,"Compiler","getPchCompileFlags",0x11c8dae2,"Compiler.getPchCompileFlags","Compiler.hx",522,0xa12a885f)
HX_LOCAL_STACK_FRAME(_hx_pos_9b639c4816dab056_533_getPchDir,"Compiler","getPchDir",0x46a330ff,"Compiler.getPchDir","Compiler.hx",533,0xa12a885f)
HX_LOCAL_STACK_FRAME(_hx_pos_9b639c4816dab056_544_precompile,"Compiler","precompile",0x8789f3ff,"Compiler.precompile","Compiler.hx",544,0xa12a885f)
HX_LOCAL_STACK_FRAME(_hx_pos_9b639c4816dab056_625_setPCH,"Compiler","setPCH",0x72594562,"Compiler.setPCH","Compiler.hx",625,0xa12a885f)
HX_LOCAL_STACK_FRAME(_hx_pos_9b639c4816dab056_636_initPrecompile,"Compiler","initPrecompile",0x5dd67aaf,"Compiler.initPrecompile","Compiler.hx",636,0xa12a885f)

void Compiler_obj::__construct(::String inID,::String inExe){
            	HX_STACKFRAME(&_hx_pos_9b639c4816dab056_29_new)
HXLINE(  63)		this->useCacheInPlace = true;
HXLINE(  68)		this->mFlags = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  69)		this->mCFlags = ::Array_obj< ::String >::__new(0);
HXLINE(  70)		this->mNvccFlags = ::Array_obj< ::String >::__new(0);
HXLINE(  71)		this->mCPPFlags = ::Array_obj< ::String >::__new(0);
HXLINE(  72)		this->mOBJCFlags = ::Array_obj< ::String >::__new(0);
HXLINE(  73)		this->mMMFlags = ::Array_obj< ::String >::__new(0);
HXLINE(  74)		this->mPCHFlags = ::Array_obj< ::String >::__new(0);
HXLINE(  75)		this->mAddGCCIdentity = false;
HXLINE(  76)		this->mCompilerVersion = null();
HXLINE(  77)		this->mRcExt = HX_(".res",f2,a9,be,1e);
HXLINE(  78)		this->mObjDir = HX_("obj",f7,8f,54,00);
HXLINE(  79)		this->mOutFlag = HX_("-o",a2,27,00,00);
HXLINE(  80)		this->mExe = inExe;
HXLINE(  81)		this->mID = inID;
HXLINE(  82)		this->mExt = HX_(".o",81,28,00,00);
HXLINE(  83)		this->mPCHExt = HX_(".pch",a7,23,bd,1e);
HXLINE(  84)		this->mPCHCreate = HX_("-Yc",57,73,22,00);
HXLINE(  85)		this->mPCHUse = HX_("-Yu",69,73,22,00);
HXLINE(  86)		this->mPCHFilename = HX_("/Fp",59,e7,23,00);
HXLINE(  87)		this->mCached = false;
HXLINE(  88)		this->mRcFlags = ::Array_obj< ::String >::__new(0);
            	}

Dynamic Compiler_obj::__CreateEmpty() { return new Compiler_obj; }

void *Compiler_obj::_hx_vtable = 0;

Dynamic Compiler_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Compiler_obj > _hx_result = new Compiler_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Compiler_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x09f633e3;
}

::Array< ::String > Compiler_obj::getFlagStrings(){
            	HX_STACKFRAME(&_hx_pos_9b639c4816dab056_92_getFlagStrings)
HXLINE(  93)		::Array< ::String > result = ::Array_obj< ::String >::__new();
HXLINE(  94)		{
HXLINE(  94)			int _g = 0;
HXDLIN(  94)			::Array< ::Dynamic> _g1 = this->mFlags;
HXDLIN(  94)			while((_g < _g1->length)){
HXLINE(  94)				 ::_Compiler::FlagInfo f = _g1->__get(_g).StaticCast<  ::_Compiler::FlagInfo >();
HXDLIN(  94)				_g = (_g + 1);
HXLINE(  95)				result->push(f->toString());
            			}
            		}
HXLINE(  96)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Compiler_obj,getFlagStrings,return )

void Compiler_obj::addFlag(::String inFlag,::String inTag){
            	HX_GC_STACKFRAME(&_hx_pos_9b639c4816dab056_101_addFlag)
HXDLIN( 101)		::Array< ::Dynamic> _hx_tmp = this->mFlags;
HXDLIN( 101)		_hx_tmp->push( ::_Compiler::FlagInfo_obj::__alloc( HX_CTX ,inFlag,inTag));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Compiler_obj,addFlag,(void))

void Compiler_obj::objToAbsolute(){
            	HX_STACKFRAME(&_hx_pos_9b639c4816dab056_106_objToAbsolute)
HXLINE( 107)		if (::hx::IsNull( this->mRelObjDir )) {
HXLINE( 108)			this->mRelObjDir = this->mObjDir;
            		}
HXLINE( 109)		::String _hx_tmp = ::Sys_obj::getCwd();
HXDLIN( 109)		this->mObjDir = ::haxe::io::Path_obj::normalize(::PathManager_obj::combine(_hx_tmp,this->mRelObjDir));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Compiler_obj,objToAbsolute,(void))

::String Compiler_obj::getTargetPrefix(){
            	HX_STACKFRAME(&_hx_pos_9b639c4816dab056_113_getTargetPrefix)
HXLINE( 114)		::String dir;
HXDLIN( 114)		if (::hx::IsNotNull( this->mRelObjDir )) {
HXLINE( 114)			dir = this->mRelObjDir;
            		}
            		else {
HXLINE( 114)			dir = this->mObjDir;
            		}
HXLINE( 115)		dir = dir.split(HX_("\\",5c,00,00,00))->join(HX_("/",2f,00,00,00));
HXLINE( 116)		::Array< ::String > parts = dir.split(HX_("/",2f,00,00,00));
HXLINE( 118)		::String prefix = ( (::String)(parts->pop()) );
HXLINE( 119)		if ((prefix == HX_("",00,00,00,00))) {
HXLINE( 120)			prefix = ( (::String)(parts->pop()) );
            		}
HXLINE( 121)		if (::hx::IsNull( prefix )) {
HXLINE( 122)			prefix = HX_("",00,00,00,00);
            		}
HXLINE( 123)		prefix = prefix.split(HX_("-",2d,00,00,00))->join(HX_("_",5f,00,00,00));
HXLINE( 124)		return prefix;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Compiler_obj,getTargetPrefix,return )

void Compiler_obj::addIdentity(::String ext,::Array< ::String > ioArgs){
            	HX_STACKFRAME(&_hx_pos_9b639c4816dab056_129_addIdentity)
HXDLIN( 129)		if (this->mAddGCCIdentity) {
HXLINE( 131)			::String identity;
HXDLIN( 131)			::String _hx_switch_0 = ext;
            			if (  (_hx_switch_0==HX_("c",63,00,00,00)) ){
HXLINE( 131)				identity = HX_("c",63,00,00,00);
HXDLIN( 131)				goto _hx_goto_6;
            			}
            			if (  (_hx_switch_0==HX_("c++",c3,44,4b,00)) ){
HXLINE( 131)				identity = HX_("c++",c3,44,4b,00);
HXDLIN( 131)				goto _hx_goto_6;
            			}
            			if (  (_hx_switch_0==HX_("cpp",23,81,4b,00)) ){
HXLINE( 131)				identity = HX_("c++",c3,44,4b,00);
HXDLIN( 131)				goto _hx_goto_6;
            			}
            			if (  (_hx_switch_0==HX_("m",6d,00,00,00)) ){
HXLINE( 131)				identity = HX_("objective-c",4f,8e,60,9f);
HXDLIN( 131)				goto _hx_goto_6;
            			}
            			if (  (_hx_switch_0==HX_("mm",60,5f,00,00)) ){
HXLINE( 131)				identity = HX_("objective-c++",af,25,5c,a3);
HXDLIN( 131)				goto _hx_goto_6;
            			}
            			/* default */{
HXLINE( 131)				identity = HX_("",00,00,00,00);
            			}
            			_hx_goto_6:;
HXLINE( 140)			if ((identity != HX_("",00,00,00,00))) {
HXLINE( 142)				ioArgs->push(HX_("-x",ab,27,00,00));
HXLINE( 143)				ioArgs->push(identity);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Compiler_obj,addIdentity,(void))

void Compiler_obj::addOptimTags(::Array< ::String > tagFilter){
            	HX_STACKFRAME(&_hx_pos_9b639c4816dab056_149_addOptimTags)
HXLINE( 150)		int optimFlags;
HXDLIN( 150)		if ((tagFilter->indexOf(HX_("debug",53,52,1f,d7),null()) >= 0)) {
HXLINE( 150)			optimFlags = 1;
            		}
            		else {
HXLINE( 150)			optimFlags = 0;
            		}
HXLINE( 151)		int optimFlags1;
HXDLIN( 151)		if ((tagFilter->indexOf(HX_("release",c7,85,ed,58),null()) >= 0)) {
HXLINE( 151)			optimFlags1 = 1;
            		}
            		else {
HXLINE( 151)			optimFlags1 = 0;
            		}
HXLINE( 152)		int optimFlags2;
HXDLIN( 152)		if ((tagFilter->indexOf(HX_("optim-std",ed,a4,b4,30),null()) >= 0)) {
HXLINE( 152)			optimFlags2 = 1;
            		}
            		else {
HXLINE( 152)			optimFlags2 = 0;
            		}
HXLINE( 153)		int optimFlags3;
HXDLIN( 153)		if ((tagFilter->indexOf(HX_("optim-none",2e,d7,09,6a),null()) >= 0)) {
HXLINE( 153)			optimFlags3 = 1;
            		}
            		else {
HXLINE( 153)			optimFlags3 = 0;
            		}
HXLINE( 154)		int optimFlags4;
HXDLIN( 154)		if ((tagFilter->indexOf(HX_("optim-size",37,65,53,6d),null()) >= 0)) {
HXLINE( 154)			optimFlags4 = 1;
            		}
            		else {
HXLINE( 154)			optimFlags4 = 0;
            		}
HXLINE( 150)		int optimFlags5 = ((((optimFlags + optimFlags1) + optimFlags2) + optimFlags3) + optimFlags4);
HXLINE( 155)		if ((optimFlags5 == 0)) {
HXLINE( 156)			tagFilter->push(HX_("optim-std",ed,a4,b4,30));
            		}
            		else {
HXLINE( 157)			if ((optimFlags5 > 1)) {
HXLINE( 158)				::Log_obj::error((HX_("More than one optimization tag has been set:",3b,b8,4a,f5) + ::Std_obj::string(tagFilter)),null(),null(),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Compiler_obj,addOptimTags,(void))

::Array< ::String > Compiler_obj::getCompilerDefines(::String inTags){
            	HX_STACKFRAME(&_hx_pos_9b639c4816dab056_163_getCompilerDefines)
HXLINE( 164)		::Array< ::String > args = ::Array_obj< ::String >::__new();
HXLINE( 165)		::Array< ::String > tagFilter = inTags.split(HX_(",",2c,00,00,00));
HXLINE( 166)		this->addOptimTags(tagFilter);
HXLINE( 167)		{
HXLINE( 167)			int _g = 0;
HXDLIN( 167)			::Array< ::Dynamic> _g1 = this->mFlags;
HXDLIN( 167)			while((_g < _g1->length)){
HXLINE( 167)				 ::_Compiler::FlagInfo flag = _g1->__get(_g).StaticCast<  ::_Compiler::FlagInfo >();
HXDLIN( 167)				_g = (_g + 1);
HXLINE( 168)				flag->add(args,tagFilter);
            			}
            		}
HXLINE( 169)		return args;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Compiler_obj,getCompilerDefines,return )

::Array< ::String > Compiler_obj::getArgs( ::File inFile){
            	HX_GC_STACKFRAME(&_hx_pos_9b639c4816dab056_173_getArgs)
HXLINE( 174)		bool nvcc = inFile->isNvcc();
HXLINE( 175)		bool isRc;
HXDLIN( 175)		if (::hx::IsNotNull( this->mRcExe )) {
HXLINE( 175)			isRc = inFile->isResource();
            		}
            		else {
HXLINE( 175)			isRc = false;
            		}
HXLINE( 176)		::Array< ::String > args;
HXDLIN( 176)		if (nvcc) {
HXLINE( 176)			::Array< ::String > inFile1 = inFile->mGroup->mCompilerFlags;
HXDLIN( 176)			args = inFile1->concat(::BuildTool_obj::getNvccFlags());
            		}
            		else {
HXLINE( 176)			args = inFile->mCompilerFlags->concat(inFile->mGroup->mCompilerFlags);
            		}
HXLINE( 178)		::Array< ::String > tagFilter = inFile->getTags().split(HX_(",",2c,00,00,00));
HXLINE( 179)		this->addOptimTags(tagFilter);
HXLINE( 180)		if (!(isRc)) {
HXLINE( 181)			int _g = 0;
HXDLIN( 181)			::Array< ::Dynamic> _g1 = this->mFlags;
HXDLIN( 181)			while((_g < _g1->length)){
HXLINE( 181)				 ::_Compiler::FlagInfo flag = _g1->__get(_g).StaticCast<  ::_Compiler::FlagInfo >();
HXDLIN( 181)				_g = (_g + 1);
HXLINE( 182)				flag->add(args,tagFilter);
            			}
            		}
HXLINE( 183)		::String ext = this->mExt.toLowerCase();
HXLINE( 184)		::String ext1 =  ::haxe::io::Path_obj::__alloc( HX_CTX ,inFile->mName)->ext;
HXLINE( 185)		if (::hx::IsNotNull( ext1 )) {
HXLINE( 186)			ext1 = ext1.toLowerCase();
            		}
            		else {
HXLINE( 188)			::Log_obj::error((HX_("Unkown extension for ",24,62,50,57) + inFile->mName),null(),null(),null());
            		}
HXLINE( 191)		this->addIdentity(ext1,args);
HXLINE( 193)		bool allowPch = false;
HXLINE( 194)		if (nvcc) {
HXLINE( 195)			args = args->concat(this->mNvccFlags);
            		}
            		else {
HXLINE( 196)			if (isRc) {
HXLINE( 197)				args = args->concat(this->mRcFlags);
            			}
            			else {
HXLINE( 198)				if ((ext1 == HX_("c",63,00,00,00))) {
HXLINE( 199)					args = args->concat(this->mCFlags);
            				}
            				else {
HXLINE( 200)					if ((ext1 == HX_("m",6d,00,00,00))) {
HXLINE( 201)						args = args->concat(this->mOBJCFlags);
            					}
            					else {
HXLINE( 202)						if ((ext1 == HX_("mm",60,5f,00,00))) {
HXLINE( 203)							args = args->concat(this->mMMFlags);
            						}
            						else {
HXLINE( 204)							bool _hx_tmp;
HXDLIN( 204)							bool _hx_tmp1;
HXDLIN( 204)							if ((ext1 != HX_("cpp",23,81,4b,00))) {
HXLINE( 204)								_hx_tmp1 = (ext1 == HX_("c++",c3,44,4b,00));
            							}
            							else {
HXLINE( 204)								_hx_tmp1 = true;
            							}
HXDLIN( 204)							if (!(_hx_tmp1)) {
HXLINE( 204)								_hx_tmp = (ext1 == HX_("cc",a0,56,00,00));
            							}
            							else {
HXLINE( 204)								_hx_tmp = true;
            							}
HXDLIN( 204)							if (_hx_tmp) {
HXLINE( 206)								allowPch = true;
HXLINE( 207)								args = args->concat(this->mCPPFlags);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 210)		bool _hx_tmp2;
HXDLIN( 210)		if (!(isRc)) {
HXLINE( 210)			::String _hx_tmp3 = inFile->getTags();
HXDLIN( 210)			_hx_tmp2 = (_hx_tmp3 != inFile->mGroup->getTags());
            		}
            		else {
HXLINE( 210)			_hx_tmp2 = true;
            		}
HXDLIN( 210)		if (_hx_tmp2) {
HXLINE( 211)			allowPch = false;
            		}
HXLINE( 213)		bool _hx_tmp4;
HXDLIN( 213)		if (inFile->mGroup->isPrecompiled()) {
HXLINE( 213)			_hx_tmp4 = allowPch;
            		}
            		else {
HXLINE( 213)			_hx_tmp4 = false;
            		}
HXDLIN( 213)		if (_hx_tmp4) {
HXLINE( 215)			::String pchDir = this->getPchDir(inFile->mGroup);
HXLINE( 216)			if ((this->mPCHUse != HX_("",00,00,00,00))) {
HXLINE( 218)				args->push(((this->mPCHUse + inFile->mGroup->mPrecompiledHeader) + HX_(".h",7a,28,00,00)));
HXLINE( 219)				::String _hx_tmp5 = ((this->mPCHFilename + pchDir) + HX_("/",2f,00,00,00));
HXDLIN( 219)				::String _hx_tmp6 = (_hx_tmp5 + inFile->mGroup->getPchName());
HXDLIN( 219)				args->push((_hx_tmp6 + this->mPCHExt));
            			}
            			else {
HXLINE( 222)				args->unshift((HX_("-I",7c,27,00,00) + pchDir));
            			}
            		}
HXLINE( 225)		return args;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Compiler_obj,getArgs,return )

void Compiler_obj::createEmbedFile(::String srcName,::String destName,::String embedName,::String scramble){
            	HX_STACKFRAME(&_hx_pos_9b639c4816dab056_230_createEmbedFile)
HXDLIN( 230)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 232)			::String content = ::sys::io::File_obj::getContent(srcName);
HXLINE( 233)			::Array< ::String > output = ::Array_obj< ::String >::__new();
HXLINE( 235)			if (::hx::IsNull( scramble )) {
HXLINE( 237)				output->push(((HX_("const char *",7d,7d,e9,84) + embedName) + HX_(" = ",63,7d,18,00)));
HXLINE( 238)				content = content.split(HX_("\r",0d,00,00,00))->join(HX_("",00,00,00,00));
HXLINE( 239)				content = content.split(HX_("\\",5c,00,00,00))->join(HX_("\x01""",01,00,00,00));
HXLINE( 240)				content = content.split(HX_("\"",22,00,00,00))->join(HX_("\\\"",46,50,00,00));
HXLINE( 241)				content = content.split(HX_("\x01""",01,00,00,00))->join(HX_("\\\\",80,50,00,00));
HXLINE( 242)				::Array< ::String > lines = content.split(HX_("\n",0a,00,00,00));
HXLINE( 243)				{
HXLINE( 243)					int _g = 0;
HXDLIN( 243)					while((_g < lines->length)){
HXLINE( 243)						::String line = lines->__get(_g);
HXDLIN( 243)						_g = (_g + 1);
HXLINE( 244)						output->push(((HX_("\"",22,00,00,00) + line) + HX_("\\n\"",50,2f,46,00)));
            					}
            				}
HXLINE( 245)				output->push(HX_(";\n",6f,33,00,00));
            			}
            			else {
HXLINE( 249)				 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::ofString(content,null());
HXLINE( 250)				int byteLen = bytes->length;
HXLINE( 251)				 ::haxe::io::Bytes key = ::haxe::io::Bytes_obj::ofString(scramble,null());
HXLINE( 252)				int keyLen = key->length;
HXLINE( 253)				int state = 0;
HXLINE( 254)				::String line1 = HX_("",00,00,00,00);
HXLINE( 256)				output->push(((((HX_("int ",51,44,bb,45) + embedName) + HX_("_len = ",4d,96,48,0d)) + byteLen) + HX_(";",3b,00,00,00)));
HXLINE( 257)				output->push(HX_("static const unsigned char data[] = {",72,7f,23,23));
HXLINE( 258)				{
HXLINE( 258)					int _g1 = 0;
HXDLIN( 258)					int _g2 = byteLen;
HXDLIN( 258)					while((_g1 < _g2)){
HXLINE( 258)						_g1 = (_g1 + 1);
HXDLIN( 258)						int i = (_g1 - 1);
HXLINE( 260)						int ch = ( (int)(bytes->b->__get(i)) );
HXLINE( 261)						state = (((state + key->b->__get(::hx::Mod(i,keyLen))) ^ ch) & 255);
HXLINE( 262)						line1 = (line1 + (state + HX_(",",2c,00,00,00)));
HXLINE( 263)						if ((::hx::Mod(i,10) == 9)) {
HXLINE( 265)							output->push(line1);
HXLINE( 266)							line1 = HX_("",00,00,00,00);
            						}
            					}
            				}
HXLINE( 269)				if ((line1 != HX_("",00,00,00,00))) {
HXLINE( 270)					output->push(line1);
            				}
HXLINE( 271)				output->push(HX_("};",1e,6d,00,00));
HXLINE( 272)				output->push(((HX_("const unsigned char * ",f2,20,3a,15) + embedName) + HX_(" = data;",8e,2a,df,ae)));
            			}
HXLINE( 274)			::sys::io::File_obj::saveContent(destName,output->join(HX_("\n",0a,00,00,00)));
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g3 = _hx_e;
HXLINE( 276)				{
HXLINE( 276)					null();
            				}
HXDLIN( 276)				 ::Dynamic e = _g3;
HXLINE( 278)				::Log_obj::warn((((((HX_("Error creating ",4f,24,b3,23) + destName) + HX_(" from ",56,a3,f9,d1)) + srcName) + HX_(": ",a6,32,00,00)) + ::Std_obj::string(e)),null(),null());
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Compiler_obj,createEmbedFile,(void))

void Compiler_obj::cleanTmp(::String file){
            	HX_STACKFRAME(&_hx_pos_9b639c4816dab056_283_cleanTmp)
HXLINE( 284)		if (::BuildTool_obj::keepTemp()) {
HXLINE( 285)			return;
            		}
HXLINE( 287)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 289)			bool _hx_tmp;
HXDLIN( 289)			if (::hx::IsNotNull( file )) {
HXLINE( 289)				_hx_tmp = ::sys::FileSystem_obj::exists(file);
            			}
            			else {
HXLINE( 289)				_hx_tmp = false;
            			}
HXDLIN( 289)			if (_hx_tmp) {
HXLINE( 290)				::sys::FileSystem_obj::deleteFile(file);
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 292)				{
HXLINE( 292)					null();
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Compiler_obj,cleanTmp,(void))

::String Compiler_obj::compile( ::File inFile,int inTid, ::Dynamic headerFunc, ::Dynamic pchTimeStamp){
            	HX_GC_STACKFRAME(&_hx_pos_9b639c4816dab056_296_compile)
HXLINE( 297)		::String obj_name = this->getObjName(inFile);
HXLINE( 298)		::Array< ::String > args = this->getArgs(inFile);
HXLINE( 299)		bool nvcc = inFile->isNvcc();
HXLINE( 300)		::String exe;
HXDLIN( 300)		if (nvcc) {
HXLINE( 300)			exe = ::BuildTool_obj::getNvcc();
            		}
            		else {
HXLINE( 300)			exe = this->mExe;
            		}
HXLINE( 301)		bool isRc;
HXDLIN( 301)		if (::hx::IsNotNull( this->mRcExe )) {
HXLINE( 301)			isRc = inFile->isResource();
            		}
            		else {
HXLINE( 301)			isRc = false;
            		}
HXLINE( 302)		if (isRc) {
HXLINE( 303)			exe = this->mRcExe;
            		}
HXLINE( 305)		bool found = false;
HXLINE( 306)		::String cacheName = null();
HXLINE( 307)		bool _hx_tmp;
HXDLIN( 307)		if (::hx::IsNotNull( this->mCompilerVersion )) {
HXLINE( 307)			_hx_tmp = inFile->mGroup->isCached();
            		}
            		else {
HXLINE( 307)			_hx_tmp = false;
            		}
HXDLIN( 307)		if (_hx_tmp) {
HXLINE( 309)			cacheName = this->getHashedName(inFile,args);
HXLINE( 310)			if (this->useCacheInPlace) {
HXLINE( 313)				obj_name = cacheName;
            			}
HXLINE( 316)			if (::sys::FileSystem_obj::exists(cacheName)) {
HXLINE( 318)				bool newer = true;
HXLINE( 319)				bool _hx_tmp1;
HXDLIN( 319)				if (::hx::IsNull( pchTimeStamp )) {
HXLINE( 319)					_hx_tmp1 = inFile->mGroup->mRespectTimestamp;
            				}
            				else {
HXLINE( 319)					_hx_tmp1 = true;
            				}
HXDLIN( 319)				if (_hx_tmp1) {
HXLINE( 321)					Float time = ( ( ::Date)(::sys::FileSystem_obj::stat(cacheName)->__Field(HX_("mtime",fa,06,aa,0f),::hx::paccDynamic)) )->getTime();
HXLINE( 323)					if (::hx::IsNotNull( pchTimeStamp )) {
HXLINE( 324)						newer = ::hx::IsGreaterEq( time,pchTimeStamp );
            					}
HXLINE( 325)					if (inFile->mGroup->mRespectTimestamp) {
HXLINE( 326)						if (newer) {
HXLINE( 326)							newer = (time >= ( ( ::Date)(::sys::FileSystem_obj::stat(((inFile->mDir + HX_("/",2f,00,00,00)) + inFile->mName))->__Field(HX_("mtime",fa,06,aa,0f),::hx::paccDynamic)) )->getTime());
            						}
            						else {
HXLINE( 326)							newer = false;
            						}
            					}
            				}
HXLINE( 328)				if (newer) {
HXLINE( 331)					if (!(this->useCacheInPlace)) {
HXLINE( 332)						::sys::io::File_obj::copy(cacheName,obj_name);
            					}
HXLINE( 333)					found = true;
            				}
            			}
            		}
HXLINE( 338)		if (!(found)) {
HXLINE( 340)			if (::hx::IsNotNull( headerFunc )) {
HXLINE( 341)				headerFunc();
            			}
HXLINE( 343)			::String tmpFile = null();
HXLINE( 344)			::String delayedFilename = null();
HXLINE( 346)			if (::hx::IsNotNull( inFile->mEmbedName )) {
HXLINE( 348)				::String srcDir = ::haxe::io::Path_obj::directory(((inFile->mDir + HX_("/",2f,00,00,00)) + inFile->mName));
HXLINE( 349)				tmpFile =  ::haxe::io::Path_obj::__alloc( HX_CTX ,(((srcDir + HX_("/",2f,00,00,00)) + inFile->mEmbedName) + HX_(".cpp",b5,51,b3,1e)))->toString();
HXLINE( 350)				::Log_obj::info(HX_("",00,00,00,00),(HX_("Creating temp file ",7f,d5,e1,3c) + tmpFile));
HXLINE( 351)				this->createEmbedFile(((inFile->mDir + HX_("/",2f,00,00,00)) + inFile->mName),tmpFile,inFile->mEmbedName,inFile->mScramble);
HXLINE( 352)				args->push(tmpFile);
            			}
            			else {
HXLINE( 356)				if (isRc) {
HXLINE( 357)					delayedFilename =  ::haxe::io::Path_obj::__alloc( HX_CTX ,(inFile->mDir + inFile->mName))->toString();
            				}
            				else {
HXLINE( 359)					args->push( ::haxe::io::Path_obj::__alloc( HX_CTX ,(inFile->mDir + inFile->mName))->toString());
            				}
            			}
HXLINE( 362)			::String out;
HXDLIN( 362)			if (nvcc) {
HXLINE( 362)				out = HX_("-o ",3e,86,22,00);
            			}
            			else {
HXLINE( 362)				out = this->mOutFlag;
            			}
HXLINE( 363)			if ((out.substr(-1,null()) == HX_(" ",20,00,00,00))) {
HXLINE( 365)				args->push(out.substr(0,(out.length - 1)));
HXLINE( 366)				out = HX_("",00,00,00,00);
            			}
HXLINE( 369)			args->push((out + obj_name));
HXLINE( 371)			if (::hx::IsNotNull( delayedFilename )) {
HXLINE( 372)				args->push(delayedFilename);
            			}
HXLINE( 374)			::String tagInfo;
HXDLIN( 374)			if (::hx::IsNull( inFile->mTags )) {
HXLINE( 374)				tagInfo = HX_("",00,00,00,00);
            			}
            			else {
HXLINE( 374)				tagInfo = (HX_(" ",20,00,00,00) + ::Std_obj::string(inFile->mTags.split(HX_(",",2c,00,00,00))));
            			}
HXLINE( 376)			::String fileName = inFile->mName;
HXLINE( 377)			::Array< ::String > split = fileName.split(HX_("/",2f,00,00,00));
HXLINE( 378)			if ((split->length > 1)) {
HXLINE( 380)				::String fileName1 = ((HX_(" \x1b""[2m-\x1b""[0m \x1b""[33m",fc,17,ad,5a) + split->slice(0,(split->length - 1))->join(HX_("/",2f,00,00,00))) + HX_("/\x1b""[33;1m",48,b7,d2,c4));
HXDLIN( 380)				fileName = ((fileName1 + split->__get((split->length - 1))) + HX_("\x1b""[0m",1d,fa,1d,12));
            			}
            			else {
HXLINE( 384)				fileName = ((HX_(" \x1b""[2m-\x1b""[0m \x1b""[33;1m",66,49,fa,31) + fileName) + HX_("\x1b""[0m",1d,fa,1d,12));
            			}
HXLINE( 386)			fileName = (fileName + ((HX_(" \x1b""[3m",da,8c,f0,7e) + tagInfo) + HX_("\x1b""[0m",1d,fa,1d,12)));
HXLINE( 389)			if ((inTid >= 0)) {
HXLINE( 391)				if ((::BuildTool_obj::threadExitCode == 0)) {
HXLINE( 393)					if (!(::Log_obj::verbose)) {
HXLINE( 395)						::Log_obj::info(fileName,null());
            					}
HXLINE( 397)					int err = ::ProcessManager_obj::runProcessThreaded(exe,args,null());
HXLINE( 398)					this->cleanTmp(tmpFile);
HXLINE( 399)					if ((err != 0)) {
HXLINE( 401)						if (::sys::FileSystem_obj::exists(obj_name)) {
HXLINE( 402)							::sys::FileSystem_obj::deleteFile(obj_name);
            						}
HXLINE( 403)						::BuildTool_obj::setThreadError(err);
            					}
            				}
            			}
            			else {
HXLINE( 409)				if (!(::Log_obj::verbose)) {
HXLINE( 411)					::Log_obj::info(fileName,null());
            				}
HXLINE( 413)				int result = ::ProcessManager_obj::runProcessThreaded(exe,args,null());
HXLINE( 414)				this->cleanTmp(tmpFile);
HXLINE( 415)				if ((result != 0)) {
HXLINE( 417)					if (::sys::FileSystem_obj::exists(obj_name)) {
HXLINE( 418)						::sys::FileSystem_obj::deleteFile(obj_name);
            					}
HXLINE( 419)					::Tools_obj::exit(result);
            				}
            			}
HXLINE( 424)			bool _hx_tmp2;
HXDLIN( 424)			if (::hx::IsNotNull( cacheName )) {
HXLINE( 424)				_hx_tmp2 = !(this->useCacheInPlace);
            			}
            			else {
HXLINE( 424)				_hx_tmp2 = false;
            			}
HXDLIN( 424)			if (_hx_tmp2) {
HXLINE( 426)				::Log_obj::info(HX_("",00,00,00,00),(HX_(" caching ",61,87,0d,fb) + cacheName));
HXLINE( 427)				::sys::io::File_obj::copy(obj_name,cacheName);
            			}
            		}
HXLINE( 431)		return obj_name;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Compiler_obj,compile,return )

bool Compiler_obj::createCompilerVersion( ::FileGroup inGroup){
            	HX_STACKFRAME(&_hx_pos_9b639c4816dab056_435_createCompilerVersion)
HXLINE( 436)		if (::hx::IsNull( this->mCompilerVersion )) {
HXLINE( 438)			::String versionString = HX_("",00,00,00,00);
HXLINE( 439)			::String command = HX_("",00,00,00,00);
HXLINE( 441)			if (::hx::IsNull( this->mGetCompilerVersion )) {
HXLINE( 443)				command = (this->mExe + HX_(" --version",98,67,8e,a8));
HXLINE( 444)				versionString = ::ProcessManager_obj::readStdout(this->mExe,::Array_obj< ::String >::fromData( _hx_array_data_57835bbf_19,1))->join(HX_(" ",20,00,00,00));
            			}
            			else {
HXLINE( 448)				command = this->mGetCompilerVersion;
HXLINE( 449)				versionString = ::ProcessManager_obj::readStderr(this->mGetCompilerVersion,::Array_obj< ::String >::__new(0))->join(HX_(" ",20,00,00,00));
            			}
HXLINE( 452)			bool _hx_tmp;
HXDLIN( 452)			if ((versionString != HX_("",00,00,00,00))) {
HXLINE( 452)				_hx_tmp = ::hx::IsNull( versionString );
            			}
            			else {
HXLINE( 452)				_hx_tmp = true;
            			}
HXDLIN( 452)			if (_hx_tmp) {
HXLINE( 453)				::Log_obj::error((HX_("Could not deduce compiler version with ",71,11,0e,5e) + command),null(),null(),null());
            			}
HXLINE( 455)			::Log_obj::info(HX_("",00,00,00,00),(HX_("Compiler version: ",1d,2c,30,43) + versionString));
HXLINE( 457)			this->mCompilerVersionString = versionString;
HXLINE( 458)			this->mCompilerVersion = ::haxe::crypto::Md5_obj::encode(versionString);
HXLINE( 459)			this->mCached = true;
            		}
HXLINE( 462)		return this->mCached;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Compiler_obj,createCompilerVersion,return )

::String Compiler_obj::getObjName( ::File inFile){
            	HX_GC_STACKFRAME(&_hx_pos_9b639c4816dab056_466_getObjName)
HXLINE( 467)		bool isRc;
HXDLIN( 467)		if (::hx::IsNotNull( this->mRcExe )) {
HXLINE( 467)			isRc = inFile->isResource();
            		}
            		else {
HXLINE( 467)			isRc = false;
            		}
HXLINE( 469)		 ::haxe::io::Path path =  ::haxe::io::Path_obj::__alloc( HX_CTX ,inFile->mName);
HXLINE( 470)		::String dirId = (::haxe::crypto::Md5_obj::encode(((::BuildTool_obj::targetKey + path->dir) + inFile->mGroup->mId)).substr(0,8) + HX_("_",5f,00,00,00));
HXLINE( 472)		::String _hx_tmp;
HXDLIN( 472)		if (isRc) {
HXLINE( 472)			_hx_tmp = this->mRcExt;
            		}
            		else {
HXLINE( 472)			_hx_tmp = this->mExt;
            		}
HXDLIN( 472)		return ::PathManager_obj::combine(this->mObjDir,(((inFile->mGroup->mObjPrefix + dirId) + path->file) + _hx_tmp));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Compiler_obj,getObjName,return )

::String Compiler_obj::getHashedName( ::File inFile,::Array< ::String > args){
            	HX_STACKFRAME(&_hx_pos_9b639c4816dab056_476_getHashedName)
HXLINE( 477)		::String sourceName = (inFile->mDir + inFile->mName);
HXLINE( 478)		::String contents = ::sys::io::File_obj::getContent(sourceName);
HXLINE( 479)		if ((contents != HX_("",00,00,00,00))) {
HXLINE( 481)			::String md5 = (contents + args->join(HX_(" ",20,00,00,00)));
HXDLIN( 481)			::String md51 = ::haxe::crypto::Md5_obj::encode((((md5 + inFile->mGroup->mDependHash) + this->mCompilerVersion) + inFile->mDependHash));
HXLINE( 483)			::String _hx_tmp = inFile->mGroup->getCacheProject();
HXDLIN( 483)			return ::CompileCache_obj::getCacheName(_hx_tmp,md51,this->mExt);
            		}
            		else {
HXLINE( 486)			HX_STACK_DO_THROW((HX_("Unkown source contents ",2d,02,6a,2c) + sourceName));
            		}
HXLINE( 479)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Compiler_obj,getHashedName,return )

::String Compiler_obj::getCacheString( ::File inFile){
            	HX_STACKFRAME(&_hx_pos_9b639c4816dab056_491_getCacheString)
HXLINE( 492)		::Array< ::String > args = this->getArgs(inFile);
HXLINE( 493)		::String _hx_tmp = ((HX_("<contents>",28,8a,d4,21) + args->join(HX_(" ",20,00,00,00))) + HX_(" ",20,00,00,00));
HXDLIN( 493)		::String _hx_tmp1 = ((_hx_tmp + inFile->mGroup->getDependString()) + HX_(" ",20,00,00,00));
HXDLIN( 493)		::String _hx_tmp2 = ((_hx_tmp1 + this->mCompilerVersionString) + HX_(" ",20,00,00,00));
HXDLIN( 493)		return (_hx_tmp2 + inFile->getDependString());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Compiler_obj,getCacheString,return )

::String Compiler_obj::getCachedObjName( ::File inFile){
            	HX_STACKFRAME(&_hx_pos_9b639c4816dab056_498_getCachedObjName)
HXDLIN( 498)		bool _hx_tmp;
HXDLIN( 498)		bool _hx_tmp1;
HXDLIN( 498)		if (::hx::IsNotNull( this->mCompilerVersion )) {
HXDLIN( 498)			_hx_tmp1 = this->useCacheInPlace;
            		}
            		else {
HXDLIN( 498)			_hx_tmp1 = false;
            		}
HXDLIN( 498)		if (_hx_tmp1) {
HXDLIN( 498)			_hx_tmp = inFile->mGroup->isCached();
            		}
            		else {
HXDLIN( 498)			_hx_tmp = false;
            		}
HXDLIN( 498)		if (_hx_tmp) {
HXLINE( 501)			return this->getHashedName(inFile,this->getArgs(inFile));
            		}
            		else {
HXLINE( 504)			return this->getObjName(inFile);
            		}
HXLINE( 498)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Compiler_obj,getCachedObjName,return )

bool Compiler_obj::needsPchObj(){
            	HX_STACKFRAME(&_hx_pos_9b639c4816dab056_509_needsPchObj)
HXDLIN( 509)		return (this->mPCH != HX_("gcc",c7,7e,4e,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Compiler_obj,needsPchObj,return )

::Array< ::String > Compiler_obj::getPchCompileFlags( ::FileGroup inGroup){
            	HX_STACKFRAME(&_hx_pos_9b639c4816dab056_522_getPchCompileFlags)
HXLINE( 523)		::Array< ::String > args = inGroup->mCompilerFlags->copy();
HXLINE( 524)		::Array< ::String > tags = inGroup->mTags.split(HX_(",",2c,00,00,00));
HXLINE( 525)		this->addOptimTags(tags);
HXLINE( 526)		{
HXLINE( 526)			int _g = 0;
HXDLIN( 526)			::Array< ::Dynamic> _g1 = this->mFlags;
HXDLIN( 526)			while((_g < _g1->length)){
HXLINE( 526)				 ::_Compiler::FlagInfo flag = _g1->__get(_g).StaticCast<  ::_Compiler::FlagInfo >();
HXDLIN( 526)				_g = (_g + 1);
HXLINE( 527)				flag->add(args,tags);
            			}
            		}
HXLINE( 529)		return args->concat(this->mCPPFlags);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Compiler_obj,getPchCompileFlags,return )

::String Compiler_obj::getPchDir( ::FileGroup inGroup){
            	HX_STACKFRAME(&_hx_pos_9b639c4816dab056_533_getPchDir)
HXLINE( 534)		if (!(inGroup->isCached())) {
HXLINE( 535)			return inGroup->getPchDir(this->mObjDir);
            		}
HXLINE( 537)		::Array< ::String > args = this->getPchCompileFlags(inGroup);
HXLINE( 538)		::String md5 = args->join(HX_(" ",20,00,00,00));
HXDLIN( 538)		::String md51 = ::haxe::crypto::Md5_obj::encode((((md5 + inGroup->mPrecompiledHeader) + inGroup->mDependHash) + this->mCompilerVersion));
HXLINE( 540)		return ::CompileCache_obj::getPchDir(inGroup->getCacheProject(),md51);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Compiler_obj,getPchDir,return )

::String Compiler_obj::precompile( ::FileGroup inGroup,bool inReuseIfPossible){
            	HX_STACKFRAME(&_hx_pos_9b639c4816dab056_544_precompile)
HXLINE( 546)		::String header = inGroup->mPrecompiledHeader;
HXLINE( 548)		::String file = inGroup->getPchName();
HXLINE( 550)		::Array< ::String > args = this->getPchCompileFlags(inGroup);
HXLINE( 553)		::String dir = this->getPchDir(inGroup);
HXLINE( 556)		::String pch_name = (((dir + HX_("/",2f,00,00,00)) + file) + this->mPCHExt);
HXLINE( 557)		bool _hx_tmp;
HXDLIN( 557)		if (!(inGroup->isCached())) {
HXLINE( 557)			_hx_tmp = inReuseIfPossible;
            		}
            		else {
HXLINE( 557)			_hx_tmp = true;
            		}
HXDLIN( 557)		if (_hx_tmp) {
HXLINE( 560)			::String obj;
HXDLIN( 560)			if ((this->mPCH == HX_("gcc",c7,7e,4e,00))) {
HXLINE( 560)				obj = null();
            			}
            			else {
HXLINE( 560)				obj = ::PathManager_obj::combine(dir,(file + this->mExt));
            			}
HXLINE( 561)			bool _hx_tmp1;
HXDLIN( 561)			if (::sys::FileSystem_obj::exists(pch_name)) {
HXLINE( 561)				if (::hx::IsNotNull( obj )) {
HXLINE( 561)					_hx_tmp1 = ::sys::FileSystem_obj::exists(obj);
            				}
            				else {
HXLINE( 561)					_hx_tmp1 = true;
            				}
            			}
            			else {
HXLINE( 561)				_hx_tmp1 = false;
            			}
HXDLIN( 561)			if (_hx_tmp1) {
HXLINE( 562)				return obj;
            			}
            		}
HXLINE( 565)		args = args->concat(this->mPCHFlags);
HXLINE( 569)		::PathManager_obj::mkdir(dir,null());
HXLINE( 571)		if ((this->mPCH != HX_("gcc",c7,7e,4e,00))) {
HXLINE( 573)			args->push(((this->mPCHCreate + header) + HX_(".h",7a,28,00,00)));
HXLINE( 574)			::String symbol = (HX_("link",fa,17,b3,47) + ::haxe::crypto::Md5_obj::encode(::PathManager_obj::combine(dir,(file + this->mExt))));
HXLINE( 575)			args->push((HX_("-Yl",60,73,22,00) + symbol));
HXLINE( 578)			::String tmp_cpp = (((dir + HX_("/",2f,00,00,00)) + file) + HX_(".cpp",b5,51,b3,1e));
HXLINE( 579)			 ::sys::io::FileOutput outFile = ::sys::io::File_obj::write(tmp_cpp,false);
HXLINE( 580)			outFile->writeString(((HX_("#include <",c1,57,7f,46) + header) + HX_(".h>\n",06,f1,b6,1e)),null());
HXLINE( 581)			outFile->close();
HXLINE( 583)			args->push(tmp_cpp);
HXLINE( 584)			args->push((this->mPCHFilename + pch_name));
HXLINE( 585)			::String _hx_tmp2 = this->mOutFlag;
HXDLIN( 585)			args->push((_hx_tmp2 + ::PathManager_obj::combine(dir,(file + this->mExt))));
            		}
            		else {
HXLINE( 589)			::Log_obj::info(HX_("",00,00,00,00),((HX_("Creating PCH directory \"",3d,6b,b0,9d) + dir) + HX_("\"",22,00,00,00)));
HXLINE( 590)			::PathManager_obj::mkdir(dir,null());
HXLINE( 591)			args->push(HX_("-o",a2,27,00,00));
HXLINE( 592)			args->push(pch_name);
HXLINE( 593)			args->push((((inGroup->mPrecompiledHeaderDir + HX_("/",2f,00,00,00)) + inGroup->mPrecompiledHeader) + HX_(".h",7a,28,00,00)));
            		}
HXLINE( 596)		::Log_obj::info(((HX_("Creating ",a7,aa,71,ee) + pch_name) + HX_("...",ee,0f,23,00)),(HX_(" - Precompile ",bd,21,29,6e) + pch_name));
HXLINE( 597)		int result = ::ProcessManager_obj::runCommand(HX_("",00,00,00,00),this->mExe,args,null(),null(),null(),null());
HXLINE( 598)		if ((result != 0)) {
HXLINE( 600)			int goes = 10;
HXLINE( 601)			{
HXLINE( 601)				int _g = 0;
HXDLIN( 601)				int _g1 = goes;
HXDLIN( 601)				while((_g < _g1)){
HXLINE( 601)					_g = (_g + 1);
HXDLIN( 601)					int attempt = (_g - 1);
HXLINE( 603)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 604)						if (::sys::FileSystem_obj::exists(pch_name)) {
HXLINE( 605)							::sys::FileSystem_obj::deleteFile(pch_name);
            						}
HXLINE( 606)						goto _hx_goto_28;
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic _g2 = _hx_e;
HXLINE( 608)							{
HXLINE( 608)								null();
            							}
HXDLIN( 608)							 ::Dynamic error = _g2;
HXLINE( 609)							{
HXLINE( 610)								::Log_obj::warn((((HX_("Error cleaning PCH file ",4a,f8,ae,dd) + pch_name) + HX_(": ",a6,32,00,00)) + ::Std_obj::string(error)),null(),null());
HXLINE( 611)								if ((attempt < (goes - 1))) {
HXLINE( 612)									::Sys_obj::sleep(((Float)0.25));
            								}
            							}
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            				_hx_goto_28:;
            			}
HXLINE( 615)			::Log_obj::error(HX_("Could not create PCH",1d,54,63,1a),null(),null(),null());
            		}
HXLINE( 619)		if ((this->mPCH != HX_("gcc",c7,7e,4e,00))) {
HXLINE( 620)			return ::PathManager_obj::combine(dir,(file + this->mExt));
            		}
HXLINE( 621)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Compiler_obj,precompile,return )

void Compiler_obj::setPCH(::String inPCH){
            	HX_STACKFRAME(&_hx_pos_9b639c4816dab056_625_setPCH)
HXLINE( 626)		this->mPCH = inPCH;
HXLINE( 627)		if ((this->mPCH == HX_("gcc",c7,7e,4e,00))) {
HXLINE( 629)			this->mPCHExt = HX_(".h.gch",d8,3c,cd,64);
HXLINE( 630)			this->mPCHUse = HX_("",00,00,00,00);
HXLINE( 631)			this->mPCHFilename = HX_("",00,00,00,00);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Compiler_obj,setPCH,(void))

bool Compiler_obj::initPrecompile(::String inDefault){
            	HX_STACKFRAME(&_hx_pos_9b639c4816dab056_636_initPrecompile)
HXLINE( 637)		if (::hx::IsNull( this->mPCH )) {
HXLINE( 638)			this->setPCH(inDefault);
            		}
HXLINE( 639)		return ::hx::IsNotNull( this->mPCH );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Compiler_obj,initPrecompile,return )


::hx::ObjectPtr< Compiler_obj > Compiler_obj::__new(::String inID,::String inExe) {
	::hx::ObjectPtr< Compiler_obj > __this = new Compiler_obj();
	__this->__construct(inID,inExe);
	return __this;
}

::hx::ObjectPtr< Compiler_obj > Compiler_obj::__alloc(::hx::Ctx *_hx_ctx,::String inID,::String inExe) {
	Compiler_obj *__this = (Compiler_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Compiler_obj), true, "Compiler"));
	*(void **)__this = Compiler_obj::_hx_vtable;
	__this->__construct(inID,inExe);
	return __this;
}

Compiler_obj::Compiler_obj()
{
}

void Compiler_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Compiler);
	HX_MARK_MEMBER_NAME(mFlags,"mFlags");
	HX_MARK_MEMBER_NAME(mCFlags,"mCFlags");
	HX_MARK_MEMBER_NAME(mNvccFlags,"mNvccFlags");
	HX_MARK_MEMBER_NAME(mMMFlags,"mMMFlags");
	HX_MARK_MEMBER_NAME(mCPPFlags,"mCPPFlags");
	HX_MARK_MEMBER_NAME(mOBJCFlags,"mOBJCFlags");
	HX_MARK_MEMBER_NAME(mPCHFlags,"mPCHFlags");
	HX_MARK_MEMBER_NAME(mAddGCCIdentity,"mAddGCCIdentity");
	HX_MARK_MEMBER_NAME(mExe,"mExe");
	HX_MARK_MEMBER_NAME(mOutFlag,"mOutFlag");
	HX_MARK_MEMBER_NAME(mObjDir,"mObjDir");
	HX_MARK_MEMBER_NAME(mRelObjDir,"mRelObjDir");
	HX_MARK_MEMBER_NAME(mExt,"mExt");
	HX_MARK_MEMBER_NAME(mPCHExt,"mPCHExt");
	HX_MARK_MEMBER_NAME(mPCHCreate,"mPCHCreate");
	HX_MARK_MEMBER_NAME(mPCHUse,"mPCHUse");
	HX_MARK_MEMBER_NAME(mPCHFilename,"mPCHFilename");
	HX_MARK_MEMBER_NAME(mPCH,"mPCH");
	HX_MARK_MEMBER_NAME(mRcExe,"mRcExe");
	HX_MARK_MEMBER_NAME(mRcExt,"mRcExt");
	HX_MARK_MEMBER_NAME(mRcFlags,"mRcFlags");
	HX_MARK_MEMBER_NAME(mGetCompilerVersion,"mGetCompilerVersion");
	HX_MARK_MEMBER_NAME(mCompilerVersion,"mCompilerVersion");
	HX_MARK_MEMBER_NAME(mCompilerVersionString,"mCompilerVersionString");
	HX_MARK_MEMBER_NAME(mCached,"mCached");
	HX_MARK_MEMBER_NAME(mID,"mID");
	HX_MARK_MEMBER_NAME(useCacheInPlace,"useCacheInPlace");
	HX_MARK_END_CLASS();
}

void Compiler_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mFlags,"mFlags");
	HX_VISIT_MEMBER_NAME(mCFlags,"mCFlags");
	HX_VISIT_MEMBER_NAME(mNvccFlags,"mNvccFlags");
	HX_VISIT_MEMBER_NAME(mMMFlags,"mMMFlags");
	HX_VISIT_MEMBER_NAME(mCPPFlags,"mCPPFlags");
	HX_VISIT_MEMBER_NAME(mOBJCFlags,"mOBJCFlags");
	HX_VISIT_MEMBER_NAME(mPCHFlags,"mPCHFlags");
	HX_VISIT_MEMBER_NAME(mAddGCCIdentity,"mAddGCCIdentity");
	HX_VISIT_MEMBER_NAME(mExe,"mExe");
	HX_VISIT_MEMBER_NAME(mOutFlag,"mOutFlag");
	HX_VISIT_MEMBER_NAME(mObjDir,"mObjDir");
	HX_VISIT_MEMBER_NAME(mRelObjDir,"mRelObjDir");
	HX_VISIT_MEMBER_NAME(mExt,"mExt");
	HX_VISIT_MEMBER_NAME(mPCHExt,"mPCHExt");
	HX_VISIT_MEMBER_NAME(mPCHCreate,"mPCHCreate");
	HX_VISIT_MEMBER_NAME(mPCHUse,"mPCHUse");
	HX_VISIT_MEMBER_NAME(mPCHFilename,"mPCHFilename");
	HX_VISIT_MEMBER_NAME(mPCH,"mPCH");
	HX_VISIT_MEMBER_NAME(mRcExe,"mRcExe");
	HX_VISIT_MEMBER_NAME(mRcExt,"mRcExt");
	HX_VISIT_MEMBER_NAME(mRcFlags,"mRcFlags");
	HX_VISIT_MEMBER_NAME(mGetCompilerVersion,"mGetCompilerVersion");
	HX_VISIT_MEMBER_NAME(mCompilerVersion,"mCompilerVersion");
	HX_VISIT_MEMBER_NAME(mCompilerVersionString,"mCompilerVersionString");
	HX_VISIT_MEMBER_NAME(mCached,"mCached");
	HX_VISIT_MEMBER_NAME(mID,"mID");
	HX_VISIT_MEMBER_NAME(useCacheInPlace,"useCacheInPlace");
}

::hx::Val Compiler_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"mID") ) { return ::hx::Val( mID ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mExe") ) { return ::hx::Val( mExe ); }
		if (HX_FIELD_EQ(inName,"mExt") ) { return ::hx::Val( mExt ); }
		if (HX_FIELD_EQ(inName,"mPCH") ) { return ::hx::Val( mPCH ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"mFlags") ) { return ::hx::Val( mFlags ); }
		if (HX_FIELD_EQ(inName,"mRcExe") ) { return ::hx::Val( mRcExe ); }
		if (HX_FIELD_EQ(inName,"mRcExt") ) { return ::hx::Val( mRcExt ); }
		if (HX_FIELD_EQ(inName,"setPCH") ) { return ::hx::Val( setPCH_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mCFlags") ) { return ::hx::Val( mCFlags ); }
		if (HX_FIELD_EQ(inName,"mObjDir") ) { return ::hx::Val( mObjDir ); }
		if (HX_FIELD_EQ(inName,"mPCHExt") ) { return ::hx::Val( mPCHExt ); }
		if (HX_FIELD_EQ(inName,"mPCHUse") ) { return ::hx::Val( mPCHUse ); }
		if (HX_FIELD_EQ(inName,"mCached") ) { return ::hx::Val( mCached ); }
		if (HX_FIELD_EQ(inName,"addFlag") ) { return ::hx::Val( addFlag_dyn() ); }
		if (HX_FIELD_EQ(inName,"getArgs") ) { return ::hx::Val( getArgs_dyn() ); }
		if (HX_FIELD_EQ(inName,"compile") ) { return ::hx::Val( compile_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mMMFlags") ) { return ::hx::Val( mMMFlags ); }
		if (HX_FIELD_EQ(inName,"mOutFlag") ) { return ::hx::Val( mOutFlag ); }
		if (HX_FIELD_EQ(inName,"mRcFlags") ) { return ::hx::Val( mRcFlags ); }
		if (HX_FIELD_EQ(inName,"cleanTmp") ) { return ::hx::Val( cleanTmp_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mCPPFlags") ) { return ::hx::Val( mCPPFlags ); }
		if (HX_FIELD_EQ(inName,"mPCHFlags") ) { return ::hx::Val( mPCHFlags ); }
		if (HX_FIELD_EQ(inName,"getPchDir") ) { return ::hx::Val( getPchDir_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"mNvccFlags") ) { return ::hx::Val( mNvccFlags ); }
		if (HX_FIELD_EQ(inName,"mOBJCFlags") ) { return ::hx::Val( mOBJCFlags ); }
		if (HX_FIELD_EQ(inName,"mRelObjDir") ) { return ::hx::Val( mRelObjDir ); }
		if (HX_FIELD_EQ(inName,"mPCHCreate") ) { return ::hx::Val( mPCHCreate ); }
		if (HX_FIELD_EQ(inName,"getObjName") ) { return ::hx::Val( getObjName_dyn() ); }
		if (HX_FIELD_EQ(inName,"precompile") ) { return ::hx::Val( precompile_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"addIdentity") ) { return ::hx::Val( addIdentity_dyn() ); }
		if (HX_FIELD_EQ(inName,"needsPchObj") ) { return ::hx::Val( needsPchObj_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"mPCHFilename") ) { return ::hx::Val( mPCHFilename ); }
		if (HX_FIELD_EQ(inName,"addOptimTags") ) { return ::hx::Val( addOptimTags_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"objToAbsolute") ) { return ::hx::Val( objToAbsolute_dyn() ); }
		if (HX_FIELD_EQ(inName,"getHashedName") ) { return ::hx::Val( getHashedName_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getFlagStrings") ) { return ::hx::Val( getFlagStrings_dyn() ); }
		if (HX_FIELD_EQ(inName,"getCacheString") ) { return ::hx::Val( getCacheString_dyn() ); }
		if (HX_FIELD_EQ(inName,"initPrecompile") ) { return ::hx::Val( initPrecompile_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"mAddGCCIdentity") ) { return ::hx::Val( mAddGCCIdentity ); }
		if (HX_FIELD_EQ(inName,"useCacheInPlace") ) { return ::hx::Val( useCacheInPlace ); }
		if (HX_FIELD_EQ(inName,"getTargetPrefix") ) { return ::hx::Val( getTargetPrefix_dyn() ); }
		if (HX_FIELD_EQ(inName,"createEmbedFile") ) { return ::hx::Val( createEmbedFile_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"mCompilerVersion") ) { return ::hx::Val( mCompilerVersion ); }
		if (HX_FIELD_EQ(inName,"getCachedObjName") ) { return ::hx::Val( getCachedObjName_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getCompilerDefines") ) { return ::hx::Val( getCompilerDefines_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPchCompileFlags") ) { return ::hx::Val( getPchCompileFlags_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"mGetCompilerVersion") ) { return ::hx::Val( mGetCompilerVersion ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"createCompilerVersion") ) { return ::hx::Val( createCompilerVersion_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"mCompilerVersionString") ) { return ::hx::Val( mCompilerVersionString ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Compiler_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"mID") ) { mID=inValue.Cast< ::String >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mExe") ) { mExe=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mExt") ) { mExt=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mPCH") ) { mPCH=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"mFlags") ) { mFlags=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mRcExe") ) { mRcExe=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mRcExt") ) { mRcExt=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mCFlags") ) { mCFlags=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mObjDir") ) { mObjDir=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mPCHExt") ) { mPCHExt=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mPCHUse") ) { mPCHUse=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mCached") ) { mCached=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mMMFlags") ) { mMMFlags=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mOutFlag") ) { mOutFlag=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mRcFlags") ) { mRcFlags=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mCPPFlags") ) { mCPPFlags=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mPCHFlags") ) { mPCHFlags=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"mNvccFlags") ) { mNvccFlags=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mOBJCFlags") ) { mOBJCFlags=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mRelObjDir") ) { mRelObjDir=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mPCHCreate") ) { mPCHCreate=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"mPCHFilename") ) { mPCHFilename=inValue.Cast< ::String >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"mAddGCCIdentity") ) { mAddGCCIdentity=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"useCacheInPlace") ) { useCacheInPlace=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"mCompilerVersion") ) { mCompilerVersion=inValue.Cast< ::String >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"mGetCompilerVersion") ) { mGetCompilerVersion=inValue.Cast< ::String >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"mCompilerVersionString") ) { mCompilerVersionString=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Compiler_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("mFlags",9a,ef,9f,2a));
	outFields->push(HX_("mCFlags",31,58,46,14));
	outFields->push(HX_("mNvccFlags",12,e3,5e,c2));
	outFields->push(HX_("mMMFlags",fa,b2,a3,3b));
	outFields->push(HX_("mCPPFlags",b1,28,f9,59));
	outFields->push(HX_("mOBJCFlags",0e,f9,0c,1c));
	outFields->push(HX_("mPCHFlags",7f,09,17,f2));
	outFields->push(HX_("mAddGCCIdentity",d1,a3,59,a4));
	outFields->push(HX_("mExe",25,06,41,48));
	outFields->push(HX_("mOutFlag",6d,f6,6d,f0));
	outFields->push(HX_("mObjDir",e3,7d,5e,fe));
	outFields->push(HX_("mRelObjDir",a2,b9,b8,d6));
	outFields->push(HX_("mExt",34,06,41,48));
	outFields->push(HX_("mPCHExt",d9,6c,d5,74));
	outFields->push(HX_("mPCHCreate",c4,f9,06,26));
	outFields->push(HX_("mPCHUse",7f,8c,e1,74));
	outFields->push(HX_("mPCHFilename",8f,03,82,3c));
	outFields->push(HX_("mPCH",a8,30,49,48));
	outFields->push(HX_("mRcExe",b4,c9,66,0d));
	outFields->push(HX_("mRcExt",c3,c9,66,0d));
	outFields->push(HX_("mRcFlags",e9,f4,68,d7));
	outFields->push(HX_("mGetCompilerVersion",10,95,a1,00));
	outFields->push(HX_("mCompilerVersion",4c,bb,d5,a3));
	outFields->push(HX_("mCompilerVersionString",3d,d9,77,7d));
	outFields->push(HX_("mCached",2f,64,2a,9a));
	outFields->push(HX_("mID",88,f5,52,00));
	outFields->push(HX_("useCacheInPlace",67,4b,90,e7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Compiler_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Compiler_obj,mFlags),HX_("mFlags",9a,ef,9f,2a)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Compiler_obj,mCFlags),HX_("mCFlags",31,58,46,14)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Compiler_obj,mNvccFlags),HX_("mNvccFlags",12,e3,5e,c2)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Compiler_obj,mMMFlags),HX_("mMMFlags",fa,b2,a3,3b)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Compiler_obj,mCPPFlags),HX_("mCPPFlags",b1,28,f9,59)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Compiler_obj,mOBJCFlags),HX_("mOBJCFlags",0e,f9,0c,1c)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Compiler_obj,mPCHFlags),HX_("mPCHFlags",7f,09,17,f2)},
	{::hx::fsBool,(int)offsetof(Compiler_obj,mAddGCCIdentity),HX_("mAddGCCIdentity",d1,a3,59,a4)},
	{::hx::fsString,(int)offsetof(Compiler_obj,mExe),HX_("mExe",25,06,41,48)},
	{::hx::fsString,(int)offsetof(Compiler_obj,mOutFlag),HX_("mOutFlag",6d,f6,6d,f0)},
	{::hx::fsString,(int)offsetof(Compiler_obj,mObjDir),HX_("mObjDir",e3,7d,5e,fe)},
	{::hx::fsString,(int)offsetof(Compiler_obj,mRelObjDir),HX_("mRelObjDir",a2,b9,b8,d6)},
	{::hx::fsString,(int)offsetof(Compiler_obj,mExt),HX_("mExt",34,06,41,48)},
	{::hx::fsString,(int)offsetof(Compiler_obj,mPCHExt),HX_("mPCHExt",d9,6c,d5,74)},
	{::hx::fsString,(int)offsetof(Compiler_obj,mPCHCreate),HX_("mPCHCreate",c4,f9,06,26)},
	{::hx::fsString,(int)offsetof(Compiler_obj,mPCHUse),HX_("mPCHUse",7f,8c,e1,74)},
	{::hx::fsString,(int)offsetof(Compiler_obj,mPCHFilename),HX_("mPCHFilename",8f,03,82,3c)},
	{::hx::fsString,(int)offsetof(Compiler_obj,mPCH),HX_("mPCH",a8,30,49,48)},
	{::hx::fsString,(int)offsetof(Compiler_obj,mRcExe),HX_("mRcExe",b4,c9,66,0d)},
	{::hx::fsString,(int)offsetof(Compiler_obj,mRcExt),HX_("mRcExt",c3,c9,66,0d)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Compiler_obj,mRcFlags),HX_("mRcFlags",e9,f4,68,d7)},
	{::hx::fsString,(int)offsetof(Compiler_obj,mGetCompilerVersion),HX_("mGetCompilerVersion",10,95,a1,00)},
	{::hx::fsString,(int)offsetof(Compiler_obj,mCompilerVersion),HX_("mCompilerVersion",4c,bb,d5,a3)},
	{::hx::fsString,(int)offsetof(Compiler_obj,mCompilerVersionString),HX_("mCompilerVersionString",3d,d9,77,7d)},
	{::hx::fsBool,(int)offsetof(Compiler_obj,mCached),HX_("mCached",2f,64,2a,9a)},
	{::hx::fsString,(int)offsetof(Compiler_obj,mID),HX_("mID",88,f5,52,00)},
	{::hx::fsBool,(int)offsetof(Compiler_obj,useCacheInPlace),HX_("useCacheInPlace",67,4b,90,e7)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Compiler_obj_sStaticStorageInfo = 0;
#endif

static ::String Compiler_obj_sMemberFields[] = {
	HX_("mFlags",9a,ef,9f,2a),
	HX_("mCFlags",31,58,46,14),
	HX_("mNvccFlags",12,e3,5e,c2),
	HX_("mMMFlags",fa,b2,a3,3b),
	HX_("mCPPFlags",b1,28,f9,59),
	HX_("mOBJCFlags",0e,f9,0c,1c),
	HX_("mPCHFlags",7f,09,17,f2),
	HX_("mAddGCCIdentity",d1,a3,59,a4),
	HX_("mExe",25,06,41,48),
	HX_("mOutFlag",6d,f6,6d,f0),
	HX_("mObjDir",e3,7d,5e,fe),
	HX_("mRelObjDir",a2,b9,b8,d6),
	HX_("mExt",34,06,41,48),
	HX_("mPCHExt",d9,6c,d5,74),
	HX_("mPCHCreate",c4,f9,06,26),
	HX_("mPCHUse",7f,8c,e1,74),
	HX_("mPCHFilename",8f,03,82,3c),
	HX_("mPCH",a8,30,49,48),
	HX_("mRcExe",b4,c9,66,0d),
	HX_("mRcExt",c3,c9,66,0d),
	HX_("mRcFlags",e9,f4,68,d7),
	HX_("mGetCompilerVersion",10,95,a1,00),
	HX_("mCompilerVersion",4c,bb,d5,a3),
	HX_("mCompilerVersionString",3d,d9,77,7d),
	HX_("mCached",2f,64,2a,9a),
	HX_("mID",88,f5,52,00),
	HX_("useCacheInPlace",67,4b,90,e7),
	HX_("getFlagStrings",40,0b,b1,b6),
	HX_("addFlag",6d,4e,fb,7f),
	HX_("objToAbsolute",e9,31,3a,f2),
	HX_("getTargetPrefix",79,69,25,8e),
	HX_("addIdentity",7f,7c,8b,ea),
	HX_("addOptimTags",ef,64,c2,49),
	HX_("getCompilerDefines",03,22,a4,4a),
	HX_("getArgs",13,3d,f7,12),
	HX_("createEmbedFile",59,a2,97,44),
	HX_("cleanTmp",ce,86,6f,2e),
	HX_("compile",73,25,6f,83),
	HX_("createCompilerVersion",9d,0d,f0,84),
	HX_("getObjName",ec,7b,7b,c2),
	HX_("getHashedName",ce,6c,83,28),
	HX_("getCacheString",bd,a7,6f,b7),
	HX_("getCachedObjName",aa,07,bc,12),
	HX_("needsPchObj",1f,7f,3d,be),
	HX_("getPchCompileFlags",93,df,76,b7),
	HX_("getPchDir",6e,86,ec,89),
	HX_("precompile",b0,5f,6b,24),
	HX_("setPCH",93,c4,6c,6f),
	HX_("initPrecompile",e0,12,36,49),
	::String(null()) };

::hx::Class Compiler_obj::__mClass;

void Compiler_obj::__register()
{
	Compiler_obj _hx_dummy;
	Compiler_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Compiler",bf,5b,83,57);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Compiler_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Compiler_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Compiler_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Compiler_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

