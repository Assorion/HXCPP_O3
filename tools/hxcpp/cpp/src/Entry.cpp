// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_Entry
#include <Entry.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e6ce264c4c1b4ae3_12_new,"Entry","new",0xa55f1a44,"Entry.new","Profile.hx",12,0xd2d85d55)
HX_LOCAL_STACK_FRAME(_hx_pos_e6ce264c4c1b4ae3_22_start,"Entry","start",0xf9e7ff46,"Entry.start","Profile.hx",22,0xd2d85d55)
HX_LOCAL_STACK_FRAME(_hx_pos_e6ce264c4c1b4ae3_31_stop,"Entry","stop",0x11314d9e,"Entry.stop","Profile.hx",31,0xd2d85d55)
HX_LOCAL_STACK_FRAME(_hx_pos_e6ce264c4c1b4ae3_39_find,"Entry","find",0x08912dd5,"Entry.find","Profile.hx",39,0xd2d85d55)
HX_LOCAL_STACK_FRAME(_hx_pos_e6ce264c4c1b4ae3_60_dump,"Entry","dump",0x0747dad0,"Entry.dump","Profile.hx",60,0xd2d85d55)
HX_LOCAL_STACK_FRAME(_hx_pos_e6ce264c4c1b4ae3_56_timeString,"Entry","timeString",0xe4c6eb5a,"Entry.timeString","Profile.hx",56,0xd2d85d55)

void Entry_obj::__construct(::String inName){
            	HX_STACKFRAME(&_hx_pos_e6ce264c4c1b4ae3_12_new)
HXLINE(  13)		this->name = inName;
HXLINE(  14)		this->total = ((Float)0.0);
HXLINE(  15)		this->children = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  16)		this->entry =  ::__time_stamp();
HXLINE(  17)		this->running = true;
HXLINE(  18)		this->current = null();
            	}

Dynamic Entry_obj::__CreateEmpty() { return new Entry_obj; }

void *Entry_obj::_hx_vtable = 0;

Dynamic Entry_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Entry_obj > _hx_result = new Entry_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Entry_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4face5ca;
}

void Entry_obj::start(){
            	HX_STACKFRAME(&_hx_pos_e6ce264c4c1b4ae3_22_start)
HXLINE(  23)		if (this->running) {
HXLINE(  24)			::haxe::Log_obj::trace((HX_("===== Restarted ",55,ec,c5,d2) + this->name),::hx::SourceInfo(HX_("Profile.hx",55,5d,d8,d2),24,HX_("Entry",52,e8,b3,03),HX_("start",62,74,0b,84)));
            		}
HXLINE(  25)		this->entry =  ::__time_stamp();
HXLINE(  26)		this->running = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Entry_obj,start,(void))

void Entry_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_e6ce264c4c1b4ae3_31_stop)
HXDLIN(  31)		if (this->running) {
HXLINE(  33)			 ::Entry _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  33)			Float _hx_tmp1 = _hx_tmp->total;
HXDLIN(  33)			Float _hx_tmp2 =  ::__time_stamp();
HXDLIN(  33)			_hx_tmp->total = (_hx_tmp1 + (_hx_tmp2 - this->entry));
HXLINE(  34)			this->running = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Entry_obj,stop,(void))

 ::Entry Entry_obj::find(::String inName){
            	HX_GC_STACKFRAME(&_hx_pos_e6ce264c4c1b4ae3_39_find)
HXLINE(  40)		{
HXLINE(  40)			int _g = 0;
HXDLIN(  40)			::Array< ::Dynamic> _g1 = this->children;
HXDLIN(  40)			while((_g < _g1->length)){
HXLINE(  40)				 ::Entry c = _g1->__get(_g).StaticCast<  ::Entry >();
HXDLIN(  40)				_g = (_g + 1);
HXLINE(  41)				if ((c->name == inName)) {
HXLINE(  43)					this->current = c;
HXLINE(  44)					this->current->start();
HXLINE(  45)					return this->current;
            				}
            			}
            		}
HXLINE(  47)		 ::Entry result =  ::Entry_obj::__alloc( HX_CTX ,inName);
HXLINE(  48)		this->children->push(result);
HXLINE(  49)		this->current = result;
HXLINE(  50)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entry_obj,find,return )

void Entry_obj::dump(::String __o_indent){
            		::String indent = __o_indent;
            		if (::hx::IsNull(__o_indent)) indent = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_e6ce264c4c1b4ae3_60_dump)
HXLINE(  61)		if (this->running) {
HXLINE(  62)			::haxe::Log_obj::trace(HX_("========== running?",a0,9a,ff,62),::hx::SourceInfo(HX_("Profile.hx",55,5d,d8,d2),62,HX_("Entry",52,e8,b3,03),HX_("dump",34,7d,72,42)));
            		}
HXLINE(  63)		::String _hx_tmp = ((indent + this->name) + HX_(" : ",c6,7a,18,00));
HXDLIN(  63)		::Sys_obj::println((_hx_tmp + ::Entry_obj::timeString(this->total)));
HXLINE(  64)		{
HXLINE(  64)			int _g = 0;
HXDLIN(  64)			::Array< ::Dynamic> _g1 = this->children;
HXDLIN(  64)			while((_g < _g1->length)){
HXLINE(  64)				 ::Entry c = _g1->__get(_g).StaticCast<  ::Entry >();
HXDLIN(  64)				_g = (_g + 1);
HXLINE(  65)				c->dump((indent + HX_("  ",00,1c,00,00)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Entry_obj,dump,(void))

::String Entry_obj::timeString(Float t){
            	HX_STACKFRAME(&_hx_pos_e6ce264c4c1b4ae3_56_timeString)
HXDLIN(  56)		return (::Std_obj::_hx_int((t * ((Float)1000.0))) + HX_("ms",66,5f,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Entry_obj,timeString,return )


::hx::ObjectPtr< Entry_obj > Entry_obj::__new(::String inName) {
	::hx::ObjectPtr< Entry_obj > __this = new Entry_obj();
	__this->__construct(inName);
	return __this;
}

::hx::ObjectPtr< Entry_obj > Entry_obj::__alloc(::hx::Ctx *_hx_ctx,::String inName) {
	Entry_obj *__this = (Entry_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Entry_obj), true, "Entry"));
	*(void **)__this = Entry_obj::_hx_vtable;
	__this->__construct(inName);
	return __this;
}

Entry_obj::Entry_obj()
{
}

void Entry_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Entry);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(entry,"entry");
	HX_MARK_MEMBER_NAME(total,"total");
	HX_MARK_MEMBER_NAME(running,"running");
	HX_MARK_MEMBER_NAME(children,"children");
	HX_MARK_MEMBER_NAME(current,"current");
	HX_MARK_END_CLASS();
}

void Entry_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(entry,"entry");
	HX_VISIT_MEMBER_NAME(total,"total");
	HX_VISIT_MEMBER_NAME(running,"running");
	HX_VISIT_MEMBER_NAME(children,"children");
	HX_VISIT_MEMBER_NAME(current,"current");
}

::hx::Val Entry_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"stop") ) { return ::hx::Val( stop_dyn() ); }
		if (HX_FIELD_EQ(inName,"find") ) { return ::hx::Val( find_dyn() ); }
		if (HX_FIELD_EQ(inName,"dump") ) { return ::hx::Val( dump_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"entry") ) { return ::hx::Val( entry ); }
		if (HX_FIELD_EQ(inName,"total") ) { return ::hx::Val( total ); }
		if (HX_FIELD_EQ(inName,"start") ) { return ::hx::Val( start_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"running") ) { return ::hx::Val( running ); }
		if (HX_FIELD_EQ(inName,"current") ) { return ::hx::Val( current ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"children") ) { return ::hx::Val( children ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Entry_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"timeString") ) { outValue = timeString_dyn(); return true; }
	}
	return false;
}

::hx::Val Entry_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"entry") ) { entry=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"total") ) { total=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"running") ) { running=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"current") ) { current=inValue.Cast<  ::Entry >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"children") ) { children=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Entry_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("entry",72,78,86,70));
	outFields->push(HX_("total",c4,53,32,14));
	outFields->push(HX_("running",ff,6d,69,eb));
	outFields->push(HX_("children",3f,19,6a,70));
	outFields->push(HX_("current",39,9c,e3,cb));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Entry_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(Entry_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsFloat,(int)offsetof(Entry_obj,entry),HX_("entry",72,78,86,70)},
	{::hx::fsFloat,(int)offsetof(Entry_obj,total),HX_("total",c4,53,32,14)},
	{::hx::fsBool,(int)offsetof(Entry_obj,running),HX_("running",ff,6d,69,eb)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Entry_obj,children),HX_("children",3f,19,6a,70)},
	{::hx::fsObject /*  ::Entry */ ,(int)offsetof(Entry_obj,current),HX_("current",39,9c,e3,cb)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Entry_obj_sStaticStorageInfo = 0;
#endif

static ::String Entry_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("entry",72,78,86,70),
	HX_("total",c4,53,32,14),
	HX_("running",ff,6d,69,eb),
	HX_("children",3f,19,6a,70),
	HX_("current",39,9c,e3,cb),
	HX_("start",62,74,0b,84),
	HX_("stop",02,f0,5b,4c),
	HX_("find",39,d0,bb,43),
	HX_("dump",34,7d,72,42),
	::String(null()) };

::hx::Class Entry_obj::__mClass;

static ::String Entry_obj_sStaticFields[] = {
	HX_("timeString",be,70,f9,ae),
	::String(null())
};

void Entry_obj::__register()
{
	Entry_obj _hx_dummy;
	Entry_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Entry",52,e8,b3,03);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Entry_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Entry_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Entry_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Entry_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Entry_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Entry_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

