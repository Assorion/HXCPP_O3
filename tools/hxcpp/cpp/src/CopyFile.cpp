// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_CopyFile
#include <CopyFile.h>
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Log
#include <Log.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3abf11b2c79b7501_12_new,"CopyFile","new",0x11115e63,"CopyFile.new","CopyFile.hx",12,0x3979be6d)
HX_LOCAL_STACK_FRAME(_hx_pos_3abf11b2c79b7501_21_copy,"CopyFile","copy",0xd6e37052,"CopyFile.copy","CopyFile.hx",21,0x3979be6d)
HX_LOCAL_STACK_FRAME(_hx_pos_3abf11b2c79b7501_29_copyFile,"CopyFile","copyFile",0xcacbfbee,"CopyFile.copyFile","CopyFile.hx",29,0x3979be6d)

void CopyFile_obj::__construct(::String inName,::String inFrom,bool inAlowMissing,::String inOverwrite,::String inToolId){
            	HX_STACKFRAME(&_hx_pos_3abf11b2c79b7501_12_new)
HXLINE(  13)		this->name = inName;
HXLINE(  14)		this->from = inFrom;
HXLINE(  15)		this->toolId = inToolId;
HXLINE(  16)		this->allowMissing = inAlowMissing;
HXLINE(  17)		this->overwrite = inOverwrite;
            	}

Dynamic CopyFile_obj::__CreateEmpty() { return new CopyFile_obj; }

void *CopyFile_obj::_hx_vtable = 0;

Dynamic CopyFile_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CopyFile_obj > _hx_result = new CopyFile_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool CopyFile_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x547ec915;
}

void CopyFile_obj::copy(::String inTo){
            	HX_STACKFRAME(&_hx_pos_3abf11b2c79b7501_21_copy)
HXLINE(  22)		::String fromFile = ((this->from + HX_("/",2f,00,00,00)) + this->name);
HXLINE(  23)		::String toFile = (inTo + this->name);
HXLINE(  24)		::CopyFile_obj::copyFile(fromFile,toFile,this->allowMissing,this->overwrite,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(CopyFile_obj,copy,(void))

void CopyFile_obj::copyFile(::String fromFile,::String toFile,::hx::Null< bool >  __o_allowMissing,::String __o_overwrite,::hx::Null< bool >  __o_addExePermission){
            		bool allowMissing = __o_allowMissing.Default(false);
            		::String overwrite = __o_overwrite;
            		if (::hx::IsNull(__o_overwrite)) overwrite = HX_("always",cf,0e,d7,46);
            		bool addExePermission = __o_addExePermission.Default(false);
            	HX_STACKFRAME(&_hx_pos_3abf11b2c79b7501_29_copyFile)
HXLINE(  30)		if (!(::sys::FileSystem_obj::exists(fromFile))) {
HXLINE(  32)			if (allowMissing) {
HXLINE(  34)				::Log_obj::info(HX_("",00,00,00,00),((HX_("Missing \"",c8,e0,92,4f) + fromFile) + HX_("\" - ignore",63,ac,66,bb)));
HXLINE(  35)				return;
            			}
HXLINE(  37)			::Log_obj::error((HX_("Error - source file does not exist ",d3,91,9c,c8) + fromFile),null(),null(),null());
            		}
HXLINE(  39)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  41)			::Log_obj::info(HX_("",00,00,00,00),((((HX_("Copy \"",17,63,c7,fd) + fromFile) + HX_("\" to \"",fb,ea,f5,51)) + toFile) + HX_("\"",22,00,00,00)));
HXLINE(  43)			bool applyCopy = true;
HXLINE(  44)			::String _hx_switch_0 = overwrite;
            			if (  (_hx_switch_0==HX_("always",cf,0e,d7,46)) ){
HXLINE(  61)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("ifNewer",b0,f3,12,03)) ){
HXLINE(  47)				bool _hx_tmp;
HXDLIN(  47)				if (::sys::FileSystem_obj::exists(toFile)) {
HXLINE(  48)					Float _hx_tmp1 = ( ( ::Date)(::sys::FileSystem_obj::stat(fromFile)->__Field(HX_("mtime",fa,06,aa,0f),::hx::paccDynamic)) )->getTime();
HXLINE(  47)					_hx_tmp = ((_hx_tmp1 - ( ( ::Date)(::sys::FileSystem_obj::stat(toFile)->__Field(HX_("mtime",fa,06,aa,0f),::hx::paccDynamic)) )->getTime()) <= 0);
            				}
            				else {
HXLINE(  47)					_hx_tmp = false;
            				}
HXDLIN(  47)				if (_hx_tmp) {
HXLINE(  50)					::Log_obj::info(HX_("",00,00,00,00),((HX_("The \"",93,aa,b3,a2) + fromFile) + HX_("\" is older or it hasn't changes. Skip copy",24,14,4c,c7)));
HXLINE(  51)					applyCopy = false;
            				}
HXLINE(  47)				goto _hx_goto_2;
            			}
            			if (  (_hx_switch_0==HX_("never",8c,3e,30,99)) ){
HXLINE(  55)				if (::sys::FileSystem_obj::exists(toFile)) {
HXLINE(  57)					::Log_obj::info(HX_("",00,00,00,00),((HX_("The \"",93,aa,b3,a2) + toFile) + HX_("\" file exists. Skip copy",a2,77,95,b8)));
HXLINE(  58)					applyCopy = false;
            				}
HXLINE(  55)				goto _hx_goto_2;
            			}
            			/* default */{
HXLINE(  64)				::Log_obj::info(HX_("",00,00,00,00),((((HX_("The Overwrite option \"",fb,7c,83,da) + overwrite) + HX_("\" is not supported. ",5b,8c,a0,7f)) + ((((((HX_("Possible values: {",24,ee,11,c7) + HX_("always",cf,0e,d7,46)) + HX_(", ",74,26,00,00)) + HX_("ifNewer",b0,f3,12,03)) + HX_(", ",74,26,00,00)) + HX_("never",8c,3e,30,99)) + HX_("}. ",ef,01,5f,00))) + ((HX_("Applying \"",56,b5,eb,cc) + HX_("always",cf,0e,d7,46)) + HX_("\" by default",b6,98,e8,e9))));
            			}
            			_hx_goto_2:;
HXLINE(  69)			if (applyCopy) {
HXLINE(  71)				::sys::io::File_obj::copy(fromFile,toFile);
HXLINE(  72)				if (addExePermission) {
HXLINE(  74)					::Log_obj::info(HX_("",00,00,00,00),(HX_("chmod 755 ",ac,df,2d,fe) + toFile));
HXLINE(  75)					::Sys_obj::command(HX_("chmod",3d,b5,bc,45),::Array_obj< ::String >::__new(2)->init(0,HX_("755",57,ea,29,00))->init(1,toFile));
            				}
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(  79)				{
HXLINE(  79)					null();
            				}
HXDLIN(  79)				 ::Dynamic e = _g;
HXLINE(  80)				{
HXLINE(  81)					if (allowMissing) {
HXLINE(  83)						::Log_obj::info(HX_("",00,00,00,00),((HX_("Could not copy to \"",bc,6b,e5,4a) + toFile) + HX_("\" - ignore",63,ac,66,bb)));
HXLINE(  84)						return;
            					}
HXLINE(  86)					::Log_obj::error(((((HX_("Error ",78,f7,fc,85) + ::Std_obj::string(e)) + HX_(" - could not copy to \"",49,d8,06,fe)) + toFile) + HX_("\"",22,00,00,00)),null(),null(),null());
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(CopyFile_obj,copyFile,(void))


CopyFile_obj::CopyFile_obj()
{
}

void CopyFile_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CopyFile);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(from,"from");
	HX_MARK_MEMBER_NAME(toolId,"toolId");
	HX_MARK_MEMBER_NAME(allowMissing,"allowMissing");
	HX_MARK_MEMBER_NAME(overwrite,"overwrite");
	HX_MARK_END_CLASS();
}

void CopyFile_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(from,"from");
	HX_VISIT_MEMBER_NAME(toolId,"toolId");
	HX_VISIT_MEMBER_NAME(allowMissing,"allowMissing");
	HX_VISIT_MEMBER_NAME(overwrite,"overwrite");
}

::hx::Val CopyFile_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"from") ) { return ::hx::Val( from ); }
		if (HX_FIELD_EQ(inName,"copy") ) { return ::hx::Val( copy_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"toolId") ) { return ::hx::Val( toolId ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"overwrite") ) { return ::hx::Val( overwrite ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"allowMissing") ) { return ::hx::Val( allowMissing ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CopyFile_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"copyFile") ) { outValue = copyFile_dyn(); return true; }
	}
	return false;
}

::hx::Val CopyFile_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"from") ) { from=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"toolId") ) { toolId=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"overwrite") ) { overwrite=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"allowMissing") ) { allowMissing=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CopyFile_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("from",6a,a5,c2,43));
	outFields->push(HX_("toolId",53,21,91,94));
	outFields->push(HX_("allowMissing",dd,d5,bd,74));
	outFields->push(HX_("overwrite",0b,8b,ed,a0));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CopyFile_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(CopyFile_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsString,(int)offsetof(CopyFile_obj,from),HX_("from",6a,a5,c2,43)},
	{::hx::fsString,(int)offsetof(CopyFile_obj,toolId),HX_("toolId",53,21,91,94)},
	{::hx::fsBool,(int)offsetof(CopyFile_obj,allowMissing),HX_("allowMissing",dd,d5,bd,74)},
	{::hx::fsString,(int)offsetof(CopyFile_obj,overwrite),HX_("overwrite",0b,8b,ed,a0)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CopyFile_obj_sStaticStorageInfo = 0;
#endif

static ::String CopyFile_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("from",6a,a5,c2,43),
	HX_("toolId",53,21,91,94),
	HX_("allowMissing",dd,d5,bd,74),
	HX_("overwrite",0b,8b,ed,a0),
	HX_("copy",b5,bb,c4,41),
	::String(null()) };

::hx::Class CopyFile_obj::__mClass;

static ::String CopyFile_obj_sStaticFields[] = {
	HX_("copyFile",d1,34,5a,c8),
	::String(null())
};

void CopyFile_obj::__register()
{
	CopyFile_obj _hx_dummy;
	CopyFile_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("CopyFile",f1,f0,0b,a2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CopyFile_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CopyFile_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CopyFile_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CopyFile_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CopyFile_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CopyFile_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

