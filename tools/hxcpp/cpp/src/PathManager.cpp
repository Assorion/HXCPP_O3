// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_BuildTool
#include <BuildTool.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Log
#include <Log.h>
#endif
#ifndef INCLUDED_PathManager
#include <PathManager.h>
#endif
#ifndef INCLUDED_ProcessManager
#include <ProcessManager.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_391e3e2b18308daf_10_combine,"PathManager","combine",0xab37af39,"PathManager.combine","PathManager.hx",10,0x24191096)
HX_LOCAL_STACK_FRAME(_hx_pos_391e3e2b18308daf_54_escape,"PathManager","escape",0x99a33407,"PathManager.escape","PathManager.hx",54,0x24191096)
HX_LOCAL_STACK_FRAME(_hx_pos_391e3e2b18308daf_71_expand,"PathManager","expand",0x833bdee0,"PathManager.expand","PathManager.hx",71,0x24191096)
HX_LOCAL_STACK_FRAME(_hx_pos_391e3e2b18308daf_89_getHaxelib,"PathManager","getHaxelib",0x6d94e86f,"PathManager.getHaxelib","PathManager.hx",89,0x24191096)
HX_LOCAL_STACK_FRAME(_hx_pos_391e3e2b18308daf_201_isAbsolute,"PathManager","isAbsolute",0x53f78c07,"PathManager.isAbsolute","PathManager.hx",201,0x24191096)
HX_LOCAL_STACK_FRAME(_hx_pos_391e3e2b18308daf_220_mkdir,"PathManager","mkdir",0x80cc4ee9,"PathManager.mkdir","PathManager.hx",220,0x24191096)
HX_LOCAL_STACK_FRAME(_hx_pos_391e3e2b18308daf_265_removeDirectory,"PathManager","removeDirectory",0xf0f75c43,"PathManager.removeDirectory","PathManager.hx",265,0x24191096)
HX_LOCAL_STACK_FRAME(_hx_pos_391e3e2b18308daf_306_removeFile,"PathManager","removeFile",0xd68db466,"PathManager.removeFile","PathManager.hx",306,0x24191096)
HX_LOCAL_STACK_FRAME(_hx_pos_391e3e2b18308daf_314_removeFilesWithExtension,"PathManager","removeFilesWithExtension",0xc59a2b0c,"PathManager.removeFilesWithExtension","PathManager.hx",314,0x24191096)
HX_LOCAL_STACK_FRAME(_hx_pos_391e3e2b18308daf_325_resetDirectoryCache,"PathManager","resetDirectoryCache",0x5ff2aa7e,"PathManager.resetDirectoryCache","PathManager.hx",325,0x24191096)
HX_LOCAL_STACK_FRAME(_hx_pos_391e3e2b18308daf_329_standardize,"PathManager","standardize",0x5a89adf1,"PathManager.standardize","PathManager.hx",329,0x24191096)
HX_LOCAL_STACK_FRAME(_hx_pos_391e3e2b18308daf_347_clean,"PathManager","clean",0xbf7473c3,"PathManager.clean","PathManager.hx",347,0x24191096)
HX_LOCAL_STACK_FRAME(_hx_pos_391e3e2b18308daf_5_boot,"PathManager","boot",0x24f12738,"PathManager.boot","PathManager.hx",5,0x24191096)
HX_LOCAL_STACK_FRAME(_hx_pos_391e3e2b18308daf_6_boot,"PathManager","boot",0x24f12738,"PathManager.boot","PathManager.hx",6,0x24191096)

void PathManager_obj::__construct() { }

Dynamic PathManager_obj::__CreateEmpty() { return new PathManager_obj; }

void *PathManager_obj::_hx_vtable = 0;

Dynamic PathManager_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PathManager_obj > _hx_result = new PathManager_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PathManager_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x086b1c9c;
}

 ::haxe::ds::StringMap PathManager_obj::directoryCache;

 ::haxe::ds::StringMap PathManager_obj::haxelibPaths;

::String PathManager_obj::combine(::String firstPath,::String secondPath){
            	HX_STACKFRAME(&_hx_pos_391e3e2b18308daf_10_combine)
HXDLIN(  10)		bool _hx_tmp;
HXDLIN(  10)		if (::hx::IsNotNull( firstPath )) {
HXDLIN(  10)			_hx_tmp = (firstPath == HX_("",00,00,00,00));
            		}
            		else {
HXDLIN(  10)			_hx_tmp = true;
            		}
HXDLIN(  10)		if (_hx_tmp) {
HXLINE(  12)			return secondPath;
            		}
            		else {
HXLINE(  14)			bool _hx_tmp1;
HXDLIN(  14)			bool _hx_tmp2;
HXDLIN(  14)			if (::hx::IsNotNull( secondPath )) {
HXLINE(  14)				_hx_tmp2 = (secondPath != HX_("",00,00,00,00));
            			}
            			else {
HXLINE(  14)				_hx_tmp2 = false;
            			}
HXDLIN(  14)			if (_hx_tmp2) {
HXLINE(  14)				_hx_tmp1 = (secondPath != HX_(".",2e,00,00,00));
            			}
            			else {
HXLINE(  14)				_hx_tmp1 = false;
            			}
HXDLIN(  14)			if (_hx_tmp1) {
HXLINE(  16)				if (::BuildTool_obj::isWindows) {
HXLINE(  18)					if ((secondPath.indexOf(HX_(":",3a,00,00,00),null()) == 1)) {
HXLINE(  20)						return secondPath;
            					}
            				}
            				else {
HXLINE(  25)					if ((secondPath.substr(0,1) == HX_("/",2f,00,00,00))) {
HXLINE(  27)						return secondPath;
            					}
            				}
HXLINE(  31)				bool firstSlash;
HXDLIN(  31)				if ((firstPath.substr(-1,null()) != HX_("/",2f,00,00,00))) {
HXLINE(  31)					firstSlash = (firstPath.substr(-1,null()) == HX_("\\",5c,00,00,00));
            				}
            				else {
HXLINE(  31)					firstSlash = true;
            				}
HXLINE(  32)				bool secondSlash;
HXDLIN(  32)				if ((secondPath.substr(0,1) != HX_("/",2f,00,00,00))) {
HXLINE(  32)					secondSlash = (secondPath.substr(0,1) == HX_("\\",5c,00,00,00));
            				}
            				else {
HXLINE(  32)					secondSlash = true;
            				}
HXLINE(  34)				bool _hx_tmp3;
HXDLIN(  34)				if (firstSlash) {
HXLINE(  34)					_hx_tmp3 = secondSlash;
            				}
            				else {
HXLINE(  34)					_hx_tmp3 = false;
            				}
HXDLIN(  34)				if (_hx_tmp3) {
HXLINE(  36)					return (firstPath + secondPath.substr(1,null()));
            				}
            				else {
HXLINE(  38)					bool _hx_tmp4;
HXDLIN(  38)					if (!(firstSlash)) {
HXLINE(  38)						_hx_tmp4 = !(secondSlash);
            					}
            					else {
HXLINE(  38)						_hx_tmp4 = false;
            					}
HXDLIN(  38)					if (_hx_tmp4) {
HXLINE(  40)						return ((firstPath + HX_("/",2f,00,00,00)) + secondPath);
            					}
            					else {
HXLINE(  44)						return (firstPath + secondPath);
            					}
            				}
            			}
            			else {
HXLINE(  49)				return firstPath;
            			}
            		}
HXLINE(  10)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PathManager_obj,combine,return )

::String PathManager_obj::escape(::String path){
            	HX_STACKFRAME(&_hx_pos_391e3e2b18308daf_54_escape)
HXLINE(  55)		if (!(::BuildTool_obj::isWindows)) {
HXLINE(  57)			path = ::StringTools_obj::replace(path,HX_("\\ ",44,50,00,00),HX_(" ",20,00,00,00));
HXLINE(  58)			path = ::StringTools_obj::replace(path,HX_(" ",20,00,00,00),HX_("\\ ",44,50,00,00));
HXLINE(  59)			path = ::StringTools_obj::replace(path,HX_("\\'",4b,50,00,00),HX_("'",27,00,00,00));
HXLINE(  60)			path = ::StringTools_obj::replace(path,HX_("'",27,00,00,00),HX_("\\'",4b,50,00,00));
            		}
            		else {
HXLINE(  64)			path = ::StringTools_obj::replace(path,HX_("^,",0e,52,00,00),HX_(",",2c,00,00,00));
HXLINE(  65)			path = ::StringTools_obj::replace(path,HX_(",",2c,00,00,00),HX_("^,",0e,52,00,00));
            		}
HXLINE(  67)		return ::PathManager_obj::expand(path);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PathManager_obj,escape,return )

::String PathManager_obj::expand(::String path){
            	HX_STACKFRAME(&_hx_pos_391e3e2b18308daf_71_expand)
HXLINE(  72)		if (::hx::IsNull( path )) {
HXLINE(  74)			path = HX_("",00,00,00,00);
            		}
HXLINE(  77)		if (!(::BuildTool_obj::isWindows)) {
HXLINE(  79)			if (::StringTools_obj::startsWith(path,HX_("~/",f1,6d,00,00))) {
HXLINE(  81)				::String path1 = (::Sys_obj::getEnv(HX_("HOME",1f,92,d3,2f)) + HX_("/",2f,00,00,00));
HXDLIN(  81)				path = (path1 + path.substr(2,null()));
            			}
            		}
HXLINE(  85)		return path;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PathManager_obj,expand,return )

::String PathManager_obj::getHaxelib(::String haxelib,::String __o_version,::hx::Null< bool >  __o_validate,::hx::Null< bool >  __o_clearCache){
            		::String version = __o_version;
            		if (::hx::IsNull(__o_version)) version = HX_("",00,00,00,00);
            		bool validate = __o_validate.Default(true);
            		bool clearCache = __o_clearCache.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_391e3e2b18308daf_89_getHaxelib)
HXLINE(  90)		::String name = haxelib;
HXLINE(  91)		if ((version != HX_("",00,00,00,00))) {
HXLINE(  93)			name = (name + (HX_(":",3a,00,00,00) + version));
            		}
HXLINE(  96)		if (clearCache) {
HXLINE(  98)			::PathManager_obj::haxelibPaths->remove(name);
            		}
HXLINE( 101)		if (!(::PathManager_obj::haxelibPaths->exists(name))) {
HXLINE( 103)			bool cache = ::Log_obj::verbose;
HXLINE( 104)			::Log_obj::verbose = false;
HXLINE( 105)			::String output = HX_("",00,00,00,00);
HXLINE( 107)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 109)				output = ::ProcessManager_obj::runProcess(::Sys_obj::getEnv(HX_("HAXEPATH",cb,b4,43,c4)),HX_("haxelib",df,b6,80,08),::Array_obj< ::String >::__new(2)->init(0,HX_("path",a5,e5,51,4a))->init(1,name),true,false,null(),null(),null());
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE( 111)					{
HXLINE( 111)						null();
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 113)			::Log_obj::verbose = cache;
HXLINE( 115)			::Array< ::String > lines = output.split(HX_("\n",0a,00,00,00));
HXLINE( 116)			::String result = HX_("",00,00,00,00);
HXLINE( 117)			 ::EReg re =  ::EReg_obj::__alloc( HX_CTX ,((HX_("^-D ",2b,6f,44,3e) + haxelib) + HX_("(=.*)?$",7d,89,70,7b)),HX_("",00,00,00,00));
HXLINE( 118)			{
HXLINE( 118)				int _g1 = 1;
HXDLIN( 118)				int _g2 = lines->length;
HXDLIN( 118)				while((_g1 < _g2)){
HXLINE( 118)					_g1 = (_g1 + 1);
HXDLIN( 118)					int i = (_g1 - 1);
HXLINE( 120)					if (re->match(::StringTools_obj::trim(lines->__get(i)))) {
HXLINE( 122)						result = ::StringTools_obj::trim(lines->__get((i - 1)));
            					}
            				}
            			}
HXLINE( 126)			if ((result == HX_("",00,00,00,00))) {
HXLINE( 128)				int _g3 = 0;
HXDLIN( 128)				while((_g3 < lines->length)){
HXLINE( 128)					::String line = lines->__get(_g3);
HXDLIN( 128)					_g3 = (_g3 + 1);
HXLINE( 130)					bool _hx_tmp;
HXDLIN( 130)					if ((line != HX_("",00,00,00,00))) {
HXLINE( 130)						_hx_tmp = (line.substr(0,1) != HX_("-",2d,00,00,00));
            					}
            					else {
HXLINE( 130)						_hx_tmp = false;
            					}
HXDLIN( 130)					if (_hx_tmp) {
HXLINE( 132)						try {
            							HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 134)							if (::sys::FileSystem_obj::exists(line)) {
HXLINE( 136)								result = line;
            							}
            						} catch( ::Dynamic _hx_e) {
            							if (_hx_e.IsClass<  ::Dynamic >() ){
            								HX_STACK_BEGIN_CATCH
            								 ::Dynamic _g4 = _hx_e;
HXLINE( 139)								{
HXLINE( 139)									null();
            								}
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
            					}
            				}
            			}
HXLINE( 144)			if (validate) {
HXLINE( 146)				if ((result == HX_("",00,00,00,00))) {
HXLINE( 148)					if ((output.indexOf(HX_("does not have",dc,fc,4e,07),null()) > -1)) {
HXLINE( 150)						::String directoryName = HX_("",00,00,00,00);
HXLINE( 151)						if (::BuildTool_obj::isWindows) {
HXLINE( 153)							directoryName = HX_("Windows",63,06,c6,b5);
            						}
            						else {
HXLINE( 155)							if (::BuildTool_obj::isMac) {
HXLINE( 157)								if (::BuildTool_obj::is64) {
HXLINE( 157)									directoryName = HX_("Mac64",6d,ab,43,96);
            								}
            								else {
HXLINE( 157)									directoryName = HX_("Mac",6f,c2,3a,00);
            								}
            							}
            							else {
HXLINE( 161)								if (::BuildTool_obj::is64) {
HXLINE( 161)									directoryName = HX_("Linux64",12,28,9d,f7);
            								}
            								else {
HXLINE( 161)									directoryName = HX_("Linux",d4,5b,2f,08);
            								}
            							}
            						}
HXLINE( 164)						::Log_obj::error(((((HX_("haxelib \"",a1,88,43,b3) + haxelib) + HX_("\" does not have an \"ndll/",68,64,dd,cd)) + directoryName) + HX_("\" directory",ef,2c,1e,37)),null(),null(),null());
            					}
            					else {
HXLINE( 168)						if ((version != HX_("",00,00,00,00))) {
HXLINE( 170)							::Log_obj::error(((((HX_("Could not find haxelib \"",46,48,a5,87) + haxelib) + HX_("\" version \"",9c,33,65,31)) + version) + HX_("\", does it need to be installed?",23,ab,b4,7d)),null(),null(),null());
            						}
            						else {
HXLINE( 174)							::Log_obj::error(((HX_("Could not find haxelib \"",46,48,a5,87) + haxelib) + HX_("\", does it need to be installed?",23,ab,b4,7d)),null(),null(),null());
            						}
            					}
            				}
            			}
HXLINE( 179)			if ((result != HX_("",00,00,00,00))) {
HXLINE( 181)				::String rootPath = result;
HXLINE( 182)				int depth = 0;
HXLINE( 183)				while(true){
HXLINE( 183)					bool _hx_tmp1;
HXDLIN( 183)					bool _hx_tmp2;
HXDLIN( 183)					if (::sys::FileSystem_obj::exists(rootPath)) {
HXLINE( 183)						_hx_tmp2 = ::sys::FileSystem_obj::isDirectory(rootPath);
            					}
            					else {
HXLINE( 183)						_hx_tmp2 = false;
            					}
HXDLIN( 183)					if (_hx_tmp2) {
HXLINE( 183)						_hx_tmp1 = (depth < 10);
            					}
            					else {
HXLINE( 183)						_hx_tmp1 = false;
            					}
HXDLIN( 183)					if (!(_hx_tmp1)) {
HXLINE( 183)						goto _hx_goto_5;
            					}
HXLINE( 185)					if (::sys::FileSystem_obj::exists((rootPath + HX_("/haxelib.json",c6,fc,ee,d5)))) {
HXLINE( 187)						result = rootPath;
HXLINE( 188)						goto _hx_goto_5;
            					}
HXLINE( 190)					depth = (depth + 1);
HXLINE( 191)					rootPath = ::haxe::io::Path_obj::directory(rootPath);
            				}
            				_hx_goto_5:;
            			}
HXLINE( 194)			::PathManager_obj::haxelibPaths->set(name,result);
            		}
HXLINE( 197)		return ::PathManager_obj::haxelibPaths->get_string(name);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(PathManager_obj,getHaxelib,return )

bool PathManager_obj::isAbsolute(::String path){
            	HX_STACKFRAME(&_hx_pos_391e3e2b18308daf_201_isAbsolute)
HXLINE( 202)		if (::BuildTool_obj::isWindows) {
HXLINE( 204)			bool _hx_tmp;
HXDLIN( 204)			bool _hx_tmp1;
HXDLIN( 204)			bool _hx_tmp2;
HXDLIN( 204)			if (::hx::IsNotNull( path )) {
HXLINE( 204)				_hx_tmp2 = (path.length > 2);
            			}
            			else {
HXLINE( 204)				_hx_tmp2 = false;
            			}
HXDLIN( 204)			if (_hx_tmp2) {
HXLINE( 204)				_hx_tmp1 = (path.charAt(1) == HX_(":",3a,00,00,00));
            			}
            			else {
HXLINE( 204)				_hx_tmp1 = false;
            			}
HXDLIN( 204)			if (_hx_tmp1) {
HXLINE( 204)				if ((path.charAt(2) != HX_("\\",5c,00,00,00))) {
HXLINE( 204)					_hx_tmp = (path.charAt(2) == HX_("/",2f,00,00,00));
            				}
            				else {
HXLINE( 204)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE( 204)				_hx_tmp = false;
            			}
HXDLIN( 204)			if (_hx_tmp) {
HXLINE( 206)				return true;
            			}
            		}
            		else {
HXLINE( 211)			bool _hx_tmp3;
HXDLIN( 211)			if (!(::StringTools_obj::startsWith(path,HX_("/",2f,00,00,00)))) {
HXLINE( 211)				_hx_tmp3 = ::StringTools_obj::startsWith(path,HX_("\\",5c,00,00,00));
            			}
            			else {
HXLINE( 211)				_hx_tmp3 = true;
            			}
HXDLIN( 211)			if (_hx_tmp3) {
HXLINE( 213)				return true;
            			}
            		}
HXLINE( 216)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PathManager_obj,isAbsolute,return )

void PathManager_obj::mkdir(::String directory,::hx::Null< bool >  __o_skipFilePart){
            		bool skipFilePart = __o_skipFilePart.Default(false);
            	HX_STACKFRAME(&_hx_pos_391e3e2b18308daf_220_mkdir)
HXLINE( 221)		directory = ::StringTools_obj::replace(directory,HX_("\\",5c,00,00,00),HX_("/",2f,00,00,00));
HXLINE( 222)		::String total = HX_("",00,00,00,00);
HXLINE( 224)		if ((directory.substr(0,1) == HX_("/",2f,00,00,00))) {
HXLINE( 226)			total = HX_("/",2f,00,00,00);
            		}
HXLINE( 229)		::Array< ::String > parts = directory.split(HX_("/",2f,00,00,00));
HXLINE( 230)		bool _hx_tmp;
HXDLIN( 230)		if (skipFilePart) {
HXLINE( 230)			_hx_tmp = (parts->length > 0);
            		}
            		else {
HXLINE( 230)			_hx_tmp = false;
            		}
HXDLIN( 230)		if (_hx_tmp) {
HXLINE( 231)			parts->pop();
            		}
HXLINE( 233)		bool _hx_tmp1;
HXDLIN( 233)		if ((parts->length > 0)) {
HXLINE( 233)			_hx_tmp1 = (parts->__get(0).indexOf(HX_(":",3a,00,00,00),null()) > -1);
            		}
            		else {
HXLINE( 233)			_hx_tmp1 = false;
            		}
HXDLIN( 233)		if (_hx_tmp1) {
HXLINE( 235)			total = ( (::String)(parts->shift()) );
            		}
HXLINE( 238)		{
HXLINE( 238)			int _g = 0;
HXDLIN( 238)			while((_g < parts->length)){
HXLINE( 238)				::String part = parts->__get(_g);
HXDLIN( 238)				_g = (_g + 1);
HXLINE( 240)				bool _hx_tmp2;
HXDLIN( 240)				if ((part != HX_(".",2e,00,00,00))) {
HXLINE( 240)					_hx_tmp2 = (part != HX_("",00,00,00,00));
            				}
            				else {
HXLINE( 240)					_hx_tmp2 = false;
            				}
HXDLIN( 240)				if (_hx_tmp2) {
HXLINE( 242)					bool _hx_tmp3;
HXDLIN( 242)					if ((total != HX_("",00,00,00,00))) {
HXLINE( 242)						_hx_tmp3 = (total != HX_("/",2f,00,00,00));
            					}
            					else {
HXLINE( 242)						_hx_tmp3 = false;
            					}
HXDLIN( 242)					if (_hx_tmp3) {
HXLINE( 244)						total = (total + HX_("/",2f,00,00,00));
            					}
HXLINE( 247)					total = (total + part);
HXLINE( 249)					if (!(::PathManager_obj::directoryCache->exists(total))) {
HXLINE( 252)						if (!(::sys::FileSystem_obj::exists(total))) {
HXLINE( 254)							::Log_obj::info(HX_("",00,00,00,00),(HX_(" - \x1b""[1mCreating directory:\x1b""[0m ",3e,ed,75,2c) + total));
HXLINE( 255)							::sys::FileSystem_obj::createDirectory(total);
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PathManager_obj,mkdir,(void))

void PathManager_obj::removeDirectory(::String directory){
            	HX_STACKFRAME(&_hx_pos_391e3e2b18308daf_265_removeDirectory)
HXDLIN( 265)		if (::sys::FileSystem_obj::exists(directory)) {
HXLINE( 267)			::Array< ::String > files;
HXLINE( 268)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 270)				files = ::sys::FileSystem_obj::readDirectory(directory);
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE( 272)					{
HXLINE( 272)						null();
            					}
HXLINE( 274)					return;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 277)			{
HXLINE( 277)				int _g1 = 0;
HXDLIN( 277)				::Array< ::String > _g2 = ::sys::FileSystem_obj::readDirectory(directory);
HXDLIN( 277)				while((_g1 < _g2->length)){
HXLINE( 277)					::String file = _g2->__get(_g1);
HXDLIN( 277)					_g1 = (_g1 + 1);
HXLINE( 279)					::String path = ((directory + HX_("/",2f,00,00,00)) + file);
HXLINE( 280)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 282)						if (::sys::FileSystem_obj::isDirectory(path)) {
HXLINE( 284)							::PathManager_obj::removeDirectory(path);
            						}
            						else {
HXLINE( 288)							::sys::FileSystem_obj::deleteFile(path);
            						}
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic _g3 = _hx_e;
HXLINE( 291)							{
HXLINE( 291)								null();
            							}
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            			}
HXLINE( 294)			::Log_obj::info(HX_("",00,00,00,00),(HX_(" - \x1b""[1mRemoving directory:\x1b""[0m ",86,14,0e,68) + directory));
HXLINE( 296)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 298)				::sys::FileSystem_obj::deleteDirectory(directory);
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g4 = _hx_e;
HXLINE( 300)					{
HXLINE( 300)						null();
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PathManager_obj,removeDirectory,(void))

void PathManager_obj::removeFile(::String file){
            	HX_STACKFRAME(&_hx_pos_391e3e2b18308daf_306_removeFile)
HXDLIN( 306)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 308)			::Log_obj::info(HX_("",00,00,00,00),(HX_(" - \x1b""[1mRemoving file:\x1b""[0m ",f5,50,f1,60) + file));
HXLINE( 309)			::sys::FileSystem_obj::deleteFile(file);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PathManager_obj,removeFile,(void))

void PathManager_obj::removeFilesWithExtension(::String inExt){
            	HX_STACKFRAME(&_hx_pos_391e3e2b18308daf_314_removeFilesWithExtension)
HXLINE( 315)		::Array< ::String > contents = ::sys::FileSystem_obj::readDirectory(HX_(".",2e,00,00,00));
HXLINE( 316)		{
HXLINE( 316)			int _g = 0;
HXDLIN( 316)			while((_g < contents->length)){
HXLINE( 316)				::String item = contents->__get(_g);
HXDLIN( 316)				_g = (_g + 1);
HXLINE( 318)				bool _hx_tmp;
HXDLIN( 318)				if ((item.length > inExt.length)) {
HXLINE( 318)					_hx_tmp = (item.substr((item.length - inExt.length),null()) == inExt);
            				}
            				else {
HXLINE( 318)					_hx_tmp = false;
            				}
HXDLIN( 318)				if (_hx_tmp) {
HXLINE( 319)					::PathManager_obj::removeFile(item);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PathManager_obj,removeFilesWithExtension,(void))

void PathManager_obj::resetDirectoryCache(){
            	HX_GC_STACKFRAME(&_hx_pos_391e3e2b18308daf_325_resetDirectoryCache)
HXDLIN( 325)		::PathManager_obj::directoryCache =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(PathManager_obj,resetDirectoryCache,(void))

::String PathManager_obj::standardize(::String path,::hx::Null< bool >  __o_trailingSlash){
            		bool trailingSlash = __o_trailingSlash.Default(false);
            	HX_STACKFRAME(&_hx_pos_391e3e2b18308daf_329_standardize)
HXLINE( 330)		path = ::StringTools_obj::replace(path,HX_("\\",5c,00,00,00),HX_("/",2f,00,00,00));
HXLINE( 331)		path = ::StringTools_obj::replace(path,HX_("//",20,29,00,00),HX_("/",2f,00,00,00));
HXLINE( 332)		path = ::StringTools_obj::replace(path,HX_("//",20,29,00,00),HX_("/",2f,00,00,00));
HXLINE( 334)		bool _hx_tmp;
HXDLIN( 334)		if (!(trailingSlash)) {
HXLINE( 334)			_hx_tmp = ::StringTools_obj::endsWith(path,HX_("/",2f,00,00,00));
            		}
            		else {
HXLINE( 334)			_hx_tmp = false;
            		}
HXDLIN( 334)		if (_hx_tmp) {
HXLINE( 336)			path = path.substr(0,(path.length - 1));
            		}
            		else {
HXLINE( 338)			bool _hx_tmp1;
HXDLIN( 338)			if (trailingSlash) {
HXLINE( 338)				_hx_tmp1 = !(::StringTools_obj::endsWith(path,HX_("/",2f,00,00,00)));
            			}
            			else {
HXLINE( 338)				_hx_tmp1 = false;
            			}
HXDLIN( 338)			if (_hx_tmp1) {
HXLINE( 340)				path = (path + HX_("/",2f,00,00,00));
            			}
            		}
HXLINE( 343)		return path;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PathManager_obj,standardize,return )

::String PathManager_obj::clean(::String path){
            	HX_STACKFRAME(&_hx_pos_391e3e2b18308daf_347_clean)
HXLINE( 348)		::Array< ::String > result = ::Array_obj< ::String >::__new();
HXLINE( 349)		{
HXLINE( 349)			int _g = 0;
HXDLIN( 349)			::Array< ::String > _g1 = ::PathManager_obj::standardize(path,null()).split(HX_("/",2f,00,00,00));
HXDLIN( 349)			while((_g < _g1->length)){
HXLINE( 349)				::String part = _g1->__get(_g);
HXDLIN( 349)				_g = (_g + 1);
HXLINE( 351)				if ((part != HX_(".",2e,00,00,00))) {
HXLINE( 353)					if ((part == HX_("..",40,28,00,00))) {
HXLINE( 355)						if ((result->length == 0)) {
HXLINE( 356)							::Log_obj::error((HX_("Bad relative path ",a2,24,51,86) + path),null(),null(),null());
            						}
HXLINE( 357)						result->pop();
            					}
            					else {
HXLINE( 360)						result->push(part);
            					}
            				}
            			}
            		}
HXLINE( 363)		return result->join(HX_("/",2f,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PathManager_obj,clean,return )


PathManager_obj::PathManager_obj()
{
}

bool PathManager_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"mkdir") ) { outValue = mkdir_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"clean") ) { outValue = clean_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"escape") ) { outValue = escape_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"expand") ) { outValue = expand_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"combine") ) { outValue = combine_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getHaxelib") ) { outValue = getHaxelib_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isAbsolute") ) { outValue = isAbsolute_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeFile") ) { outValue = removeFile_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"standardize") ) { outValue = standardize_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"haxelibPaths") ) { outValue = ( haxelibPaths ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"directoryCache") ) { outValue = ( directoryCache ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"removeDirectory") ) { outValue = removeDirectory_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"resetDirectoryCache") ) { outValue = resetDirectoryCache_dyn(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"removeFilesWithExtension") ) { outValue = removeFilesWithExtension_dyn(); return true; }
	}
	return false;
}

bool PathManager_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"haxelibPaths") ) { haxelibPaths=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"directoryCache") ) { directoryCache=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *PathManager_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo PathManager_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &PathManager_obj::directoryCache,HX_("directoryCache",95,2c,b6,3f)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &PathManager_obj::haxelibPaths,HX_("haxelibPaths",cf,7b,45,95)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void PathManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PathManager_obj::directoryCache,"directoryCache");
	HX_MARK_MEMBER_NAME(PathManager_obj::haxelibPaths,"haxelibPaths");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PathManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PathManager_obj::directoryCache,"directoryCache");
	HX_VISIT_MEMBER_NAME(PathManager_obj::haxelibPaths,"haxelibPaths");
};

#endif

::hx::Class PathManager_obj::__mClass;

static ::String PathManager_obj_sStaticFields[] = {
	HX_("directoryCache",95,2c,b6,3f),
	HX_("haxelibPaths",cf,7b,45,95),
	HX_("combine",7f,2a,2e,7a),
	HX_("escape",81,43,da,da),
	HX_("expand",5a,ee,72,c4),
	HX_("getHaxelib",e9,3c,e2,57),
	HX_("isAbsolute",81,e0,44,3e),
	HX_("mkdir",af,4c,b3,09),
	HX_("removeDirectory",89,8d,63,51),
	HX_("removeFile",e0,08,db,c0),
	HX_("removeFilesWithExtension",06,a1,fc,cc),
	HX_("resetDirectoryCache",c4,f6,d7,56),
	HX_("standardize",37,44,e6,73),
	HX_("clean",89,71,5b,48),
	::String(null())
};

void PathManager_obj::__register()
{
	PathManager_obj _hx_dummy;
	PathManager_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("PathManager",28,9b,ad,d4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PathManager_obj::__GetStatic;
	__mClass->mSetStaticField = &PathManager_obj::__SetStatic;
	__mClass->mMarkFunc = PathManager_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PathManager_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< PathManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PathManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PathManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PathManager_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PathManager_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_391e3e2b18308daf_5_boot)
HXDLIN(   5)		directoryCache =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_391e3e2b18308daf_6_boot)
HXDLIN(   6)		haxelibPaths =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

