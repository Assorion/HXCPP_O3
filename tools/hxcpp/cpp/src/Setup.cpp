// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_BuildTool
#include <BuildTool.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Log
#include <Log.h>
#endif
#ifndef INCLUDED_PathManager
#include <PathManager.h>
#endif
#ifndef INCLUDED_Profile
#include <Profile.h>
#endif
#ifndef INCLUDED_Setup
#include <Setup.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_Tools
#include <Tools.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ValueException
#include <haxe/ValueException.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Eof
#include <haxe/io/Eof.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_sys_io_FileInput
#include <sys/io/FileInput.h>
#endif
#ifndef INCLUDED_sys_io_Process
#include <sys/io/Process.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_9294dd72778aebd6_9_findAndroidNdkRoot,"Setup","findAndroidNdkRoot",0xc8f53252,"Setup.findAndroidNdkRoot","Setup.hx",9,0xfcc5bc81)
HX_LOCAL_STACK_FRAME(_hx_pos_9294dd72778aebd6_80_getNdkVersion,"Setup","getNdkVersion",0x027b4688,"Setup.getNdkVersion","Setup.hx",80,0xfcc5bc81)
HX_LOCAL_STACK_FRAME(_hx_pos_9294dd72778aebd6_132_initHXCPPConfig,"Setup","initHXCPPConfig",0xd7c8b5f4,"Setup.initHXCPPConfig","Setup.hx",132,0xfcc5bc81)
HX_LOCAL_STACK_FRAME(_hx_pos_9294dd72778aebd6_177_setupMingw,"Setup","setupMingw",0x49894af6,"Setup.setupMingw","Setup.hx",177,0xfcc5bc81)
static const ::String _hx_array_data_0d5d1e5d_7[] = {
	HX_("c:/MinGW",4a,c7,ba,f0),
};
HX_LOCAL_STACK_FRAME(_hx_pos_9294dd72778aebd6_216_setupEmscripten,"Setup","setupEmscripten",0xcb17dc68,"Setup.setupEmscripten","Setup.hx",216,0xfcc5bc81)
HX_LOCAL_STACK_FRAME(_hx_pos_9294dd72778aebd6_247_isRaspberryPi,"Setup","isRaspberryPi",0xbaf6ac48,"Setup.isRaspberryPi","Setup.hx",247,0xfcc5bc81)
HX_LOCAL_STACK_FRAME(_hx_pos_9294dd72778aebd6_261_startPdbServer,"Setup","startPdbServer",0x985acf80,"Setup.startPdbServer","Setup.hx",261,0xfcc5bc81)
HX_LOCAL_STACK_FRAME(_hx_pos_9294dd72778aebd6_269_startPdbServer,"Setup","startPdbServer",0x985acf80,"Setup.startPdbServer","Setup.hx",269,0xfcc5bc81)
static const ::String _hx_array_data_0d5d1e5d_13[] = {
	HX_("-start",15,b1,1a,82),
};
HX_LOCAL_STACK_FRAME(_hx_pos_9294dd72778aebd6_283_setup,"Setup","setup",0x6eee09ac,"Setup.setup","Setup.hx",283,0xfcc5bc81)
HX_LOCAL_STACK_FRAME(_hx_pos_9294dd72778aebd6_325_setupAndroidNdk,"Setup","setupAndroidNdk",0x778f3052,"Setup.setupAndroidNdk","Setup.hx",325,0xfcc5bc81)
static const ::String _hx_array_data_0d5d1e5d_20[] = {
	HX_("x86 Platform: 16",48,26,33,69),HX_("arm Platform: 16",a2,8f,1e,18),HX_("x86_64 Platform: 21",51,48,99,49),HX_("arm_64 Platform: 21",37,b3,72,22),HX_("Frameworks should set the minSdkVersion for each APK to these values.",f7,77,05,c1),
};
HX_LOCAL_STACK_FRAME(_hx_pos_9294dd72778aebd6_457_globallySetThePlatform,"Setup","globallySetThePlatform",0x7a395a83,"Setup.globallySetThePlatform","Setup.hx",457,0xfcc5bc81)
HX_LOCAL_STACK_FRAME(_hx_pos_9294dd72778aebd6_513_setupBlackBerryNativeSDK,"Setup","setupBlackBerryNativeSDK",0xea36d380,"Setup.setupBlackBerryNativeSDK","Setup.hx",513,0xfcc5bc81)
HX_LOCAL_STACK_FRAME(_hx_pos_9294dd72778aebd6_589_setupMSVC,"Setup","setupMSVC",0x553703bf,"Setup.setupMSVC","Setup.hx",589,0xfcc5bc81)
HX_LOCAL_STACK_FRAME(_hx_pos_9294dd72778aebd6_742_toPath,"Setup","toPath",0xb1dcbeb1,"Setup.toPath","Setup.hx",742,0xfcc5bc81)

void Setup_obj::__construct() { }

Dynamic Setup_obj::__CreateEmpty() { return new Setup_obj; }

void *Setup_obj::_hx_vtable = 0;

Dynamic Setup_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Setup_obj > _hx_result = new Setup_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Setup_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x01a187b9;
}

::String Setup_obj::findAndroidNdkRoot( ::haxe::ds::StringMap defines,int inBaseVersion){
            	HX_STACKFRAME(&_hx_pos_9294dd72778aebd6_9_findAndroidNdkRoot)
HXLINE(  10)		Float bestVersion = ((Float)0.0);
HXLINE(  11)		::String result = null();
HXLINE(  13)		::String ndkDir = defines->get_string(HX_("ANDROID_NDK_DIR",93,47,b8,e0));
HXLINE(  14)		if (::hx::IsNotNull( ndkDir )) {
HXLINE(  16)			::Log_obj::info(HX_("",00,00,00,00),(HX_("Looking in ANDROID_NDK_DIR ",eb,46,ce,50) + ndkDir));
            		}
            		else {
HXLINE(  20)			::Log_obj::info(HX_("",00,00,00,00),HX_("ANDROID_NDK_DIR not set",88,a4,94,b3));
HXLINE(  21)			if (::BuildTool_obj::isMac) {
HXLINE(  23)				::String lib = (defines->get_string(HX_("HOME",1f,92,d3,2f)) + HX_("/Library/Android/sdk/ndk",5d,db,c8,eb));
HXLINE(  24)				if (::sys::FileSystem_obj::exists(lib)) {
HXLINE(  26)					::Log_obj::info(HX_("",00,00,00,00),(HX_("trying default ",f8,0c,02,ee) + lib));
HXLINE(  27)					ndkDir = lib;
            				}
            			}
            		}
HXLINE(  32)		if (::hx::IsNotNull( ndkDir )) {
HXLINE(  34)			ndkDir = ndkDir.split(HX_("\\",5c,00,00,00))->join(HX_("/",2f,00,00,00));
HXLINE(  35)			::Array< ::String > files = null();
HXLINE(  36)			bool checkFiles = true;
HXLINE(  37)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  39)				files = ::sys::FileSystem_obj::readDirectory(ndkDir);
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE(  41)					{
HXLINE(  41)						null();
            					}
HXLINE(  43)					::Log_obj::warn(((HX_("ANDROID_NDK_DIR \"",55,ae,07,b5) + ndkDir) + HX_("\" does not point to a valid directory",eb,d8,e5,e1)),null(),null());
HXLINE(  44)					checkFiles = false;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE(  46)			if (checkFiles) {
HXLINE(  47)				int _g1 = 0;
HXDLIN(  47)				while((_g1 < files->length)){
HXLINE(  47)					::String file = files->__get(_g1);
HXDLIN(  47)					_g1 = (_g1 + 1);
HXLINE(  49)					file = file.split(HX_("\\",5c,00,00,00))->join(HX_("/",2f,00,00,00));
HXLINE(  50)					Float version = ::Setup_obj::getNdkVersion(((ndkDir + HX_("/",2f,00,00,00)) + file));
HXLINE(  51)					bool _hx_tmp;
HXDLIN(  51)					if ((inBaseVersion != 0)) {
HXLINE(  51)						_hx_tmp = (::Std_obj::_hx_int(version) == inBaseVersion);
            					}
            					else {
HXLINE(  51)						_hx_tmp = true;
            					}
HXDLIN(  51)					if (_hx_tmp) {
HXLINE(  53)						if ((version > bestVersion)) {
HXLINE(  55)							bestVersion = version;
HXLINE(  56)							result = ((ndkDir + HX_("/",2f,00,00,00)) + file);
            						}
            					}
            				}
            			}
            		}
HXLINE(  62)		::Log_obj::info(HX_("",00,00,00,00),HX_("Looking in ANDROID_SDK/ndk-bundle",dd,2b,b8,e1));
HXLINE(  63)		if (defines->exists(HX_("ANDROID_SDK",2a,1e,e9,14))) {
HXLINE(  65)			::Log_obj::info(HX_("",00,00,00,00),HX_("checks default ndk-bundle in android sdk",80,8a,62,6a));
HXLINE(  66)			::String ndkBundle = (defines->get_string(HX_("ANDROID_SDK",2a,1e,e9,14)) + HX_("/ndk-bundle",89,bd,5a,bc));
HXLINE(  67)			ndkBundle = ndkBundle.split(HX_("\\",5c,00,00,00))->join(HX_("/",2f,00,00,00));
HXLINE(  68)			Float version1 = ::Setup_obj::getNdkVersion(ndkBundle);
HXLINE(  69)			bool _hx_tmp1;
HXDLIN(  69)			if ((version1 > bestVersion)) {
HXLINE(  69)				if ((inBaseVersion != 0)) {
HXLINE(  69)					_hx_tmp1 = (inBaseVersion == ::Std_obj::_hx_int(version1));
            				}
            				else {
HXLINE(  69)					_hx_tmp1 = true;
            				}
            			}
            			else {
HXLINE(  69)				_hx_tmp1 = false;
            			}
HXDLIN(  69)			if (_hx_tmp1) {
HXLINE(  71)				::Log_obj::info(HX_("",00,00,00,00),HX_("Using default ndk-bundle in android sdk",39,2d,e3,cb));
HXLINE(  72)				result = ndkBundle;
            			}
            		}
HXLINE(  76)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Setup_obj,findAndroidNdkRoot,return )

Float Setup_obj::getNdkVersion(::String inDirName){
            	HX_GC_STACKFRAME(&_hx_pos_9294dd72778aebd6_80_getNdkVersion)
HXLINE(  81)		::Log_obj::info(HX_("",00,00,00,00),HX_("Try to get version from source.properties",82,09,4a,07));
HXLINE(  82)		::String src = ::Setup_obj::toPath((inDirName + HX_("/source.properties",97,33,ee,cc)));
HXLINE(  83)		if (::sys::FileSystem_obj::exists(src)) {
HXLINE(  85)			 ::sys::io::FileInput fin = ::sys::io::File_obj::read(src,false);
HXLINE(  86)			try {
            				HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
            				HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE(  88)				while(true){
HXLINE(  90)					::String str = fin->readLine();
HXLINE(  91)					::Array< ::String > split = str.split(HX_("=",3d,00,00,00));
HXLINE(  92)					::String name = ::StringTools_obj::trim(split->__get(0));
HXLINE(  93)					if ((name == HX_("Pkg.Revision",bd,aa,c3,57))) {
HXLINE(  95)						::String revision = ::StringTools_obj::trim(split->__get(1));
HXLINE(  96)						::Array< ::String > split2 = revision.split(HX_(".",2e,00,00,00));
HXLINE(  97)						Float result = (((Float)1.0) * ( (Float)(::Std_obj::parseInt(split2->__get(0))) ));
HXDLIN(  97)						Float result1 = (result + (((Float)0.001) * ( (Float)(::Std_obj::parseInt(split2->__get(1))) )));
HXLINE(  98)						if ((result1 >= 8)) {
HXLINE( 100)							::Log_obj::info(HX_("",00,00,00,00),((HX_("Deduced NDK version ",03,a1,25,9a) + result1) + ((HX_(" from \"",0c,48,75,e8) + inDirName) + HX_("\"/source.properties",39,e4,aa,78))));
HXLINE( 101)							fin->close();
HXLINE( 102)							return result1;
            						}
            					}
            				}
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::haxe::io::Eof e = _hx_e;
HXLINE( 109)					::Log_obj::info(HX_("",00,00,00,00),((HX_("Could not deduce NDK version from \"",bf,41,f2,ce) + inDirName) + HX_("\"/source.properties",39,e4,aa,78)));
            				}
            				else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::haxe::ValueException _g = _hx_e;
HXLINE( 107)					{
HXLINE( 107)						null();
            					}
HXLINE(  86)					if (::Std_obj::isOfType(_g->value,::hx::ClassOf< ::haxe::io::Eof >())) {
HXLINE( 109)						::Log_obj::info(HX_("",00,00,00,00),((HX_("Could not deduce NDK version from \"",bf,41,f2,ce) + inDirName) + HX_("\"/source.properties",39,e4,aa,78)));
            					}
            					else {
HXLINE(  86)						HX_STACK_DO_THROW(_g);
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 111)			fin->close();
            		}
HXLINE( 114)		::String dir = inDirName.split(HX_("\\",5c,00,00,00))->join(HX_("/",2f,00,00,00));
HXLINE( 115)		::Log_obj::info(HX_("",00,00,00,00),((HX_("Try to get version from directory name \"",04,d3,65,d1) + dir) + HX_("\"",22,00,00,00)));
HXLINE( 116)		 ::EReg extract_version =  ::EReg_obj::__alloc( HX_CTX ,HX_("/?(android-ndk-)?r(\\d+)([a-z]?)$",d8,dd,ee,bf),HX_("",00,00,00,00));
HXLINE( 117)		if (extract_version->match(dir)) {
HXLINE( 119)			int major = ( (int)(::Std_obj::parseInt(extract_version->matched(2))) );
HXLINE( 120)			Float result2 = (((Float)1.0) * ( (Float)(major) ));
HXLINE( 121)			::String minor = extract_version->matched(3);
HXLINE( 122)			bool _hx_tmp;
HXDLIN( 122)			if (::hx::IsNotNull( minor )) {
HXLINE( 122)				_hx_tmp = (minor.length > 0);
            			}
            			else {
HXLINE( 122)				_hx_tmp = false;
            			}
HXDLIN( 122)			if (_hx_tmp) {
HXLINE( 123)				result2 = (result2 + (((Float)0.001) * ( (Float)((( (int)(minor.toLowerCase().charCodeAt(0)) ) - 97)) )));
            			}
HXLINE( 124)			return result2;
            		}
HXLINE( 127)		::Log_obj::info(HX_("",00,00,00,00),((HX_("Could not deduce NDK version from \"",bf,41,f2,ce) + inDirName) + HX_("\" - assuming 8",d2,8a,27,e2)));
HXLINE( 128)		return ( (Float)(8) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Setup_obj,getNdkVersion,return )

void Setup_obj::initHXCPPConfig( ::haxe::ds::StringMap ioDefines){
            	HX_STACKFRAME(&_hx_pos_9294dd72778aebd6_132_initHXCPPConfig)
HXLINE( 133)		 ::haxe::ds::StringMap env = ::Sys_obj::environment();
HXLINE( 135)		if (env->exists(HX_("HXCPP_CONFIG",ce,a0,c9,d1))) {
HXLINE( 136)			return;
            		}
HXLINE( 138)		::String home = HX_("",00,00,00,00);
HXLINE( 139)		if (env->exists(HX_("HOME",1f,92,d3,2f))) {
HXLINE( 140)			home = env->get_string(HX_("HOME",1f,92,d3,2f));
            		}
            		else {
HXLINE( 141)			if (env->exists(HX_("USERPROFILE",1e,72,55,c2))) {
HXLINE( 142)				home = env->get_string(HX_("USERPROFILE",1e,72,55,c2));
            			}
            			else {
HXLINE( 145)				::Log_obj::warn(HX_("No $HOME variable set, \".hxcpp_config.xml\" might be missing",a1,b4,3a,60),null(),null());
HXLINE( 147)				return;
            			}
            		}
HXLINE( 150)		ioDefines->set(HX_("HXCPP_HOME",2b,55,48,6e),home);
HXLINE( 152)		::String config = ::Setup_obj::toPath((home + HX_("/.hxcpp_config.xml",36,35,69,6e)));
HXLINE( 153)		ioDefines->set(HX_("HXCPP_CONFIG",ce,a0,c9,d1),config);
HXLINE( 155)		if ((::BuildTool_obj::HXCPP != HX_("",00,00,00,00))) {
HXLINE( 157)			::String src = ::Setup_obj::toPath((::BuildTool_obj::HXCPP + HX_("/toolchain/example.hxcpp_config.xml",30,04,73,30)));
HXLINE( 158)			if (!(::sys::FileSystem_obj::exists(config))) {
HXLINE( 160)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 162)					::Log_obj::info(HX_("",00,00,00,00),((((HX_("Copying HXCPP config \"",a4,c3,ba,f9) + src) + HX_("\" to \"",fb,ea,f5,51)) + config) + HX_("\"",22,00,00,00)));
HXLINE( 163)					::sys::io::File_obj::copy(src,config);
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g = _hx_e;
HXLINE( 165)						{
HXLINE( 165)							null();
            						}
HXLINE( 167)						::Log_obj::warn(((HX_("Could not create HXCPP config \"",e9,64,e2,04) + config) + HX_("\"",22,00,00,00)),null(),null());
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Setup_obj,initHXCPPConfig,(void))

void Setup_obj::setupMingw( ::haxe::ds::StringMap ioDefines){
            	HX_STACKFRAME(&_hx_pos_9294dd72778aebd6_177_setupMingw)
HXDLIN( 177)		if (!(ioDefines->exists(HX_("MINGW_ROOT",9f,ea,9c,a5)))) {
HXLINE( 180)			::String haxelib = ::PathManager_obj::getHaxelib(HX_("minimingw",4b,e2,94,28),HX_("",00,00,00,00),false,null());
HXLINE( 181)			bool _hx_tmp;
HXDLIN( 181)			if (::hx::IsNotNull( haxelib )) {
HXLINE( 181)				_hx_tmp = (haxelib != HX_("",00,00,00,00));
            			}
            			else {
HXLINE( 181)				_hx_tmp = false;
            			}
HXDLIN( 181)			if (_hx_tmp) {
HXLINE( 183)				ioDefines->set(HX_("MINGW_ROOT",9f,ea,9c,a5),haxelib);
HXLINE( 184)				::Log_obj::info(HX_("",00,00,00,00),(HX_("Using haxelib version of MinGW, ",32,b5,13,e3) + haxelib));
HXLINE( 185)				return;
            			}
HXLINE( 188)			::Array< ::String > guesses = ::Array_obj< ::String >::fromData( _hx_array_data_0d5d1e5d_7,1);
HXLINE( 189)			{
HXLINE( 189)				int _g = 0;
HXDLIN( 189)				while((_g < guesses->length)){
HXLINE( 189)					::String guess = guesses->__get(_g);
HXDLIN( 189)					_g = (_g + 1);
HXLINE( 191)					if (::sys::FileSystem_obj::exists(guess)) {
HXLINE( 193)						ioDefines->set(HX_("MINGW_ROOT",9f,ea,9c,a5),guess);
HXLINE( 194)						::Log_obj::info(HX_("",00,00,00,00),(HX_("Using default version of MinGW, ",90,88,c2,a3) + guess));
HXLINE( 195)						return;
            					}
            				}
            			}
HXLINE( 199)			if (ioDefines->exists(HX_("mingw",42,74,68,08))) {
HXLINE( 202)				::Log_obj::error(((HX_("Could not guess MINGW_ROOT (tried ",32,87,26,be) + ::Std_obj::string(guesses)) + HX_(") - please set explicitly",8b,12,d7,69)),null(),null(),null());
            			}
            			else {
HXLINE( 207)				::Log_obj::error(HX_("Could not setup any C++ compiler, please install or reinstall a valid C++ compiler",6c,ce,ca,cb),null(),null(),null());
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Setup_obj,setupMingw,(void))

void Setup_obj::setupEmscripten( ::haxe::ds::StringMap ioDefines){
            	HX_GC_STACKFRAME(&_hx_pos_9294dd72778aebd6_216_setupEmscripten)
HXDLIN( 216)		if (!(ioDefines->exists(HX_("EMSCRIPTEN_SDK",37,6d,4f,81)))) {
HXLINE( 218)			::String home = ioDefines->get_string(HX_("HXCPP_HOME",2b,55,48,6e));
HXLINE( 219)			::String file = (home + HX_("/.emscripten",7b,e5,df,02));
HXLINE( 220)			if (::sys::FileSystem_obj::exists(file)) {
HXLINE( 222)				::String content = ::sys::io::File_obj::getContent(file);
HXLINE( 223)				content = content.split(HX_("\r",0d,00,00,00))->join(HX_("",00,00,00,00));
HXLINE( 224)				 ::EReg value =  ::EReg_obj::__alloc( HX_CTX ,HX_("^(\\w*)\\s*=\\s*'(.*)'",a0,ff,49,a2),HX_("",00,00,00,00));
HXLINE( 225)				{
HXLINE( 225)					int _g = 0;
HXDLIN( 225)					::Array< ::String > _g1 = content.split(HX_("\n",0a,00,00,00));
HXDLIN( 225)					while((_g < _g1->length)){
HXLINE( 225)						::String line = _g1->__get(_g);
HXDLIN( 225)						_g = (_g + 1);
HXLINE( 227)						if (value->match(line)) {
HXLINE( 229)							::String name = value->matched(1);
HXLINE( 230)							::String val = value->matched(2);
HXLINE( 231)							if ((name == HX_("EMSCRIPTEN_ROOT",e5,48,8f,a3))) {
HXLINE( 233)								ioDefines->set(HX_("EMSCRIPTEN_SDK",37,6d,4f,81),val);
            							}
HXLINE( 235)							if ((name == HX_("PYTHON",1c,52,f3,72))) {
HXLINE( 236)								ioDefines->set(HX_("EMSCRIPTEN_PYTHON",9f,5b,2f,15),val);
            							}
HXLINE( 237)							if ((name == HX_("NODE_JS",26,32,df,96))) {
HXLINE( 238)								ioDefines->set(HX_("EMSCRIPTEN_NODE_JS",43,7b,2b,e9),val);
            							}
            						}
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Setup_obj,setupEmscripten,(void))

bool Setup_obj::isRaspberryPi(){
            	HX_GC_STACKFRAME(&_hx_pos_9294dd72778aebd6_247_isRaspberryPi)
HXLINE( 248)		::String modelFile = HX_("/sys/firmware/devicetree/base/model",03,c9,04,fc);
HXLINE( 249)		if (!(::sys::FileSystem_obj::exists(modelFile))) {
HXLINE( 250)			return false;
            		}
HXLINE( 251)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 252)			::String model = ::sys::io::File_obj::getContent(modelFile);
HXLINE( 253)			return  ::EReg_obj::__alloc( HX_CTX ,HX_("Raspberry",2a,ed,eb,63),HX_("",00,00,00,00))->match(model);
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 254)				{
HXLINE( 254)					null();
            				}
HXDLIN( 254)				 ::Dynamic e = _g;
HXLINE( 255)				::haxe::Log_obj::trace(e,::hx::SourceInfo(HX_("Setup.hx",81,bc,c5,fc),255,HX_("Setup",5d,1e,5d,0d),HX_("isRaspberryPi",19,0a,93,4d)));
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 257)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Setup_obj,isRaspberryPi,return )

void Setup_obj::startPdbServer(){
            	HX_GC_STACKFRAME(&_hx_pos_9294dd72778aebd6_261_startPdbServer)
HXLINE( 262)		::String oldPath = ::Sys_obj::getCwd();
HXLINE( 263)		try {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::sys::io::Process,proc) HXARGC(1)
            			void _hx_run(int _){
            				HX_GC_STACKFRAME(&_hx_pos_9294dd72778aebd6_269_startPdbServer)
HXLINE( 269)				proc->kill();
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 266)			::Sys_obj::setCwd(::BuildTool_obj::HXCPP);
HXLINE( 267)			 ::sys::io::Process proc =  ::sys::io::Process_obj::__alloc( HX_CTX ,HX_("mspdbsrv.exe",53,cc,6d,a1),::Array_obj< ::String >::fromData( _hx_array_data_0d5d1e5d_13,1),null());
HXLINE( 268)			::Tools_obj::addOnExitHook( ::Dynamic(new _hx_Closure_0(proc)));
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 272)				{
HXLINE( 272)					null();
            				}
HXDLIN( 272)				 ::Dynamic e = _g;
HXLINE( 274)				::Log_obj::info(HX_("",00,00,00,00),(HX_("Could not start mspdbsrv:",a1,bc,81,b8) + ::Std_obj::string(e)));
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 276)		::Sys_obj::setCwd(oldPath);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Setup_obj,startPdbServer,(void))

void Setup_obj::setup(::String inWhat, ::haxe::ds::StringMap ioDefines){
            	HX_STACKFRAME(&_hx_pos_9294dd72778aebd6_283_setup)
HXLINE( 284)		if (ioDefines->exists(HX_("HXCPP_CLEAN_ONLY",4e,97,f9,5d))) {
HXLINE( 285)			return;
            		}
HXLINE( 287)		::Profile_obj::push((HX_("setup ",03,ff,88,6f) + inWhat));
HXLINE( 288)		if ((inWhat == HX_("androidNdk",86,d3,3a,75))) {
HXLINE( 290)			::Setup_obj::setupAndroidNdk(ioDefines);
            		}
            		else {
HXLINE( 292)			if ((inWhat == HX_("blackberry",b7,40,d2,d3))) {
HXLINE( 294)				::Setup_obj::setupBlackBerryNativeSDK(ioDefines);
            			}
            			else {
HXLINE( 296)				if ((inWhat == HX_("msvc",13,ec,63,48))) {
HXLINE( 298)					bool _hx_tmp = ioDefines->exists(HX_("HXCPP_M64",3f,ff,fb,2a));
HXDLIN( 298)					bool _hx_tmp1 = ioDefines->exists(HX_("HXCPP_ARM64",ee,b7,2f,0b));
HXDLIN( 298)					::Setup_obj::setupMSVC(ioDefines,_hx_tmp,_hx_tmp1,ioDefines->exists(HX_("winrt",de,4a,6a,ca)));
            				}
            				else {
HXLINE( 300)					if ((inWhat == HX_("pdbserver",31,45,c1,fa))) {
HXLINE( 302)						::Setup_obj::startPdbServer();
            					}
            					else {
HXLINE( 304)						if ((inWhat == HX_("mingw",42,74,68,08))) {
HXLINE( 306)							::Setup_obj::setupMingw(ioDefines);
            						}
            						else {
HXLINE( 308)							if ((inWhat == HX_("emscripten",9c,7f,c3,c8))) {
HXLINE( 310)								::Setup_obj::setupEmscripten(ioDefines);
            							}
            							else {
HXLINE( 312)								if ((inWhat == HX_("nvcc",e8,58,0f,49))) {
HXLINE( 314)									::BuildTool_obj::setupNvcc();
            								}
            								else {
HXLINE( 318)									::Log_obj::error(((HX_("Unknown setup feature \"",1f,94,b2,cb) + inWhat) + HX_("\"",22,00,00,00)),null(),null(),null());
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 321)		::Profile_obj::pop();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Setup_obj,setup,(void))

void Setup_obj::setupAndroidNdk( ::haxe::ds::StringMap defines){
            	HX_GC_STACKFRAME(&_hx_pos_9294dd72778aebd6_325_setupAndroidNdk)
HXLINE( 326)		::String root = null();
HXLINE( 328)		if (::Log_obj::verbose) {
HXLINE( 328)			::Log_obj::println(HX_("",00,00,00,00));
            		}
HXLINE( 330)		int ndkVersion = 0;
HXLINE( 331)		{
HXLINE( 331)			int _g = 6;
HXDLIN( 331)			while((_g < 20)){
HXLINE( 331)				_g = (_g + 1);
HXDLIN( 331)				int i = (_g - 1);
HXLINE( 333)				if (defines->exists((HX_("NDKV",61,7f,c2,33) + i))) {
HXLINE( 335)					ndkVersion = i;
HXLINE( 336)					::Log_obj::info(HX_("",00,00,00,00),((HX_("\x1b""[33;1mRequested Android NDK r",0d,bc,01,d0) + i) + HX_("\x1b""[0m",1d,fa,1d,12)));
HXLINE( 337)					goto _hx_goto_15;
            				}
            			}
            			_hx_goto_15:;
            		}
HXLINE( 341)		bool _hx_tmp;
HXDLIN( 341)		if (defines->exists(HX_("ANDROID_NDK_ROOT",fc,e0,cb,c9))) {
HXLINE( 341)			_hx_tmp = (ndkVersion != 0);
            		}
            		else {
HXLINE( 341)			_hx_tmp = true;
            		}
HXDLIN( 341)		if (_hx_tmp) {
HXLINE( 343)			root = ::Setup_obj::findAndroidNdkRoot(defines,ndkVersion);
HXLINE( 344)			if (::hx::IsNull( root )) {
HXLINE( 346)				::String ndkDir;
HXDLIN( 346)				if (defines->exists(HX_("ANDROID_NDK_DIR",93,47,b8,e0))) {
HXLINE( 346)					ndkDir = defines->get_string(HX_("ANDROID_NDK_DIR",93,47,b8,e0));
            				}
            				else {
HXLINE( 346)					ndkDir = HX_("not set",15,ce,cf,1f);
            				}
HXLINE( 347)				if ((ndkVersion != 0)) {
HXLINE( 348)					::Log_obj::error((((HX_("ANDROID_NDK_DIR [\"",d4,0d,b1,b1) + ndkDir) + HX_("\"] or ndk-bundle does not contain requested NDK ",cf,1c,6d,e3)) + ndkVersion),null(),null(),null());
            				}
            				else {
HXLINE( 350)					::Log_obj::error(((HX_("ANDROID_NDK_DIR [\"",d4,0d,b1,b1) + ndkDir) + HX_("\"] or ndk-bundle does not contain a matching NDK",43,2b,8e,e0)),null(),null(),null());
            				}
            			}
            			else {
HXLINE( 354)				::Sys_obj::putEnv(HX_("ANDROID_NDK_ROOT",fc,e0,cb,c9),root);
HXLINE( 355)				defines->set(HX_("ANDROID_NDK_ROOT",fc,e0,cb,c9),root);
            			}
            		}
            		else {
HXLINE( 360)			root = defines->get_string(HX_("ANDROID_NDK_ROOT",fc,e0,cb,c9));
HXLINE( 361)			::Log_obj::info(HX_("",00,00,00,00),((HX_("\x1b""[33;1mUsing Android NDK root: ",37,8a,85,47) + root) + HX_("\x1b""[0m",1d,fa,1d,12)));
            		}
HXLINE( 364)		if ((ndkVersion == 0)) {
HXLINE( 366)			Float version = ::Setup_obj::getNdkVersion(root);
HXLINE( 367)			if ((version > 0)) {
HXLINE( 369)				::Log_obj::info(HX_("",00,00,00,00),((HX_("\x1b""[33;1mDetected Android NDK ",23,ca,d9,dc) + version) + HX_("\x1b""[0m",1d,fa,1d,12)));
HXLINE( 370)				defines->set((HX_("NDKV",61,7f,c2,33) + ::Std_obj::_hx_int(version)),HX_("1",31,00,00,00));
HXLINE( 371)				ndkVersion = ::Std_obj::_hx_int(version);
            			}
            			else {
HXLINE( 374)				::Log_obj::error(HX_("Invalid ndk version",a4,14,7b,a2),null(),null(),null());
            			}
            		}
HXLINE( 376)		{
HXLINE( 376)			int _g1 = 5;
HXDLIN( 376)			int _g2 = (ndkVersion + 1);
HXDLIN( 376)			while((_g1 < _g2)){
HXLINE( 376)				_g1 = (_g1 + 1);
HXDLIN( 376)				int i1 = (_g1 - 1);
HXLINE( 377)				defines->set(((HX_("NDKV",61,7f,c2,33) + i1) + HX_("+",2b,00,00,00)),HX_("1",31,00,00,00));
            			}
            		}
HXLINE( 379)		::String arm_type = HX_("arm-linux-androideabi",48,ed,29,2a);
HXLINE( 380)		bool arm_64 = defines->exists(HX_("HXCPP_ARM64",ee,b7,2f,0b));
HXLINE( 381)		if (arm_64) {
HXLINE( 381)			arm_type = HX_("aarch64-linux-android",be,5e,56,df);
            		}
HXLINE( 384)		if (!(defines->exists(HX_("TOOLCHAIN_VERSION",02,d0,f1,fd)))) {
HXLINE( 386)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 388)				::Array< ::String > files = ::sys::FileSystem_obj::readDirectory((root + HX_("/toolchains",99,ea,9c,50)));
HXLINE( 391)				 ::EReg extract_version =  ::EReg_obj::__alloc( HX_CTX ,HX_("^arm-linux-androideabi-(\\d.*)",c0,0c,e3,1d),HX_("",00,00,00,00));
HXLINE( 392)				if (arm_64) {
HXLINE( 392)					extract_version =  ::EReg_obj::__alloc( HX_CTX ,HX_("^aarch64-linux-android-(\\d.*)",0a,56,d7,47),HX_("",00,00,00,00));
            				}
HXLINE( 394)				::String bestVer = HX_("",00,00,00,00);
HXLINE( 395)				{
HXLINE( 395)					int _g3 = 0;
HXDLIN( 395)					while((_g3 < files->length)){
HXLINE( 395)						::String file = files->__get(_g3);
HXDLIN( 395)						_g3 = (_g3 + 1);
HXLINE( 397)						if (extract_version->match(file)) {
HXLINE( 399)							::String ver = extract_version->matched(1);
HXLINE( 400)							bool _hx_tmp1;
HXDLIN( 400)							if (!((ver < bestVer))) {
HXLINE( 400)								_hx_tmp1 = (bestVer == HX_("",00,00,00,00));
            							}
            							else {
HXLINE( 400)								_hx_tmp1 = true;
            							}
HXDLIN( 400)							if (_hx_tmp1) {
HXLINE( 402)								bestVer = ver;
            							}
            						}
            					}
            				}
HXLINE( 406)				if ((bestVer != HX_("",00,00,00,00))) {
HXLINE( 408)					defines->set(HX_("TOOLCHAIN_VERSION",02,d0,f1,fd),bestVer);
HXLINE( 409)					::Log_obj::info(HX_("",00,00,00,00),((((HX_("\x1b""[33;1mDetected Android toolchain: ",97,8d,2f,dc) + arm_type) + HX_("-",2d,00,00,00)) + bestVer) + HX_("\x1b""[0m",1d,fa,1d,12)));
            				}
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g4 = _hx_e;
HXLINE( 412)					{
HXLINE( 412)						null();
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
HXLINE( 416)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 418)			::String prebuilt = (root + HX_("/toolchains/",76,5b,b0,38));
HXLINE( 419)			if (defines->exists(HX_("TOOLCHAIN_VERSION",02,d0,f1,fd))) {
HXLINE( 420)				prebuilt = (prebuilt + (((arm_type + HX_("-",2d,00,00,00)) + defines->get_string(HX_("TOOLCHAIN_VERSION",02,d0,f1,fd))) + HX_("/prebuilt",6a,63,e9,61)));
            			}
            			else {
HXLINE( 422)				prebuilt = (prebuilt + HX_("llvm/prebuilt",d3,0e,1b,d2));
            			}
HXLINE( 423)			::Array< ::String > files1 = ::sys::FileSystem_obj::readDirectory(prebuilt);
HXLINE( 424)			{
HXLINE( 424)				int _g5 = 0;
HXDLIN( 424)				while((_g5 < files1->length)){
HXLINE( 424)					::String file1 = files1->__get(_g5);
HXDLIN( 424)					_g5 = (_g5 + 1);
HXLINE( 426)					if (!(::sys::FileSystem_obj::isDirectory(((prebuilt + HX_("/",2f,00,00,00)) + file1)))) {
HXLINE( 428)						files1->remove(file1);
            					}
            				}
            			}
HXLINE( 431)			if ((files1->length == 1)) {
HXLINE( 433)				defines->set(HX_("ANDROID_HOST",d8,4d,d4,2f),files1->__get(0));
HXLINE( 434)				::Log_obj::info(HX_("",00,00,00,00),((HX_("\x1b""[33;1mDetected Android host: ",06,a5,ad,60) + files1->__get(0)) + HX_("\x1b""[0m",1d,fa,1d,12)));
            			}
            			else {
HXLINE( 438)				::Log_obj::info(HX_("",00,00,00,00),((HX_("\x1b""[33;1mCould not detect ANDROID_HOST (",7a,98,db,fb) + ::Std_obj::string(files1)) + HX_(") - using default\x1b""[0m",58,30,f6,47)));
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g6 = _hx_e;
HXLINE( 441)				{
HXLINE( 441)					null();
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 443)		if (defines->exists(HX_("NDKV20+",ec,ad,da,43))) {
HXLINE( 444)			::Log_obj::info(HX_("",00,00,00,00),::Array_obj< ::String >::fromData( _hx_array_data_0d5d1e5d_20,5)->join(HX_("\n",0a,00,00,00)));
            		}
            		else {
HXLINE( 453)			::Setup_obj::globallySetThePlatform(root,defines);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Setup_obj,setupAndroidNdk,(void))

void Setup_obj::globallySetThePlatform(::String root, ::haxe::ds::StringMap defines){
            	HX_STACKFRAME(&_hx_pos_9294dd72778aebd6_457_globallySetThePlatform)
HXLINE( 458)		int androidPlatform = 5;
HXLINE( 459)		if (!(defines->exists(HX_("PLATFORM",b3,42,7f,c1)))) {
HXLINE( 461)			int _g = 5;
HXDLIN( 461)			while((_g < 100)){
HXLINE( 461)				_g = (_g + 1);
HXDLIN( 461)				int i = (_g - 1);
HXLINE( 463)				::String test = (HX_("android-",1e,2e,63,73) + i);
HXLINE( 464)				if (defines->exists(test)) {
HXLINE( 466)					defines->set(HX_("PLATFORM",b3,42,7f,c1),test);
HXLINE( 467)					goto _hx_goto_21;
            				}
            			}
            			_hx_goto_21:;
            		}
HXLINE( 472)		if (defines->exists(HX_("PLATFORM",b3,42,7f,c1))) {
HXLINE( 474)			::String platform = defines->get_string(HX_("PLATFORM",b3,42,7f,c1));
HXLINE( 475)			 ::Dynamic id = ::Std_obj::parseInt(platform.substr(HX_("android-",1e,2e,63,73).length,null()));
HXLINE( 476)			bool _hx_tmp;
HXDLIN( 476)			if (::hx::IsNotEq( id,0 )) {
HXLINE( 476)				_hx_tmp = ::hx::IsNull( id );
            			}
            			else {
HXLINE( 476)				_hx_tmp = true;
            			}
HXDLIN( 476)			if (_hx_tmp) {
HXLINE( 477)				::Log_obj::error(((HX_("Badly formed android PLATFORM \"",f5,83,88,67) + platform) + HX_("\" - should be like android-123",ec,0a,19,a3)),null(),null(),null());
            			}
HXLINE( 478)			androidPlatform = ( (int)(id) );
HXLINE( 479)			::Log_obj::info(HX_("",00,00,00,00),((HX_("\x1b""[33;1mUsing Android NDK platform: ",88,f8,f9,2a) + defines->get_string(HX_("PLATFORM",b3,42,7f,c1))) + HX_("\x1b""[0m",1d,fa,1d,12)));
            		}
            		else {
HXLINE( 483)			::String base = (root + HX_("/platforms",51,ac,2e,e0));
HXLINE( 484)			int best = 0;
HXLINE( 485)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 487)				int _g1 = 0;
HXDLIN( 487)				::Array< ::String > _g2 = ::sys::FileSystem_obj::readDirectory(base);
HXDLIN( 487)				while((_g1 < _g2->length)){
HXLINE( 487)					::String file = _g2->__get(_g1);
HXDLIN( 487)					_g1 = (_g1 + 1);
HXLINE( 489)					if ((file.substr(0,8) == HX_("android-",1e,2e,63,73))) {
HXLINE( 491)						 ::Dynamic platform1 = ::Std_obj::parseInt(file.substr(8,null()));
HXLINE( 492)						if (::hx::IsGreater( platform1,best )) {
HXLINE( 493)							best = ( (int)(platform1) );
            						}
            					}
            				}
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g3 = _hx_e;
HXLINE( 496)					{
HXLINE( 496)						null();
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 498)			if ((best == 0)) {
HXLINE( 500)				::Log_obj::error(((HX_("Could not detect Android API platforms in \"",0f,86,39,31) + base) + HX_("\"",22,00,00,00)),null(),null(),null());
            			}
HXLINE( 504)			::Log_obj::info(HX_("",00,00,00,00),((HX_("\x1b""[33;1mUsing newest Android NDK platform: ",bc,82,5f,d5) + best) + HX_("\x1b""[0m",1d,fa,1d,12)));
HXLINE( 505)			defines->set(HX_("PLATFORM",b3,42,7f,c1),(HX_("android-",1e,2e,63,73) + best));
HXLINE( 506)			androidPlatform = best;
            		}
HXLINE( 508)		defines->set(HX_("ANDROID_PLATFORM_DEFINE",17,03,a0,5f),(HX_("HXCPP_ANDROID_PLATFORM=",2e,53,2c,39) + androidPlatform));
HXLINE( 509)		if (::Log_obj::verbose) {
HXLINE( 509)			::Log_obj::println(HX_("",00,00,00,00));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Setup_obj,globallySetThePlatform,(void))

void Setup_obj::setupBlackBerryNativeSDK( ::haxe::ds::StringMap ioDefines){
            	HX_STACKFRAME(&_hx_pos_9294dd72778aebd6_513_setupBlackBerryNativeSDK)
HXLINE( 514)		if (!(ioDefines->exists(HX_("BLACKBERRY_NDK_ROOT",54,a6,36,9f)))) {
HXLINE( 516)			::Log_obj::error(HX_("Could not find BLACKBERRY_NDK_ROOT variable",03,dd,5d,15),null(),null(),null());
            		}
HXLINE( 519)		::String fileName = ioDefines->get_string(HX_("BLACKBERRY_NDK_ROOT",54,a6,36,9f));
HXLINE( 520)		if (::BuildTool_obj::isWindows) {
HXLINE( 522)			fileName = (fileName + HX_("\\bbndk-env.bat",20,55,e4,fd));
            		}
            		else {
HXLINE( 526)			fileName = (fileName + HX_("/bbndk-env.sh",fd,e3,ad,92));
            		}
HXLINE( 529)		if (::sys::FileSystem_obj::exists(fileName)) {
HXLINE( 531)			 ::sys::io::FileInput fin = ::sys::io::File_obj::read(fileName,false);
HXLINE( 532)			try {
            				HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
            				HX_STACK_CATCHABLE( ::haxe::ValueException, 1);
HXLINE( 534)				while(true){
HXLINE( 536)					::String str = fin->readLine();
HXLINE( 537)					::Array< ::String > split = str.split(HX_("=",3d,00,00,00));
HXLINE( 538)					int name = (split->__get(0).lastIndexOf(HX_(" ",20,00,00,00),null()) + 1);
HXDLIN( 538)					::String name1 = ::StringTools_obj::trim(split->__get(0).substr(name,null()));
HXLINE( 539)					::String _hx_switch_0 = name1;
            					if (  (_hx_switch_0==HX_("QNX_HOST",8c,be,cc,d6)) ||  (_hx_switch_0==HX_("QNX_HOST_VERSION",05,3f,3e,41)) ||  (_hx_switch_0==HX_("QNX_TARGET",75,d7,5b,6e)) ||  (_hx_switch_0==HX_("QNX_TARGET_VERSION",ee,e8,5d,1f)) ){
HXLINE( 542)						::String value = split->__get(1);
HXLINE( 543)						bool _hx_tmp;
HXDLIN( 543)						if (::StringTools_obj::startsWith(value,HX_("${",d7,1f,00,00))) {
HXLINE( 543)							_hx_tmp = (split->length > 2);
            						}
            						else {
HXLINE( 543)							_hx_tmp = false;
            						}
HXDLIN( 543)						if (_hx_tmp) {
HXLINE( 545)							value = split->__get(2).substr(0,(split->__get(2).length - 1));
            						}
HXLINE( 547)						if (::StringTools_obj::startsWith(value,HX_("\"",22,00,00,00))) {
HXLINE( 549)							value = value.substr(1,null());
            						}
HXLINE( 551)						if (::StringTools_obj::endsWith(value,HX_("\"",22,00,00,00))) {
HXLINE( 553)							value = value.substr(0,(value.length - 1));
            						}
HXLINE( 555)						bool _hx_tmp1;
HXDLIN( 555)						if ((name1 != HX_("QNX_HOST_VERSION",05,3f,3e,41))) {
HXLINE( 555)							_hx_tmp1 = (name1 == HX_("QNX_TARGET_VERSION",ee,e8,5d,1f));
            						}
            						else {
HXLINE( 555)							_hx_tmp1 = true;
            						}
HXDLIN( 555)						if (_hx_tmp1) {
HXLINE( 557)							if (::hx::IsNotNull( ::Sys_obj::getEnv(name1) )) {
HXLINE( 559)								continue;
            							}
            						}
            						else {
HXLINE( 564)							value = ::StringTools_obj::replace(value,HX_("$BASE_DIR",e3,6e,2b,21),ioDefines->get_string(HX_("BLACKBERRY_NDK_ROOT",54,a6,36,9f)));
HXLINE( 565)							value = ::StringTools_obj::replace(value,HX_("%BASE_DIR%",c1,0f,20,a5),ioDefines->get_string(HX_("BLACKBERRY_NDK_ROOT",54,a6,36,9f)));
HXLINE( 566)							value = ::StringTools_obj::replace(value,HX_("$TARGET",75,52,74,12),HX_("qnx6",db,fc,04,4b));
HXLINE( 567)							value = ::StringTools_obj::replace(value,HX_("%TARGET%",2f,46,86,4c),HX_("qnx6",db,fc,04,4b));
HXLINE( 568)							value = ::StringTools_obj::replace(value,HX_("$QNX_HOST_VERSION",29,c7,87,ab),::Sys_obj::getEnv(HX_("QNX_HOST_VERSION",05,3f,3e,41)));
HXLINE( 569)							value = ::StringTools_obj::replace(value,HX_("$QNX_TARGET_VERSION",12,c2,34,d5),::Sys_obj::getEnv(HX_("QNX_TARGET_VERSION",ee,e8,5d,1f)));
HXLINE( 570)							value = ::StringTools_obj::replace(value,HX_("%QNX_HOST_VERSION%",bb,6b,aa,7d),::Sys_obj::getEnv(HX_("QNX_HOST_VERSION",05,3f,3e,41)));
HXLINE( 571)							value = ::StringTools_obj::replace(value,HX_("%QNX_TARGET_VERSION%",72,b2,59,1f),::Sys_obj::getEnv(HX_("QNX_TARGET_VERSION",ee,e8,5d,1f)));
            						}
HXLINE( 573)						ioDefines->set(name1,value);
HXLINE( 574)						::Sys_obj::putEnv(name1,value);
HXLINE( 541)						goto _hx_goto_25;
            					}
            					_hx_goto_25:;
            				}
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::haxe::io::Eof ex = _hx_e;
            				}
            				else if (_hx_e.IsClass<  ::haxe::ValueException >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::haxe::ValueException _g = _hx_e;
HXLINE( 578)					{
HXLINE( 578)						null();
            					}
HXLINE( 532)					if (!(::Std_obj::isOfType(_g->value,::hx::ClassOf< ::haxe::io::Eof >()))) {
HXLINE( 532)						HX_STACK_DO_THROW(_g);
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 580)			fin->close();
            		}
            		else {
HXLINE( 584)			::Log_obj::error(((HX_("Could not find \"",c7,12,67,a6) + fileName) + HX_("\"",22,00,00,00)),null(),null(),null());
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Setup_obj,setupBlackBerryNativeSDK,(void))

void Setup_obj::setupMSVC( ::haxe::ds::StringMap ioDefines,bool in64,bool inArm64,bool isWinRT){
            	HX_GC_STACKFRAME(&_hx_pos_9294dd72778aebd6_589_setupMSVC)
HXLINE( 590)		bool detectMsvc;
HXDLIN( 590)		if (!(ioDefines->exists(HX_("NO_AUTO_MSVC",65,d1,16,d7)))) {
HXLINE( 590)			detectMsvc = !(ioDefines->exists(HX_("HXCPP_MSVC_CUSTOM",11,80,3b,a4)));
            		}
            		else {
HXLINE( 590)			detectMsvc = false;
            		}
HXLINE( 593)		if (ioDefines->exists(HX_("HXCPP_MSVC_VER",e3,b5,99,79))) {
HXLINE( 595)			::String val = ioDefines->get_string(HX_("HXCPP_MSVC_VER",e3,b5,99,79));
HXLINE( 596)			if ((val == HX_("",00,00,00,00))) {
HXLINE( 597)				detectMsvc = false;
            			}
            			else {
HXLINE( 600)				 ::Dynamic ival = ::Std_obj::parseInt(ioDefines->get_string(HX_("HXCPP_MSVC_VER",e3,b5,99,79)));
HXLINE( 601)				if (::hx::IsGreater( ival,0 )) {
HXLINE( 603)					::String varName = ((HX_("VS",3d,4b,00,00) + ival) + HX_("COMNTOOLS",ce,59,a7,1f));
HXLINE( 604)					::String where = ::Sys_obj::getEnv(varName);
HXLINE( 605)					if (::hx::IsNull( where )) {
HXLINE( 607)						{
HXLINE( 607)							 ::Dynamic env = ::Sys_obj::environment()->keys();
HXDLIN( 607)							while(( (bool)(env->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 607)								::String env1 = ( (::String)(env->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 609)								if ((env1.substr(0,2) == HX_("VS",3d,4b,00,00))) {
HXLINE( 611)									::Log_obj::info((HX_("Found VS variable: ",67,fd,a8,c2) + env1),null());
            								}
            							}
            						}
HXLINE( 615)						::Log_obj::error((HX_("Could not find specified MSVC version: ",5c,48,0f,e5) + ival),null(),null(),null());
            					}
HXLINE( 618)					ioDefines->set(HX_("HXCPP_MSVC",1f,77,99,71),where);
HXLINE( 619)					::Sys_obj::putEnv(HX_("HXCPP_MSVC",1f,77,99,71),where);
HXLINE( 620)					::Log_obj::info(HX_("",00,00,00,00),((((((HX_("Using MSVC Ver ",ae,cd,77,10) + ival) + HX_(" in ",7b,e0,76,15)) + where) + HX_(" (",08,1c,00,00)) + varName) + HX_(")",29,00,00,00)));
            				}
            				else {
HXLINE( 624)					::Log_obj::info(HX_("",00,00,00,00),(HX_("Using specified MSVC Ver ",be,af,29,17) + val));
HXLINE( 625)					ioDefines->set(HX_("HXCPP_MSVC",1f,77,99,71),val);
HXLINE( 626)					::Sys_obj::putEnv(HX_("HXCPP_MSVC",1f,77,99,71),val);
            				}
            			}
            		}
HXLINE( 631)		if (detectMsvc) {
HXLINE( 633)			::String extra = HX_("",00,00,00,00);
HXLINE( 634)			if (isWinRT) {
HXLINE( 635)				extra = (extra + HX_("-winrt",91,87,79,c8));
            			}
HXLINE( 636)			if (inArm64) {
HXLINE( 637)				extra = (extra + HX_("-arm64",4d,b9,9a,23));
            			}
            			else {
HXLINE( 638)				if (in64) {
HXLINE( 639)					extra = (extra + HX_("64",3e,2f,00,00));
            				}
            			}
HXLINE( 640)			bool xpCompat = false;
HXLINE( 641)			if (ioDefines->exists(HX_("HXCPP_WINXP_COMPAT",f9,3a,d6,91))) {
HXLINE( 643)				::Sys_obj::putEnv(HX_("HXCPP_WINXP_COMPAT",f9,3a,d6,91),HX_("1",31,00,00,00));
HXLINE( 644)				xpCompat = true;
            			}
HXLINE( 646)			::String _hx_tmp;
HXDLIN( 646)			if (ioDefines->exists(HX_("windows_arm_host",e7,0f,67,68))) {
HXLINE( 646)				_hx_tmp = HX_("x86",76,3f,5b,00);
            			}
            			else {
HXLINE( 646)				_hx_tmp = HX_("x64",b6,3d,5b,00);
            			}
HXDLIN( 646)			::Sys_obj::putEnv(HX_("msvc_host_arch",e1,5a,29,3b),_hx_tmp);
HXLINE( 648)			 ::sys::io::Process vc_setup_proc =  ::sys::io::Process_obj::__alloc( HX_CTX ,HX_("cmd.exe",9e,20,7a,5c),::Array_obj< ::String >::__new(2)->init(0,HX_("/C",34,29,00,00))->init(1,(((::BuildTool_obj::HXCPP + HX_("\\toolchain\\msvc",82,54,10,e5)) + extra) + HX_("-setup.bat",97,c5,7e,5b))),null());
HXLINE( 649)			bool vars_found = false;
HXLINE( 650)			::String error_string = HX_("",00,00,00,00);
HXLINE( 651)			::Array< ::String > output = ::Array_obj< ::String >::__new();
HXLINE( 652)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 653)				while(true){
HXLINE( 655)					::String str = vc_setup_proc->_hx_stdout->readLine();
HXLINE( 656)					if ((str == HX_("HXCPP_VARS",b8,b6,7e,77))) {
HXLINE( 657)						vars_found = true;
            					}
            					else {
HXLINE( 658)						if (!(vars_found)) {
HXLINE( 660)							bool _hx_tmp1;
HXDLIN( 660)							if ((str.substr(0,5) != HX_("Error",a8,3b,57,06))) {
HXLINE( 660)								_hx_tmp1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("missing",66,bf,84,33),HX_("",00,00,00,00))->match(str);
            							}
            							else {
HXLINE( 660)								_hx_tmp1 = true;
            							}
HXDLIN( 660)							if (_hx_tmp1) {
HXLINE( 661)								error_string = str;
            							}
HXLINE( 663)							output->push(str);
            						}
            						else {
HXLINE( 667)							int pos = str.indexOf(HX_("=",3d,00,00,00),null());
HXLINE( 668)							::String name = str.substr(0,pos);
HXLINE( 669)							::String _hx_switch_0 = name.toLowerCase();
            							if (  (_hx_switch_0==HX_("devenvdir",15,73,83,28)) ||  (_hx_switch_0==HX_("framework35version",78,5e,4b,66)) ||  (_hx_switch_0==HX_("frameworkdir",8f,0b,05,74)) ||  (_hx_switch_0==HX_("frameworkdir32",ee,79,0a,48)) ||  (_hx_switch_0==HX_("frameworkversion",5a,fe,9b,b8)) ||  (_hx_switch_0==HX_("frameworkversion32",79,f5,5b,16)) ||  (_hx_switch_0==HX_("hxcpp_hack_pdbsrv",3b,c8,a8,02)) ||  (_hx_switch_0==HX_("hxcpp_xp_define",76,95,30,fe)) ||  (_hx_switch_0==HX_("include",28,fe,f6,51)) ||  (_hx_switch_0==HX_("lib",45,4f,52,00)) ||  (_hx_switch_0==HX_("libpath",6a,bb,1d,3e)) ||  (_hx_switch_0==HX_("path",a5,e5,51,4a)) ||  (_hx_switch_0==HX_("vcinstalldir",7f,4c,7d,6f)) ||  (_hx_switch_0==HX_("windowssdkdir",96,b5,0d,72)) ){
HXLINE( 676)								::String value = str.substr((pos + 1),null());
HXLINE( 677)								ioDefines->set(name,value);
HXLINE( 678)								::Log_obj::info(HX_("",00,00,00,00),(((HX_("  msvs ",9d,16,25,0d) + name) + HX_("=",3d,00,00,00)) + value));
HXLINE( 679)								::Sys_obj::putEnv(name,value);
HXLINE( 671)								goto _hx_goto_29;
            							}
            							_hx_goto_29:;
            						}
            					}
            				}
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE( 683)					{
HXLINE( 683)						null();
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 686)			vc_setup_proc->exitCode(null());
HXLINE( 687)			vc_setup_proc->close();
HXLINE( 688)			bool _hx_tmp2;
HXDLIN( 688)			if (vars_found) {
HXLINE( 688)				_hx_tmp2 = (error_string != HX_("",00,00,00,00));
            			}
            			else {
HXLINE( 688)				_hx_tmp2 = true;
            			}
HXDLIN( 688)			if (_hx_tmp2) {
HXLINE( 690)				{
HXLINE( 690)					int _g1 = 0;
HXDLIN( 690)					while((_g1 < output->length)){
HXLINE( 690)						::String o = output->__get(_g1);
HXDLIN( 690)						_g1 = (_g1 + 1);
HXLINE( 692)						::Log_obj::info(o,null());
            					}
            				}
HXLINE( 695)				if ((error_string != HX_("",00,00,00,00))) {
HXLINE( 697)					::Log_obj::error(error_string,null(),null(),null());
            				}
            				else {
HXLINE( 702)					::Log_obj::info(HX_("Missing HXCPP_VARS",52,91,d9,7e),null());
            				}
HXLINE( 706)				::Log_obj::error(HX_("Could not automatically setup MSVC",7f,14,4a,c3),null(),null(),null());
            			}
            		}
HXLINE( 711)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 713)			 ::sys::io::Process proc =  ::sys::io::Process_obj::__alloc( HX_CTX ,HX_("cl.exe",4d,3c,50,e3),::Array_obj< ::String >::__new(0),null());
HXLINE( 714)			::String str1 = proc->_hx_stderr->readLine();
HXLINE( 715)			proc->close();
HXLINE( 716)			if ((str1 > HX_("",00,00,00,00))) {
HXLINE( 718)				::Log_obj::info(HX_("",00,00,00,00),(HX_("MSVC output:",0c,d5,9d,67) + str1));
HXLINE( 719)				 ::EReg reg =  ::EReg_obj::__alloc( HX_CTX ,HX_("(\\d{2})\\.\\d+",de,59,ee,02),HX_("i",69,00,00,00));
HXLINE( 720)				if (reg->match(str1)) {
HXLINE( 722)					 ::Dynamic cl_version = ::Std_obj::parseInt(reg->matched(1));
HXLINE( 723)					::Log_obj::info(HX_("",00,00,00,00),(HX_("Using MSVC version: ",ed,30,cb,e7) + cl_version));
HXLINE( 724)					ioDefines->set(HX_("MSVC_VER",d7,7c,38,e5),(cl_version + HX_("",00,00,00,00)));
HXLINE( 725)					if (::hx::IsGreaterEq( cl_version,17 )) {
HXLINE( 726)						ioDefines->set(HX_("MSVC17+",52,38,78,62),HX_("1",31,00,00,00));
            					}
HXLINE( 727)					if (::hx::IsGreaterEq( cl_version,18 )) {
HXLINE( 728)						ioDefines->set(HX_("MSVC18+",31,39,78,62),HX_("1",31,00,00,00));
            					}
HXLINE( 729)					if (::hx::IsEq( cl_version,19 )) {
HXLINE( 730)						ioDefines->set(HX_("MSVC19",bb,49,c8,cc),HX_("1",31,00,00,00));
            					}
HXLINE( 731)					::BuildTool_obj::sAllowNumProcs = ::hx::IsGreaterEq( cl_version,14 );
HXLINE( 732)					int threads = ::BuildTool_obj::getThreadCount();
HXLINE( 733)					bool _hx_tmp3;
HXDLIN( 733)					if ((threads > 1)) {
HXLINE( 733)						_hx_tmp3 = ::hx::IsGreaterEq( cl_version,18 );
            					}
            					else {
HXLINE( 733)						_hx_tmp3 = false;
            					}
HXDLIN( 733)					if (_hx_tmp3) {
HXLINE( 734)						ioDefines->set(HX_("HXCPP_FORCE_PDB_SERVER",94,64,84,07),HX_("1",31,00,00,00));
            					}
            				}
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g2 = _hx_e;
HXLINE( 737)				{
HXLINE( 737)					null();
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Setup_obj,setupMSVC,(void))

::String Setup_obj::toPath(::String inPath){
            	HX_STACKFRAME(&_hx_pos_9294dd72778aebd6_742_toPath)
HXLINE( 743)		if (!(::BuildTool_obj::isWindows)) {
HXLINE( 744)			return inPath;
            		}
HXLINE( 745)		::Array< ::String > bits = inPath.split(HX_("/",2f,00,00,00));
HXLINE( 746)		return bits->join(HX_("\\",5c,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Setup_obj,toPath,return )


Setup_obj::Setup_obj()
{
}

bool Setup_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"setup") ) { outValue = setup_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"toPath") ) { outValue = toPath_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"setupMSVC") ) { outValue = setupMSVC_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"setupMingw") ) { outValue = setupMingw_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getNdkVersion") ) { outValue = getNdkVersion_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isRaspberryPi") ) { outValue = isRaspberryPi_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"startPdbServer") ) { outValue = startPdbServer_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"initHXCPPConfig") ) { outValue = initHXCPPConfig_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setupEmscripten") ) { outValue = setupEmscripten_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setupAndroidNdk") ) { outValue = setupAndroidNdk_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"findAndroidNdkRoot") ) { outValue = findAndroidNdkRoot_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"globallySetThePlatform") ) { outValue = globallySetThePlatform_dyn(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"setupBlackBerryNativeSDK") ) { outValue = setupBlackBerryNativeSDK_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Setup_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Setup_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Setup_obj::__mClass;

static ::String Setup_obj_sStaticFields[] = {
	HX_("findAndroidNdkRoot",e1,1e,fe,01),
	HX_("getNdkVersion",59,a4,17,95),
	HX_("initHXCPPConfig",05,ea,94,90),
	HX_("setupMingw",85,90,6b,ea),
	HX_("setupEmscripten",79,10,e4,83),
	HX_("isRaspberryPi",19,0a,93,4d),
	HX_("startPdbServer",8f,88,90,4e),
	HX_("setup",7d,ae,2f,7a),
	HX_("setupAndroidNdk",63,64,5b,30),
	HX_("globallySetThePlatform",92,3a,75,be),
	HX_("setupBlackBerryNativeSDK",4f,15,36,9d),
	HX_("setupMSVC",10,e5,d9,a2),
	HX_("toPath",c0,50,0b,80),
	::String(null())
};

void Setup_obj::__register()
{
	Setup_obj _hx_dummy;
	Setup_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Setup",5d,1e,5d,0d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Setup_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Setup_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Setup_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Setup_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Setup_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

