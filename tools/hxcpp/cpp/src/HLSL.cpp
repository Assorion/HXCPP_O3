// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_HLSL
#include <HLSL.h>
#endif
#ifndef INCLUDED_Log
#include <Log.h>
#endif
#ifndef INCLUDED_PathManager
#include <PathManager.h>
#endif
#ifndef INCLUDED_ProcessManager
#include <ProcessManager.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_47f98ba540e9223d_12_new,"HLSL","new",0x7f5e040f,"HLSL.new","HLSL.hx",12,0x11ca7241)
HX_LOCAL_STACK_FRAME(_hx_pos_47f98ba540e9223d_20_build,"HLSL","build",0xb7ac989d,"HLSL.build","HLSL.hx",20,0x11ca7241)

void HLSL_obj::__construct(::String inFile,::String inProfile,::String inVariable,::String inTarget){
            	HX_STACKFRAME(&_hx_pos_47f98ba540e9223d_12_new)
HXLINE(  13)		this->file = inFile;
HXLINE(  14)		this->profile = inProfile;
HXLINE(  15)		this->variable = inVariable;
HXLINE(  16)		this->target = inTarget;
            	}

Dynamic HLSL_obj::__CreateEmpty() { return new HLSL_obj; }

void *HLSL_obj::_hx_vtable = 0;

Dynamic HLSL_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< HLSL_obj > _hx_result = new HLSL_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool HLSL_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x042446c1;
}

void HLSL_obj::build(){
            	HX_STACKFRAME(&_hx_pos_47f98ba540e9223d_20_build)
HXLINE(  21)		if (!(::sys::FileSystem_obj::exists(::haxe::io::Path_obj::directory(this->target)))) {
HXLINE(  23)			::PathManager_obj::mkdir(::haxe::io::Path_obj::directory(this->target),null());
            		}
HXLINE(  28)		Float srcStamp = ( ( ::Date)(::sys::FileSystem_obj::stat(this->file)->__Field(HX_("mtime",fa,06,aa,0f),::hx::paccDynamic)) )->getTime();
HXLINE(  29)		bool _hx_tmp;
HXDLIN(  29)		if (::sys::FileSystem_obj::exists(this->target)) {
HXLINE(  29)			_hx_tmp = (( ( ::Date)(::sys::FileSystem_obj::stat(this->target)->__Field(HX_("mtime",fa,06,aa,0f),::hx::paccDynamic)) )->getTime() < srcStamp);
            		}
            		else {
HXLINE(  29)			_hx_tmp = true;
            		}
HXDLIN(  29)		if (_hx_tmp) {
HXLINE(  31)			::String exe = HX_("fxc.exe",75,e8,c0,ab);
HXLINE(  32)			::Array< ::String > args = ::Array_obj< ::String >::__new(8)->init(0,HX_("/nologo",9b,81,e4,ce))->init(1,HX_("/T",45,29,00,00))->init(2,this->profile)->init(3,this->file)->init(4,HX_("/Vn",47,f5,23,00))->init(5,this->variable)->init(6,HX_("/Fh",51,e7,23,00))->init(7,this->target);
HXLINE(  34)			int result = ::ProcessManager_obj::runCommand(HX_("",00,00,00,00),exe,args,null(),null(),null(),null());
HXLINE(  35)			if ((result != 0)) {
HXLINE(  37)				::Log_obj::error(((HX_("Could not compile shader \"",00,20,df,39) + this->file) + HX_("\"",22,00,00,00)),null(),null(),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(HLSL_obj,build,(void))


::hx::ObjectPtr< HLSL_obj > HLSL_obj::__new(::String inFile,::String inProfile,::String inVariable,::String inTarget) {
	::hx::ObjectPtr< HLSL_obj > __this = new HLSL_obj();
	__this->__construct(inFile,inProfile,inVariable,inTarget);
	return __this;
}

::hx::ObjectPtr< HLSL_obj > HLSL_obj::__alloc(::hx::Ctx *_hx_ctx,::String inFile,::String inProfile,::String inVariable,::String inTarget) {
	HLSL_obj *__this = (HLSL_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(HLSL_obj), true, "HLSL"));
	*(void **)__this = HLSL_obj::_hx_vtable;
	__this->__construct(inFile,inProfile,inVariable,inTarget);
	return __this;
}

HLSL_obj::HLSL_obj()
{
}

void HLSL_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(HLSL);
	HX_MARK_MEMBER_NAME(file,"file");
	HX_MARK_MEMBER_NAME(profile,"profile");
	HX_MARK_MEMBER_NAME(target,"target");
	HX_MARK_MEMBER_NAME(variable,"variable");
	HX_MARK_END_CLASS();
}

void HLSL_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(file,"file");
	HX_VISIT_MEMBER_NAME(profile,"profile");
	HX_VISIT_MEMBER_NAME(target,"target");
	HX_VISIT_MEMBER_NAME(variable,"variable");
}

::hx::Val HLSL_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"file") ) { return ::hx::Val( file ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"build") ) { return ::hx::Val( build_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { return ::hx::Val( target ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"profile") ) { return ::hx::Val( profile ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"variable") ) { return ::hx::Val( variable ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val HLSL_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"file") ) { file=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"target") ) { target=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"profile") ) { profile=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"variable") ) { variable=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void HLSL_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("file",7c,ce,bb,43));
	outFields->push(HX_("profile",29,49,49,f3));
	outFields->push(HX_("target",51,f3,ec,86));
	outFields->push(HX_("variable",3c,12,0d,69));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo HLSL_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(HLSL_obj,file),HX_("file",7c,ce,bb,43)},
	{::hx::fsString,(int)offsetof(HLSL_obj,profile),HX_("profile",29,49,49,f3)},
	{::hx::fsString,(int)offsetof(HLSL_obj,target),HX_("target",51,f3,ec,86)},
	{::hx::fsString,(int)offsetof(HLSL_obj,variable),HX_("variable",3c,12,0d,69)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *HLSL_obj_sStaticStorageInfo = 0;
#endif

static ::String HLSL_obj_sMemberFields[] = {
	HX_("file",7c,ce,bb,43),
	HX_("profile",29,49,49,f3),
	HX_("target",51,f3,ec,86),
	HX_("variable",3c,12,0d,69),
	HX_("build",2e,db,ea,ba),
	::String(null()) };

::hx::Class HLSL_obj::__mClass;

void HLSL_obj::__register()
{
	HLSL_obj _hx_dummy;
	HLSL_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("HLSL",9d,50,d1,2f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(HLSL_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< HLSL_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HLSL_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HLSL_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

