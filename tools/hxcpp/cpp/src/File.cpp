// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_File
#include <File.h>
#endif
#ifndef INCLUDED_FileGroup
#include <FileGroup.h>
#endif
#ifndef INCLUDED_Log
#include <Log.h>
#endif
#ifndef INCLUDED_PathManager
#include <PathManager.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_crypto_Md5
#include <haxe/crypto/Md5.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_sys_thread_Mutex
#include <sys/thread/Mutex.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0bfe5751cf1e51a3_28_new,"File","new",0x26d8198e,"File.new","File.hx",28,0xcc83d1a2)
HX_LOCAL_STACK_FRAME(_hx_pos_0bfe5751cf1e51a3_43_getCacheProject,"File","getCacheProject",0x101ef89b,"File.getCacheProject","File.hx",43,0xcc83d1a2)
HX_LOCAL_STACK_FRAME(_hx_pos_0bfe5751cf1e51a3_45_isNvcc,"File","isNvcc",0x896d4584,"File.isNvcc","File.hx",45,0xcc83d1a2)
HX_LOCAL_STACK_FRAME(_hx_pos_0bfe5751cf1e51a3_47_isResource,"File","isResource",0xa8e6c76a,"File.isResource","File.hx",47,0xcc83d1a2)
HX_LOCAL_STACK_FRAME(_hx_pos_0bfe5751cf1e51a3_51_keep,"File","keep",0xd4428f97,"File.keep","File.hx",51,0xcc83d1a2)
HX_LOCAL_STACK_FRAME(_hx_pos_0bfe5751cf1e51a3_56_getTags,"File","getTags",0x94c4dcbd,"File.getTags","File.hx",56,0xcc83d1a2)
HX_LOCAL_STACK_FRAME(_hx_pos_0bfe5751cf1e51a3_61_setTags,"File","setTags",0x87c66dc9,"File.setTags","File.hx",61,0xcc83d1a2)
HX_LOCAL_STACK_FRAME(_hx_pos_0bfe5751cf1e51a3_65_computeDependHash,"File","computeDependHash",0x2628bb5f,"File.computeDependHash","File.hx",65,0xcc83d1a2)
HX_LOCAL_STACK_FRAME(_hx_pos_0bfe5751cf1e51a3_74_getDependString,"File","getDependString",0x63fcb741,"File.getDependString","File.hx",74,0xcc83d1a2)
HX_LOCAL_STACK_FRAME(_hx_pos_0bfe5751cf1e51a3_115_isOutOfDate,"File","isOutOfDate",0xd8188bf7,"File.isOutOfDate","File.hx",115,0xcc83d1a2)
HX_LOCAL_STACK_FRAME(_hx_pos_0bfe5751cf1e51a3_79_getFileHash,"File","getFileHash",0x8d16024e,"File.getFileHash","File.hx",79,0xcc83d1a2)
HX_LOCAL_STACK_FRAME(_hx_pos_0bfe5751cf1e51a3_14_boot,"File","boot",0xce574344,"File.boot","File.hx",14,0xcc83d1a2)
HX_LOCAL_STACK_FRAME(_hx_pos_0bfe5751cf1e51a3_25_boot,"File","boot",0xce574344,"File.boot","File.hx",25,0xcc83d1a2)

void File_obj::__construct(::String inName, ::FileGroup inGroup){
            	HX_STACKFRAME(&_hx_pos_0bfe5751cf1e51a3_28_new)
HXLINE(  29)		this->mName = inName;
HXLINE(  30)		this->mDir = HX_("",00,00,00,00);
HXLINE(  31)		bool _hx_tmp;
HXDLIN(  31)		if ((inGroup->mDir != HX_("",00,00,00,00))) {
HXLINE(  31)			_hx_tmp = !(::PathManager_obj::isAbsolute(this->mName));
            		}
            		else {
HXLINE(  31)			_hx_tmp = false;
            		}
HXDLIN(  31)		if (_hx_tmp) {
HXLINE(  32)			this->mDir = inGroup->mDir;
            		}
HXLINE(  33)		if ((this->mDir != HX_("",00,00,00,00))) {
HXLINE(  33)			 ::File _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  33)			_hx_tmp1->mDir = (_hx_tmp1->mDir + HX_("/",2f,00,00,00));
            		}
HXLINE(  35)		this->mGroup = inGroup;
HXLINE(  36)		this->mDepends = ::Array_obj< ::String >::__new(0);
HXLINE(  37)		this->mCompilerFlags = ::Array_obj< ::String >::__new(0);
HXLINE(  38)		this->mEmbedName = null();
HXLINE(  39)		this->mScramble = null();
HXLINE(  40)		this->mTags = null();
            	}

Dynamic File_obj::__CreateEmpty() { return new File_obj; }

void *File_obj::_hx_vtable = 0;

Dynamic File_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< File_obj > _hx_result = new File_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool File_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x02e7f0c0;
}

::String File_obj::getCacheProject(){
            	HX_STACKFRAME(&_hx_pos_0bfe5751cf1e51a3_43_getCacheProject)
HXDLIN(  43)		return this->mGroup->getCacheProject();
            	}


HX_DEFINE_DYNAMIC_FUNC0(File_obj,getCacheProject,return )

bool File_obj::isNvcc(){
            	HX_STACKFRAME(&_hx_pos_0bfe5751cf1e51a3_45_isNvcc)
HXDLIN(  45)		return this->mGroup->mNvcc;
            	}


HX_DEFINE_DYNAMIC_FUNC0(File_obj,isNvcc,return )

bool File_obj::isResource(){
            	HX_STACKFRAME(&_hx_pos_0bfe5751cf1e51a3_47_isResource)
HXDLIN(  47)		return ::StringTools_obj::endsWith(this->mName,HX_(".rc",5f,4b,23,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(File_obj,isResource,return )

bool File_obj::keep( ::haxe::ds::StringMap inDefines){
            	HX_STACKFRAME(&_hx_pos_0bfe5751cf1e51a3_51_keep)
HXDLIN(  51)		if (::hx::IsNotNull( this->mFilterOut )) {
HXDLIN(  51)			return !(inDefines->exists(this->mFilterOut));
            		}
            		else {
HXDLIN(  51)			return true;
            		}
HXDLIN(  51)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(File_obj,keep,return )

::String File_obj::getTags(){
            	HX_STACKFRAME(&_hx_pos_0bfe5751cf1e51a3_56_getTags)
HXDLIN(  56)		if (::hx::IsNull( this->mTags )) {
HXDLIN(  56)			return this->mGroup->mTags;
            		}
            		else {
HXDLIN(  56)			return this->mTags;
            		}
HXDLIN(  56)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(File_obj,getTags,return )

::String File_obj::setTags(::String inTags){
            	HX_STACKFRAME(&_hx_pos_0bfe5751cf1e51a3_61_setTags)
HXDLIN(  61)		return (this->mTags = inTags);
            	}


HX_DEFINE_DYNAMIC_FUNC1(File_obj,setTags,return )

void File_obj::computeDependHash( ::haxe::ds::StringMap localCache){
            	HX_STACKFRAME(&_hx_pos_0bfe5751cf1e51a3_65_computeDependHash)
HXLINE(  66)		this->mDependHash = HX_("",00,00,00,00);
HXLINE(  67)		{
HXLINE(  67)			int _g = 0;
HXDLIN(  67)			::Array< ::String > _g1 = this->mDepends;
HXDLIN(  67)			while((_g < _g1->length)){
HXLINE(  67)				::String depend = _g1->__get(_g);
HXDLIN(  67)				_g = (_g + 1);
HXLINE(  68)				 ::File _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  68)				::String _hx_tmp1 = _hx_tmp->mDependHash;
HXDLIN(  68)				_hx_tmp->mDependHash = (_hx_tmp1 + ::File_obj::getFileHash(depend,localCache));
            			}
            		}
HXLINE(  69)		this->mDependHash = ::haxe::crypto::Md5_obj::encode(this->mDependHash);
            	}


HX_DEFINE_DYNAMIC_FUNC1(File_obj,computeDependHash,(void))

::String File_obj::getDependString(){
            	HX_STACKFRAME(&_hx_pos_0bfe5751cf1e51a3_74_getDependString)
HXDLIN(  74)		return ((HX_("FILES(",f1,75,ac,37) + this->mDepends->join(HX_(",",2c,00,00,00))) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(File_obj,getDependString,return )

bool File_obj::isOutOfDate(::String inObj, ::Dynamic dependDebug){
            	HX_STACKFRAME(&_hx_pos_0bfe5751cf1e51a3_115_isOutOfDate)
HXLINE( 116)		if (!(::sys::FileSystem_obj::exists(inObj))) {
HXLINE( 118)			return true;
            		}
HXLINE( 121)		Float obj_stamp = ( ( ::Date)(::sys::FileSystem_obj::stat(inObj)->__Field(HX_("mtime",fa,06,aa,0f),::hx::paccDynamic)) )->getTime();
HXLINE( 122)		if (this->mGroup->isOutOfDate(obj_stamp)) {
HXLINE( 124)			if (::hx::IsNotNull( dependDebug )) {
HXLINE( 125)				::String _hx_tmp = (this->mName + HX_("  - whole group is out of date ",34,67,28,11));
HXDLIN( 125)				::String _hx_tmp1 = ((((_hx_tmp + this->mGroup->getNewestFile()) + HX_(" ",20,00,00,00)) + obj_stamp) + HX_(" < ",84,7c,18,00));
HXDLIN( 125)				dependDebug((_hx_tmp1 + this->mGroup->mNewest));
            			}
HXLINE( 126)			return true;
            		}
HXLINE( 129)		::String source_name = (this->mDir + this->mName);
HXLINE( 130)		if (!(::sys::FileSystem_obj::exists(source_name))) {
HXLINE( 132)			::Log_obj::error(((HX_("Could not find source file \"",48,40,2f,dd) + source_name) + HX_("\"",22,00,00,00)),null(),null(),null());
            		}
HXLINE( 135)		Float source_stamp = ( ( ::Date)(::sys::FileSystem_obj::stat(source_name)->__Field(HX_("mtime",fa,06,aa,0f),::hx::paccDynamic)) )->getTime();
HXLINE( 136)		if ((obj_stamp < source_stamp)) {
HXLINE( 138)			if (::hx::IsNotNull( dependDebug )) {
HXLINE( 139)				dependDebug((this->mName + (((HX_(" - stamped ",31,c9,14,a6) + obj_stamp) + HX_(" < ",84,7c,18,00)) + source_stamp)));
            			}
HXLINE( 140)			return true;
            		}
HXLINE( 142)		{
HXLINE( 142)			int _g = 0;
HXDLIN( 142)			::Array< ::String > _g1 = this->mDepends;
HXDLIN( 142)			while((_g < _g1->length)){
HXLINE( 142)				::String depend = _g1->__get(_g);
HXDLIN( 142)				_g = (_g + 1);
HXLINE( 144)				if (!(::sys::FileSystem_obj::exists(depend))) {
HXLINE( 146)					::Log_obj::error(((((HX_("Could not find dependency \"",08,91,64,b7) + depend) + HX_("\" for \"",cd,c8,d9,55)) + this->mName) + HX_("\"",22,00,00,00)),null(),null(),null());
            				}
HXLINE( 149)				Float dependTime = ( ( ::Date)(::sys::FileSystem_obj::stat(depend)->__Field(HX_("mtime",fa,06,aa,0f),::hx::paccDynamic)) )->getTime();
HXLINE( 150)				if ((dependTime > obj_stamp)) {
HXLINE( 152)					if (::hx::IsNotNull( dependDebug )) {
HXLINE( 153)						dependDebug((this->mName + (((HX_(" - depend ",21,de,71,a4) + obj_stamp) + HX_(" < ",84,7c,18,00)) + dependTime)));
            					}
HXLINE( 154)					return true;
            				}
            			}
            		}
HXLINE( 157)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(File_obj,isOutOfDate,return )

 ::haxe::ds::StringMap File_obj::mFileHashes;

 ::sys::thread::Mutex File_obj::mDependMutex;

::String File_obj::getFileHash(::String inName, ::haxe::ds::StringMap localCache){
            	HX_STACKFRAME(&_hx_pos_0bfe5751cf1e51a3_79_getFileHash)
HXDLIN(  79)		if (::hx::IsNull( localCache )) {
HXLINE(  81)			::String result = ::File_obj::mFileHashes->get_string(inName);
HXLINE(  82)			if (::hx::IsNull( result )) {
HXLINE(  84)				::String content = ::sys::io::File_obj::getContent(inName);
HXLINE(  85)				result = ::haxe::crypto::Md5_obj::encode(content);
HXLINE(  86)				::File_obj::mFileHashes->set(inName,result);
            			}
HXLINE(  88)			return result;
            		}
            		else {
HXLINE(  92)			::String result1 = localCache->get_string(inName);
HXLINE(  93)			if (::hx::IsNotNull( result1 )) {
HXLINE(  94)				return result1;
            			}
HXLINE(  96)			::File_obj::mDependMutex->acquire();
HXLINE(  97)			result1 = ::File_obj::mFileHashes->get_string(inName);
HXLINE(  98)			::File_obj::mDependMutex->release();
HXLINE( 100)			if (::hx::IsNull( result1 )) {
HXLINE( 102)				::String content1 = ::sys::io::File_obj::getContent(inName);
HXLINE( 103)				result1 = ::haxe::crypto::Md5_obj::encode(content1);
HXLINE( 104)				::File_obj::mDependMutex->acquire();
HXLINE( 105)				::File_obj::mFileHashes->set(inName,result1);
HXLINE( 106)				::File_obj::mDependMutex->release();
            			}
HXLINE( 109)			localCache->set(inName,result1);
HXLINE( 110)			return result1;
            		}
HXLINE(  79)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(File_obj,getFileHash,return )


::hx::ObjectPtr< File_obj > File_obj::__new(::String inName, ::FileGroup inGroup) {
	::hx::ObjectPtr< File_obj > __this = new File_obj();
	__this->__construct(inName,inGroup);
	return __this;
}

::hx::ObjectPtr< File_obj > File_obj::__alloc(::hx::Ctx *_hx_ctx,::String inName, ::FileGroup inGroup) {
	File_obj *__this = (File_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(File_obj), true, "File"));
	*(void **)__this = File_obj::_hx_vtable;
	__this->__construct(inName,inGroup);
	return __this;
}

File_obj::File_obj()
{
}

void File_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(File);
	HX_MARK_MEMBER_NAME(mName,"mName");
	HX_MARK_MEMBER_NAME(mDir,"mDir");
	HX_MARK_MEMBER_NAME(mDependHash,"mDependHash");
	HX_MARK_MEMBER_NAME(mDepends,"mDepends");
	HX_MARK_MEMBER_NAME(mCompilerFlags,"mCompilerFlags");
	HX_MARK_MEMBER_NAME(mGroup,"mGroup");
	HX_MARK_MEMBER_NAME(mTags,"mTags");
	HX_MARK_MEMBER_NAME(mFilterOut,"mFilterOut");
	HX_MARK_MEMBER_NAME(mEmbedName,"mEmbedName");
	HX_MARK_MEMBER_NAME(mScramble,"mScramble");
	HX_MARK_END_CLASS();
}

void File_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mName,"mName");
	HX_VISIT_MEMBER_NAME(mDir,"mDir");
	HX_VISIT_MEMBER_NAME(mDependHash,"mDependHash");
	HX_VISIT_MEMBER_NAME(mDepends,"mDepends");
	HX_VISIT_MEMBER_NAME(mCompilerFlags,"mCompilerFlags");
	HX_VISIT_MEMBER_NAME(mGroup,"mGroup");
	HX_VISIT_MEMBER_NAME(mTags,"mTags");
	HX_VISIT_MEMBER_NAME(mFilterOut,"mFilterOut");
	HX_VISIT_MEMBER_NAME(mEmbedName,"mEmbedName");
	HX_VISIT_MEMBER_NAME(mScramble,"mScramble");
}

::hx::Val File_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"mDir") ) { return ::hx::Val( mDir ); }
		if (HX_FIELD_EQ(inName,"keep") ) { return ::hx::Val( keep_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mName") ) { return ::hx::Val( mName ); }
		if (HX_FIELD_EQ(inName,"mTags") ) { return ::hx::Val( mTags ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"mGroup") ) { return ::hx::Val( mGroup ); }
		if (HX_FIELD_EQ(inName,"isNvcc") ) { return ::hx::Val( isNvcc_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getTags") ) { return ::hx::Val( getTags_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTags") ) { return ::hx::Val( setTags_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mDepends") ) { return ::hx::Val( mDepends ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mScramble") ) { return ::hx::Val( mScramble ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"mFilterOut") ) { return ::hx::Val( mFilterOut ); }
		if (HX_FIELD_EQ(inName,"mEmbedName") ) { return ::hx::Val( mEmbedName ); }
		if (HX_FIELD_EQ(inName,"isResource") ) { return ::hx::Val( isResource_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mDependHash") ) { return ::hx::Val( mDependHash ); }
		if (HX_FIELD_EQ(inName,"isOutOfDate") ) { return ::hx::Val( isOutOfDate_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"mCompilerFlags") ) { return ::hx::Val( mCompilerFlags ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getCacheProject") ) { return ::hx::Val( getCacheProject_dyn() ); }
		if (HX_FIELD_EQ(inName,"getDependString") ) { return ::hx::Val( getDependString_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"computeDependHash") ) { return ::hx::Val( computeDependHash_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool File_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"mFileHashes") ) { outValue = ( mFileHashes ); return true; }
		if (HX_FIELD_EQ(inName,"getFileHash") ) { outValue = getFileHash_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"mDependMutex") ) { outValue = ( mDependMutex ); return true; }
	}
	return false;
}

::hx::Val File_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"mDir") ) { mDir=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mName") ) { mName=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mTags") ) { mTags=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"mGroup") ) { mGroup=inValue.Cast<  ::FileGroup >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mDepends") ) { mDepends=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"mScramble") ) { mScramble=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"mFilterOut") ) { mFilterOut=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mEmbedName") ) { mEmbedName=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mDependHash") ) { mDependHash=inValue.Cast< ::String >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"mCompilerFlags") ) { mCompilerFlags=inValue.Cast< ::Array< ::String > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool File_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"mFileHashes") ) { mFileHashes=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"mDependMutex") ) { mDependMutex=ioValue.Cast<  ::sys::thread::Mutex >(); return true; }
	}
	return false;
}

void File_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("mName",58,d9,85,f6));
	outFields->push(HX_("mDir",e0,36,40,48));
	outFields->push(HX_("mDependHash",27,c6,f8,58));
	outFields->push(HX_("mDepends",9a,e8,30,88));
	outFields->push(HX_("mCompilerFlags",7b,ca,22,df));
	outFields->push(HX_("mGroup",92,77,08,c2));
	outFields->push(HX_("mTags",e6,1b,7d,fa));
	outFields->push(HX_("mFilterOut",89,c5,eb,62));
	outFields->push(HX_("mEmbedName",97,76,6e,2a));
	outFields->push(HX_("mScramble",5a,06,d6,27));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo File_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(File_obj,mName),HX_("mName",58,d9,85,f6)},
	{::hx::fsString,(int)offsetof(File_obj,mDir),HX_("mDir",e0,36,40,48)},
	{::hx::fsString,(int)offsetof(File_obj,mDependHash),HX_("mDependHash",27,c6,f8,58)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(File_obj,mDepends),HX_("mDepends",9a,e8,30,88)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(File_obj,mCompilerFlags),HX_("mCompilerFlags",7b,ca,22,df)},
	{::hx::fsObject /*  ::FileGroup */ ,(int)offsetof(File_obj,mGroup),HX_("mGroup",92,77,08,c2)},
	{::hx::fsString,(int)offsetof(File_obj,mTags),HX_("mTags",e6,1b,7d,fa)},
	{::hx::fsString,(int)offsetof(File_obj,mFilterOut),HX_("mFilterOut",89,c5,eb,62)},
	{::hx::fsString,(int)offsetof(File_obj,mEmbedName),HX_("mEmbedName",97,76,6e,2a)},
	{::hx::fsString,(int)offsetof(File_obj,mScramble),HX_("mScramble",5a,06,d6,27)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo File_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &File_obj::mFileHashes,HX_("mFileHashes",25,8e,37,71)},
	{::hx::fsObject /*  ::sys::thread::Mutex */ ,(void *) &File_obj::mDependMutex,HX_("mDependMutex",06,87,ee,6e)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String File_obj_sMemberFields[] = {
	HX_("mName",58,d9,85,f6),
	HX_("mDir",e0,36,40,48),
	HX_("mDependHash",27,c6,f8,58),
	HX_("mDepends",9a,e8,30,88),
	HX_("mCompilerFlags",7b,ca,22,df),
	HX_("mGroup",92,77,08,c2),
	HX_("mTags",e6,1b,7d,fa),
	HX_("mFilterOut",89,c5,eb,62),
	HX_("mEmbedName",97,76,6e,2a),
	HX_("mScramble",5a,06,d6,27),
	HX_("getCacheProject",6d,a2,3a,c7),
	HX_("isNvcc",f2,1d,76,66),
	HX_("isResource",d8,6e,4f,8d),
	HX_("keep",85,d0,06,47),
	HX_("getTags",8f,64,79,1f),
	HX_("setTags",9b,f5,7a,12),
	HX_("computeDependHash",b1,fd,df,9a),
	HX_("getDependString",13,61,18,1b),
	HX_("isOutOfDate",c9,64,42,cf),
	::String(null()) };

static void File_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(File_obj::mFileHashes,"mFileHashes");
	HX_MARK_MEMBER_NAME(File_obj::mDependMutex,"mDependMutex");
};

#ifdef HXCPP_VISIT_ALLOCS
static void File_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(File_obj::mFileHashes,"mFileHashes");
	HX_VISIT_MEMBER_NAME(File_obj::mDependMutex,"mDependMutex");
};

#endif

::hx::Class File_obj::__mClass;

static ::String File_obj_sStaticFields[] = {
	HX_("mFileHashes",25,8e,37,71),
	HX_("mDependMutex",06,87,ee,6e),
	HX_("getFileHash",20,db,3f,84),
	::String(null())
};

void File_obj::__register()
{
	File_obj _hx_dummy;
	File_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("File",9c,fa,94,2e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &File_obj::__GetStatic;
	__mClass->mSetStaticField = &File_obj::__SetStatic;
	__mClass->mMarkFunc = File_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(File_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(File_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< File_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = File_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = File_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = File_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void File_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_0bfe5751cf1e51a3_14_boot)
HXDLIN(  14)		mFileHashes =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_0bfe5751cf1e51a3_25_boot)
HXDLIN(  25)		mDependMutex =  ::sys::thread::Mutex_obj::__alloc( HX_CTX );
            	}
}

