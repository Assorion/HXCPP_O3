// Generated by Haxe 4.3.1
#ifndef INCLUDED_ThreadPool
#define INCLUDED_ThreadPool

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(ThreadPool)
HX_DECLARE_CLASS2(sys,thread,Mutex)
HX_DECLARE_CLASS3(sys,thread,_Thread,HaxeThread)



class HXCPP_CLASS_ATTRIBUTES ThreadPool_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ThreadPool_obj OBJ_;
		ThreadPool_obj();

	public:
		enum { _hx_ClassId = 0x54997ba6 };

		void __construct(int inCount);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="ThreadPool")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"ThreadPool"); }
		static ::hx::ObjectPtr< ThreadPool_obj > __new(int inCount);
		static ::hx::ObjectPtr< ThreadPool_obj > __alloc(::hx::Ctx *_hx_ctx,int inCount);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ThreadPool_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ThreadPool",e6,58,d6,3c); }

		::Array< ::Dynamic> threads;
		 ::sys::thread::_Thread::HaxeThread mainThread;
		cpp::AtomicInt arrayIndex;
		int arrayCount;
		 ::sys::thread::Mutex mutex;
		void threadLoop(int threadId);
		::Dynamic threadLoop_dyn();

		void setArrayCount(int inCount);
		::Dynamic setArrayCount_dyn();

		int getNextIndex();
		::Dynamic getNextIndex_dyn();

		void runJob( ::Dynamic job);
		::Dynamic runJob_dyn();

};


#endif /* INCLUDED_ThreadPool */ 
