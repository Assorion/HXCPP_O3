// Generated by Haxe 4.3.1
#ifndef INCLUDED_Manifester
#define INCLUDED_Manifester

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Manifester)



class HXCPP_CLASS_ATTRIBUTES Manifester_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Manifester_obj OBJ_;
		Manifester_obj();

	public:
		enum { _hx_ClassId = 0x383a1184 };

		void __construct(::String inExe);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Manifester")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"Manifester"); }
		static ::hx::ObjectPtr< Manifester_obj > __new(::String inExe);
		static ::hx::ObjectPtr< Manifester_obj > __alloc(::hx::Ctx *_hx_ctx,::String inExe);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Manifester_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Manifester",fc,e1,14,a2); }

		::String mExe;
		::Array< ::String > mFlags;
		::String mOutPre;
		::String mOutPost;
		void add(::String binName,::String manifestName,bool isExe);
		::Dynamic add_dyn();

};


#endif /* INCLUDED_Manifester */ 
