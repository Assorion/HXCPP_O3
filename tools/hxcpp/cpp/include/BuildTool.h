// Generated by Haxe 4.3.1
#ifndef INCLUDED_BuildTool
#define INCLUDED_BuildTool

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(BuildTool)
HX_DECLARE_CLASS0(Compiler)
HX_DECLARE_CLASS0(CopyFile)
HX_DECLARE_CLASS0(EReg)
HX_DECLARE_CLASS0(FileGroup)
HX_DECLARE_CLASS0(Linker)
HX_DECLARE_CLASS0(Manifester)
HX_DECLARE_CLASS0(Prelinker)
HX_DECLARE_CLASS0(Stripper)
HX_DECLARE_CLASS0(Target)
HX_DECLARE_CLASS0(ThreadPool)
HX_DECLARE_CLASS0(Xml)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(sys,thread,Mutex)
HX_DECLARE_CLASS2(sys,thread,Tls)



class HXCPP_CLASS_ATTRIBUTES BuildTool_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef BuildTool_obj OBJ_;
		BuildTool_obj();

	public:
		enum { _hx_ClassId = 0x5253e6c6 };

		void __construct(::String inJob, ::haxe::ds::StringMap inDefines,::Array< ::String > inTargets,::Array< ::String > inIncludePath,::Array< ::String > inDirtyList);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="BuildTool")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"BuildTool"); }
		static ::hx::ObjectPtr< BuildTool_obj > __new(::String inJob, ::haxe::ds::StringMap inDefines,::Array< ::String > inTargets,::Array< ::String > inIncludePath,::Array< ::String > inDirtyList);
		static ::hx::ObjectPtr< BuildTool_obj > __alloc(::hx::Ctx *_hx_ctx,::String inJob, ::haxe::ds::StringMap inDefines,::Array< ::String > inTargets,::Array< ::String > inIncludePath,::Array< ::String > inDirtyList);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~BuildTool_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("BuildTool",86,71,10,8f); }

		static void __boot();
		static int SupportedVersion;
		static ::String os;
		static bool sAllowNumProcs;
		static int sCompileThreadCount;
		static  ::ThreadPool sThreadPool;
		static int sReportedThreads;
		static ::String HXCPP;
		static bool is64;
		static bool isWindows;
		static bool isWindowsArm;
		static bool isLinux;
		static bool isRPi;
		static bool isMac;
		static ::String targetKey;
		static  ::BuildTool instance;
		static  ::sys::thread::Tls helperThread;
		static ::String destination;
		static ::Array< ::String > outputs;
		static  ::sys::thread::Mutex groupMutex;
		static  ::EReg mVarMatch;
		static  ::EReg mNoDollarMatch;
		static bool exitOnThreadError;
		static int threadExitCode;
		static ::String startDir;
		static void isDefault64();
		static ::Dynamic isDefault64_dyn();

		static void addOutput(::String inWhat,::String inWhere);
		static ::Dynamic addOutput_dyn();

		static int getThreadCount();
		static ::Dynamic getThreadCount_dyn();

		static void setThreadError(int inCode);
		static ::Dynamic setThreadError_dyn();

		static void setupNvcc();
		static ::Dynamic setupNvcc_dyn();

		static ::String getArch();
		static ::Dynamic getArch_dyn();

		static ::String getMsvcVer();
		static ::Dynamic getMsvcVer_dyn();

		static bool keepTemp();
		static ::Dynamic keepTemp_dyn();

		static int getNumberOfProcesses();
		static ::Dynamic getNumberOfProcesses_dyn();

		static ::String getVersion();
		static ::Dynamic getVersion_dyn();

		static bool isMsvc();
		static ::Dynamic isMsvc_dyn();

		static bool isMingw();
		static ::Dynamic isMingw_dyn();

		static ::String getNvcc();
		static ::Dynamic getNvcc_dyn();

		static ::Array< ::String > getNvccLinkFlags();
		static ::Dynamic getNvccLinkFlags_dyn();

		static ::Array< ::String > getNvccFlags();
		static ::Dynamic getNvccFlags_dyn();

		static void copy(::String from,::String to);
		static ::Dynamic copy_dyn();

		static void main();
		static ::Dynamic main_dyn();

		static void runMain();
		static ::Dynamic runMain_dyn();

		static void printUsage();
		static ::Dynamic printUsage_dyn();

		static void printBanner();
		static ::Dynamic printBanner_dyn();

		static void set64( ::haxe::ds::StringMap outDefines,bool in64,::hx::Null< bool >  isArm64);
		static ::Dynamic set64_dyn();

		 ::haxe::ds::StringMap mDefines;
		::String mCurrentIncludeFile;
		::Array< ::String > mIncludePath;
		 ::Compiler mCompiler;
		 ::Stripper mStripper;
		 ::Manifester mManifester;
		 ::haxe::ds::StringMap mPrelinkers;
		 ::haxe::ds::StringMap mLinkers;
		::Array< ::Dynamic> mCopyFiles;
		 ::haxe::ds::StringMap mFileGroups;
		 ::haxe::ds::StringMap mTargets;
		::Array< ::String > mFileStack;
		::String mMakefile;
		::Array< ::Dynamic> mMagicLibs;
		 ::haxe::ds::StringMap mPragmaOnce;
		::Array< ::String > mNvccFlags;
		::Array< ::String > mNvccLinkFlags;
		::Array< ::String > mDirtyList;
		bool arm64;
		bool m64;
		bool m32;
		void pushFile(::String inFilename,::String inWhy,::String inSection);
		::Dynamic pushFile_dyn();

		void popFile();
		::Dynamic popFile_dyn();

		void buildTarget(::String inTarget,::String inDestination);
		::Dynamic buildTarget_dyn();

		::String linkNvccFiles(::String objDir,bool hasChanged,::Array< ::String > nvObjs,::String inGroupName,::String objExt);
		::Dynamic linkNvccFiles_dyn();

		void cleanTarget(::String inTarget,bool allObj);
		::Dynamic cleanTarget_dyn();

		 ::Compiler createCompiler( ::Xml inXML, ::Compiler inBase);
		::Dynamic createCompiler_dyn();

		void loadNvccXml();
		::Dynamic loadNvccXml_dyn();

		 ::FileGroup createFileGroup( ::Xml inXML, ::FileGroup inFiles,::String inName,bool inForceRelative,::String inTags);
		::Dynamic createFileGroup_dyn();

		 ::Linker createLinker( ::Xml inXML, ::Linker inBase);
		::Dynamic createLinker_dyn();

		 ::Prelinker createPrelinker( ::Xml inXML, ::Prelinker inBase);
		::Dynamic createPrelinker_dyn();

		 ::Manifester createManifester( ::Xml inXML, ::Manifester inBase);
		::Dynamic createManifester_dyn();

		 ::Stripper createStripper( ::Xml inXML, ::Stripper inBase);
		::Dynamic createStripper_dyn();

		 ::Target createTarget( ::Xml inXML, ::Target inTarget,bool inForceRelative);
		::Dynamic createTarget_dyn();

		bool defined(::String inString);
		::Dynamic defined_dyn();

		bool parseBool(::String inValue);
		::Dynamic parseBool_dyn();

		::String findLocalIncludeFile(::String inBase);
		::Dynamic findLocalIncludeFile_dyn();

		::String findIncludeFile(::String inBase);
		::Dynamic findIncludeFile_dyn();

		void setDefaultToolchain( ::haxe::ds::StringMap defines);
		::Dynamic setDefaultToolchain_dyn();

		void setupAppleDirectories( ::haxe::ds::StringMap defines);
		::Dynamic setupAppleDirectories_dyn();

		void parseXML( ::Xml inXML,::String inSection,bool forceRelative);
		::Dynamic parseXML_dyn();

		void checkToolVersion(::String inVersion);
		::Dynamic checkToolVersion_dyn();

		::String resolvePath(::String inPath);
		::Dynamic resolvePath_dyn();

		void include(::String inName,::String inSection,::hx::Null< bool >  inAllowMissing,::hx::Null< bool >  forceRelative);
		::Dynamic include_dyn();

		::String dospath(::String path);
		::Dynamic dospath_dyn();

		::String substitute(::String str,::hx::Null< bool >  needDollar);
		::Dynamic substitute_dyn();

		bool subBool(::String str);
		::Dynamic subBool_dyn();

		bool valid( ::Xml inEl,::String inSection);
		::Dynamic valid_dyn();

};


#endif /* INCLUDED_BuildTool */ 
