// Generated by Haxe 4.3.1
#ifndef INCLUDED_FileGroup
#define INCLUDED_FileGroup

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(File)
HX_DECLARE_CLASS0(FileGroup)
HX_DECLARE_CLASS0(HLSL)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)



class HXCPP_CLASS_ATTRIBUTES FileGroup_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef FileGroup_obj OBJ_;
		FileGroup_obj();

	public:
		enum { _hx_ClassId = 0x0132a843 };

		void __construct(::String inDir,::String inId,::hx::Null< bool >  __o_inSetImportDir);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="FileGroup")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"FileGroup"); }
		static ::hx::ObjectPtr< FileGroup_obj > __new(::String inDir,::String inId,::hx::Null< bool >  __o_inSetImportDir);
		static ::hx::ObjectPtr< FileGroup_obj > __alloc(::hx::Ctx *_hx_ctx,::String inDir,::String inId,::hx::Null< bool >  __o_inSetImportDir);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FileGroup_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FileGroup",03,33,ef,3d); }

		Float mNewest;
		::String mNewestFile;
		::Array< ::String > mCompilerFlags;
		::Array< ::String > mMissingDepends;
		::Array< ::String > mOptions;
		::String mPrecompiledHeader;
		::String mPrecompiledHeaderDir;
		 ::haxe::ds::StringMap mFiles;
		::Array< ::Dynamic> mHLSLs;
		::String mDir;
		::String mId;
		::String mConfig;
		::Array< ::String > mCacheDepends;
		::String mDependHash;
		bool mAsLibrary;
		bool mAddTwice;
		bool mSetImportDir;
		bool mUseCache;
		bool mRespectTimestamp;
		::String mCacheProject;
		::String mTags;
		bool mNvcc;
		::String mObjPrefix;
		virtual ::String toString();
		::Dynamic toString_dyn();

		 ::FileGroup replace(::String inDir,bool inSetImportDir);
		::Dynamic replace_dyn();

		 ::File find(::String name);
		::Dynamic find_dyn();

		void addFile( ::File file);
		::Dynamic addFile_dyn();

		bool hasFiles();
		::Dynamic hasFiles_dyn();

		void filter( ::haxe::ds::StringMap defines);
		::Dynamic filter_dyn();

		::String getTags();
		::Dynamic getTags_dyn();

		void addTag(::String inTag);
		::Dynamic addTag_dyn();

		bool isPrecompiled();
		::Dynamic isPrecompiled_dyn();

		void dontPrecompile();
		::Dynamic dontPrecompile_dyn();

		void addCompilerFlag(::String inFlag);
		::Dynamic addCompilerFlag_dyn();

		::String getCacheProject();
		::Dynamic getCacheProject_dyn();

		void addDepend(::String inFile,bool inDateOnly);
		::Dynamic addDepend_dyn();

		::String getNewestFile();
		::Dynamic getNewestFile_dyn();

		void addDependFiles( ::FileGroup inGroup);
		::Dynamic addDependFiles_dyn();

		void addHLSL(::String inFile,::String inProfile,::String inVariable,::String inTarget);
		::Dynamic addHLSL_dyn();

		void addOptions(::String inFile);
		::Dynamic addOptions_dyn();

		void checkDependsExist();
		::Dynamic checkDependsExist_dyn();

		::String filterOptions(::String contents);
		::Dynamic filterOptions_dyn();

		bool checkOptions(::String inObjDir);
		::Dynamic checkOptions_dyn();

		::String getPchDir(::String inObjDir);
		::Dynamic getPchDir_dyn();

		::String getPchName();
		::Dynamic getPchName_dyn();

		bool isOutOfDate(Float inStamp);
		::Dynamic isOutOfDate_dyn();

		bool isCached();
		::Dynamic isCached_dyn();

		void preBuild();
		::Dynamic preBuild_dyn();

		::String getDependString();
		::Dynamic getDependString_dyn();

		void setPrecompiled(::String inFile,::String inDir);
		::Dynamic setPrecompiled_dyn();

};


#endif /* INCLUDED_FileGroup */ 
