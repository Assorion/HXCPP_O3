// Generated by Haxe 4.3.1
#ifndef INCLUDED_CompileCache
#define INCLUDED_CompileCache

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(CompileCache)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)



class HXCPP_CLASS_ATTRIBUTES CompileCache_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef CompileCache_obj OBJ_;
		CompileCache_obj();

	public:
		enum { _hx_ClassId = 0x5ecae2af };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="CompileCache")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"CompileCache"); }

		inline static ::hx::ObjectPtr< CompileCache_obj > __new() {
			::hx::ObjectPtr< CompileCache_obj > __this = new CompileCache_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< CompileCache_obj > __alloc(::hx::Ctx *_hx_ctx) {
			CompileCache_obj *__this = (CompileCache_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CompileCache_obj), false, "CompileCache"));
			*(void **)__this = CompileCache_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~CompileCache_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CompileCache",ef,8f,e9,75); }

		static void __boot();
		static bool hasCache;
		static ::String compileCache;
		static bool init( ::haxe::ds::StringMap inDefines);
		static ::Dynamic init_dyn();

		static ::String getPchDir(::String inProject,::String hash);
		static ::Dynamic getPchDir_dyn();

		static ::String getCacheName(::String inProject,::String hash,::String inExt);
		static ::Dynamic getCacheName_dyn();

		static void clear(int inDays,int inMB,bool inLogInfo,::String inProject);
		static ::Dynamic clear_dyn();

		static void list(bool inDetails,::String inProject);
		static ::Dynamic list_dyn();

};


#endif /* INCLUDED_CompileCache */ 
